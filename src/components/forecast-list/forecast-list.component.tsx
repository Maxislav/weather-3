import { ForecastListItemComponent } from "../forecast-list-item/forecast-list-item.component";import { OpenweathermapItem } from "../../interfaces/openweathermap";import { useEffect, useRef, useState } from "react";import styles from './forecast-list.component.less';import tinyscrollbar from "../../lib/tinyscrollbar";import { connect } from "react-redux";import { loadingStart } from "../../store/actions";import { apiOpenWeatherReducer, ApiOpenWeatherState } from "../../store/api-open-weather.reducer";import { useNavigate } from "react-router-dom";const ForecastListComponent = ({dispatch, loading, list, loaded}: any) => {    const child1 = useRef(null);    const [items, setState] = useState<OpenweathermapItem[]>([])    useEffect(() => {        if(!loaded){            dispatch(loadingStart())        }    }, []);    useEffect(() => {       console.log(list)        if(list.length){            setState(list)        }    }, [list.length])    useEffect(() => {        if (items.length) {            //const d = tinyscrollbar            const sc = tinyscrollbar(child1.current, { axis: "x" })            //sc.update()        }    }, [items.length])    const idd = 'scrollbar1';    return <>        <div id={ idd } ref={ child1 } className='forecast-component'>            <div className='scrollbar'>                <div className='track'>                    <div className='thumb'>                        <div className='end'/>                    </div>                </div>            </div>            <div className={ 'viewport ' + styles.viewport }>                <div className='overview'>                    <div className={ styles.list }>                        { items                            .map((it, index) =>                                <ForecastListItemComponent key={ 'key_' + index } data={ it }  index={index}>                                    {String(loading)}                                </ForecastListItemComponent>                            )                        }                    </div>                </div>            </div>        </div>    </>}const mapStateToProps = (state: {apiOpenWeatherReducer: ApiOpenWeatherState}) => {    return {        loading: state.apiOpenWeatherReducer.loading,        list: state.apiOpenWeatherReducer.list,        loaded: state.apiOpenWeatherReducer.loaded,    }}export const ForecastListComponentConnect = connect(mapStateToProps)(ForecastListComponent)