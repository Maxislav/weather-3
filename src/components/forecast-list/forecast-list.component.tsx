import { ForecastListItemComponent } from "../forecast-list-item/forecast-list-item.component";import { OpenweathermapItem } from "../../interfaces/openweathermap";import { useEffect, useRef, useState } from "react";import styles from './forecast-list.component.less';import axios from 'axios';import tinyscrollbar from "../../lib/tinyscrollbar";import { connect } from "react-redux";import { loadingStart } from "../../store/actions";import { ApiOpenWeatherState } from "../../store/reducers";const OPEN_W_API_URL = 'https://api.openweathermap.org/data/2.5/forecast?id=703448&units=metric&mode=json&APPID=19e738728f18421f2074f369bdb54e81'const ForecastListComponent = ({dispatch, loading}: any) => {    console.log(dispatch)    const child1 = useRef(null);    const [items, setState] = useState<OpenweathermapItem[]>([])    async function apiReq() {        const res = await axios.get<{ list: OpenweathermapItem[] }>(OPEN_W_API_URL);        const { list } = res.data;        console.log(res.data);        console.log(loading)        setState(list)    }    useEffect(() => {        dispatch(loadingStart())        apiReq()            .catch(e => {                console.error('Error ForecastListComponent->> ', e)            })    }, []);    useEffect(() => {        if (items.length) {            //const d = tinyscrollbar            const sc = tinyscrollbar(child1.current, { axis: "x" })            //sc.update()        }    }, [items.length])    const idd = 'scrollbar1';    return <>        <div id={ idd } ref={ child1 } className='forecast-component'>            <div className='scrollbar'>                <div className='track'>                    <div className='thumb'>                        <div className='end'/>                    </div>                </div>            </div>            <div className={ 'viewport ' + styles.viewport }>                <div className='overview'>                    <div className={ styles.list }>                        { items                            .map((it, index) =>                                <ForecastListItemComponent key={ 'key_' + index } data={ it }>                                    {String(loading)}                                </ForecastListItemComponent>                            )                        }                    </div>                </div>            </div>        </div>    </>}const mapStateToProps = (state: {apiOpenWeather: ApiOpenWeatherState}) => {    return {        loading: state.apiOpenWeather.loading    }}export const ForecastListComponentConnect = connect(mapStateToProps)(ForecastListComponent)