import React, { Component } from "react";import { computed, makeAutoObservable, makeObservable, observable, configure, action  } from "mobx";import { observer } from "mobx-react";import styles from './mobx-test.component.less'configure({    'enforceActions': 'observed'})class MyStore{    @observable count = 0;    @observable    name = 'ololo'    constructor() {        makeObservable(this, )    }    @computed    get nikName(){        return this.name.concat(this.count.toString())    }    handleName(){        this.name = 'gav'    }    @action('Handle plus')    handlePlus = () => {        this.count++    }}const myStore = new MyStore()@observerclass CounterComponent extends Component<{store:  MyStore}, {}>{    handleIncrement = () => {        this.props.store.handlePlus()    }    render() {        const {count} = this.props.store        return <div className={styles.container}>            <h1>                Count : {count}            </h1>            <button onClick={() => this.props.store.handleName()}>                {this.props.store.name}            </button>            <button onClick={ this.handleIncrement }>                add { this.props.store.count }            </button>        </div>;    }}export class MobxTestComponent extends Component<any, any>{            render() {                return <>                   <CounterComponent store={myStore} />                </>            }}