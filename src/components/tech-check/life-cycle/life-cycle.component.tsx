import { Component } from "react";interface MyTestState {    a: number,    b: number,    arr: number[]}export class LifeCycleComponent extends Component<any, any>{    constructor(props: any) {        super(props);        this.state = {            a: 1,            b: 2,            arr: []        }    }    componentWillReceiveProps(){    }    componentDidMount() {        console.log('componentDidMount')    }    componentDidUpdate(){        console.log('componentDidUpdate')    }    shouldComponentUpdate(a: any, b: MyTestState, c: any) {        console.log('shouldComponentUpdate')        if(b.a ==2){            return false        }        return true    }    myClick =() => {        this.setState({            ...this.state,            a: this.state.a+1,            arr: [...this.state.arr, this.state.a]        })    }    componentWillUnmount(){        console.log('Component will unmount')    }    componentWillUpdate(){    }/*    static getDerivedStateFromProps(props: any, state: any): any{        return null    }*/    render() {        return <>            <table>                <tbody>                <tr>                    <td>                        <div className={'pre-wrap small'}>                            {                                `    // deprecated use static getDerivedStateFromProps если изменяются пропсы     componentWillReceiveProps(){}        //один раз при создании после фции рендер    componentDidMount() { }        //после функции рендер    componentDidUpdate(){}    //нужно ли обновлять компонет. а проперти, в стате, nextContext    shouldComponentUpdate(a: any, b: MyTestState, nextContext: any) {        console.log('shouldComponentUpdate')        if(b.a ==2){            return false        }        return true    }        //перед удалением компонента     componentWillUnmount(){}        //после сонструктора перед самой функцией рендер    static getDerivedStateFromProps(nextProps: Readonly, nextContext: any): State{}        //deprecated  before rendering     componentWillUpdate(){}`                            }                        </div>                    </td>                    <td>                        {                            ``                        }                    </td>                </tr>                </tbody>            </table>            <div>                <button onClick={this.myClick}>                    click                </button>            </div>        </>    }}