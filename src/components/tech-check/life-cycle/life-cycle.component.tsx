import { Component } from "react";import styles from './life-cycle.component.less'import { makeObservable, observable } from "mobx";import { observer } from "mobx-react";class MyStore {    @observable logList: string[] = [];    constructor() {        makeObservable(this)    }    log(text: string) {        this.logList.push(text)    }}const myStore = new MyStore()interface MyTestState {    a: number,    b: number,    arr: number[]}class OldLifeComponent extends Component<{ myProp: number }, any> {    componentWillMount() {        console.log('OldLifeComponent componentWillMount')    }    componentDidMount() {        console.log('OldLifeComponent componentWillMount')    }    shouldComponentUpdate(nextProps: Readonly<{ myProp: number }>, nextState: Readonly<any>, nextContext: any): boolean {        console.log('OldLifeComponent shouldComponentUpdate')        if (this.props.myProp === nextProps.myProp) {            return false        }        return true    }    componentWillReceiveProps(nextProps: Readonly<any>, nextContext: any) {        console.log('OldLifeComponent componentWillReceiveProps', nextProps)    }    componentWillUpdate(nextProps: Readonly<{ myProp: number }>, nextState: Readonly<any>, nextContext: any) {        console.log('OldLifeComponent componentWillUpdate', nextProps)    }    componentDidUpdate(prevProps: Readonly<{ myProp: number }>, prevState: Readonly<any>, snapshot?: any) {        console.log('OldLifeComponent componentDidUpdate', prevProps)    }    render() {        console.log('OldLifeComponent render')        return <>            <div>                OldHooksComponent                { this.props.myProp }            </div>        </>    }}class NewLifeComponent extends Component<{ myPropB: number }, { localVar?: number }> {    constructor(props: { myPropB: number }) {        super(props);        this.state = { localVar: 1 }    }    static getDerivedStateFromProps(nextProps: { myPropB: number }, prevState: { localVar: 1 }): { localVar?: number } | null {        console.log('NewLifeComponent getDerivedStateFromProps', nextProps, prevState)        return {}    }    getSnapshotBeforeUpdate(prevProps: Readonly<{ myPropB: number }>, prevState: Readonly<{ localVar?: number }>): any {        console.log('NewLifeComponent getSnapshotBeforeUpdate prevProps, prevState', prevProps, prevState)        return null    }    componentDidUpdate(prevProps: Readonly<{ myPropB: number }>, prevState: Readonly<{ localVar?: number }>, snapshot?: any) {        console.log('NewLifeComponent componentDidUpdate prevProps, prevState', prevProps, prevState)    }    render() {        return <>            <div>                NewLifeComponent props { this.props.myPropB } state { this.state.localVar }            </div>        </>    }}export class LifeCycleComponent extends Component<any, any> {    constructor(props: any) {        super(props);        this.state = {            a: 1,            b: 1,            arr: []        }    }    componentDidMount() {        console.log('LifeCycleComponent componentDidMount')    }    componentDidUpdate() {        console.log('LifeCycleComponent componentDidUpdate')    }    shouldComponentUpdate(a: any, b: MyTestState, c: any) {        //  console.log('shouldComponentUpdate')        if (b.a == 2) {            return false        }        return true    }    render() {        return <>            <div>                <h4>                    Old life                </h4>                <div>                    <img className={ styles.image } src={ './assets/hooks.PNG' }/>                </div>                <OldLifeComponent myProp={ this.state.a }/>                <div>                    <h4>                        mounting                    </h4>                    <ul>                        <li>                            {`componentWillMount(): void`}                        </li>                        <li>                            render                        </li>                        <li>                            componentDidMount(): void                        </li>                    </ul>                    <h4>                        Updation                    </h4>                    <ul>                        <li>                            {`componentWillReceiveProps(nextProps: Readonly<any>, nextContext: any): void`}. принимает nextProps, nextContext                            <div>                                <button onClick={ () => this.setState({ a: this.state.a + 1 }) }>update prop</button>                            </div>                            <div>                                сработает Component will receive props - shouldComponentUpdate - componentWillUpdate -                                render -                                componentDidUpdate, если нет запрета shouldComponentUpdate                            </div>                        </li>                        <li>                            componentWillUpdate. принимает nextProps, nextState, nextContext                        </li>                        <li>                            componentDidUpdate. принимает nextProps, nextState, nextContext                        </li>                    </ul>                </div>            </div>            <h4>                New hooks            </h4>            <div>                <img className={ styles.image } src={ './assets/hooks-2.PNG' }/>            </div>            <div className={ 'flex-row' }>                <div>                    <button onClick={ () => this.setState({ b: this.state.b + 1 }) }>                        update b                    </button>                    <NewLifeComponent myPropB={ this.state.b }/>                    <h4>                        Mounting                    </h4>                    <ul>                        <li>                            getDerivedStateFromProps принимает nextProps, prevState                            <br/> замена wiiReceiveProps                        </li>                        <li>                            Render                        </li>                        <li>                            - React обновляет дерево и refs                        </li>                        <li>                            componentDidMount                        </li>                    </ul>                    <h4>                        Updations                    </h4>                    <ul>                        <li>                            getDerivedStateFromProps принимает nextProps, prevState                        </li>                        <li>                            shouldComponentUpdate                        </li>                        <li>                            render                        </li>                        <li>                            getSnapshotBeforeUpdate prevProps, prevState                            <br/> используется вместе с componentDidUpdate                        </li>                        <li>                            - React обновляет дерево и refs                        </li>                        <li>                            componentDidUpdate                        </li>                    </ul>                </div>                <div>                    right                </div>            </div>            {/*<div>                <button onClick={this.myClick}>                    click                </button>            </div>*/ }        </>    }}