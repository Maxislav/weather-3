const content =    `    1. Component Pattern:    The Component pattern is the core of React.            `export const ReusePatternsComponent = () => {    return <>    <div >        <ul>            <li>                <h4>                    Component Pattern:                </h4>                <div>                    The Component pattern is the core of React. React is built around the concept of components, which are reusable UI elements that can be composed together to create complex user interfaces. Components can be divided into two types: presentational and container.                </div>            </li>            <li>                <h4>                    2. Higher Order Component (HOC) Pattern:                </h4>                <div>                    Шаблон «Компонент более высокого порядка» используется для улучшения функциональности существующих компонентов путем их упаковки в компонент более высокого порядка. HOC позволяют повторно использовать код и добавлять новые функции к компонентам, не меняя их исходную реализацию.                </div>            </li>            <li>                <h4>                    3.Render Props Pattern:                </h4>                <div >                    Шаблон Render Props используется для совместного использования кода между компонентами путем передачи функции в качестве свойства. Функция возвращает JSX, который должен быть отображен, позволяя родительскому компоненту контролировать то, что отображается.                    Этот шаблон полезен для создания повторно используемых компонентов, которые можно использовать во всем приложении. Например, вы можете создать компонент, который извлекает данные из API и передает их дочернему компоненту с помощью свойства рендеринга.                </div>            </li>            <li>                <h4>                    4. Container-Component Pattern:                </h4>                <div >                    Шаблон «Контейнер-компонент» отделяет бизнес-логику от логики представления. Компоненты контейнера управляют состоянием и передают его презентационным компонентам, которые занимаются только рендерингом пользовательского интерфейса.                </div>            </li>            <li>                <h4>                    5. Flux and Redux Patterns:                </h4>                <div >                    Шаблоны Flux и Redux используются для управления состоянием приложения. Они включают однонаправленный поток данных, при котором действия вызывают обновления в хранилище, что, в свою очередь, обновляет представления.                </div>                <div >              Flux использует диспетчер для управления действиями и хранилища для управления состоянием. Redux использует единое хранилище для управления состоянием всего приложения, а действия запускают обновления хранилища.                </div>            </li>        </ul>    </div>    </>}