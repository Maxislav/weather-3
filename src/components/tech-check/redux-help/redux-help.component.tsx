export const ReduxHelpComponent = () => {    return<>        <div className={'flex-row'}>            <div >                <h4>                   create store                </h4>                <div className={'pre-wrap'}>                    {                        `const rootReducer = combineReducers({    apiOpenWeatherReducer,    mapCloudsStateReducer,    routing: routerReducer,})export const store = configureStore({    reducer: rootReducer,    middleware: (getDefaultMiddleware) =>        getDefaultMiddleware().prepend(listenerMiddleware.middleware),})                                        `                    }                </div>            </div>            <div>                <h4>                    Middleware                </h4>                <div className={'pre-wrap'}>{`export const listenerMiddleware = createListenerMiddleware<any>()listenerMiddleware.startListening({    actionCreator: loadingStart,    effect: async (action, listenerApi) => {        const list = await apiReq()        listenerApi            .dispatch(loadingSuccess(list))    }})`}                </div>            </div>        </div>        <div className={'flex-row'}>            <div>                <h4>                   reducer                </h4>                <div className={'pre-wrap'}>                    {`export const apiOpenWeatherReducer = (state = defaultState, action: AnyAction) => {    switch (action.type){        case "LOADING_START": {            return {                ...state,                loading: true,                list: [],            }        }        case "LOADING_SUCCESS": {            return {                ...state,                loading: false,                loaded: true,                list: action.payload            }        }        default: {            return state        }    }}`}                </div>            </div>            <div>                <h4>                    actions                </h4>                <div className={'pre-wrap'}>{`export const loadingStart = createAction('LOADING_START')export const loadingSuccess = createAction('LOADING_SUCCESS',    (list: OpenweathermapItem[]) => ({        payload: list    }))`}                </div>            </div>        </div>        <div className={'flex-row'}>            <div>                <h4>                    Integration                </h4>                <div className={'pre-wrap'}>                    {`const ForecastListComponent = ({dispatch, loading, list, loaded}: any) {...}const mapStateToProps = (state: {apiOpenWeatherReducer: ApiOpenWeatherState}) => {    return {        loading: state.apiOpenWeatherReducer.loading,        list: state.apiOpenWeatherReducer.list,        loaded: state.apiOpenWeatherReducer.loaded,    }}export const ForecastListComponentConnect = connect(mapStateToProps)(ForecastListComponent)                        `}                </div>            </div>        </div>    </>}