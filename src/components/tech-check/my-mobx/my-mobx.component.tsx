import { observer } from "mobx-react";import { makeObservable, observable, runInAction } from "mobx";import { createContext, useCallback, useContext, useMemo } from "react";import './my-mobx.component.less';const makeReq = (): Promise<string> => {    return new Promise((resolve) => {        setTimeout(() => {            resolve('response ok')        }, 1000)    })}class MyMobxStore {    @observable count: number = 0;    @observable name = 'initial name'    @observable loading = false    @observable result = ''    constructor() {        makeObservable(this)    }    handleCountPlus = () => {        this.count++    }    handleRequest = async () => {        this.loading = true;        const res = await makeReq()        runInAction(() => {            this.loading = false            this.result = res        })    }}const MyStoreContext = createContext<MyMobxStore | null>(null)const useStoreHook = () => {    const context = useContext(MyStoreContext);    if (!context) {        console.warn('no init My context')    }    return context}const InnerComponent = observer(() => {    const store = useStoreHook()    return <div>        <div>            {store.count}        </div>        <button onClick={()=>store.handleCountPlus()}>            handleCountPlus        </button>        <div>            loading: {store.loading.toString()} result: {store.result}        </div>        <button onClick={()=>store.handleRequest()}>            handleRequest        </button>    </div>})export const MyMobxComponent = observer(() => {    return <>        <MyStoreContext.Provider value={new MyMobxStore()}>            <h4>                MyMobxComponent            </h4>            <div className={ 'flex-row' }>               <InnerComponent/>                <div className={'pre-wrap'}>                    {                        `                                                class MyMobxStore {    @observable count: number = 0;    @observable name = 'initial name'    @observable loading = false    @observable result = ''    constructor() {        makeObservable(this)    }    handleCountPlus = () => {        this.count++    }    handleRequest = async () => {        this.loading = true;        const res = await makeReq()        runInAction(() => {            this.loading = false            this.result = res        })    }}                                                `                    }                </div>            </div>        </MyStoreContext.Provider>    </>})