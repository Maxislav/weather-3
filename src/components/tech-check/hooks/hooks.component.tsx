import { createContext, Reducer, useContext, useEffect, useReducer, useState } from "react";const initialState: MyState = {count: 0};function init(initialCount: number): MyState {   return {count: initialCount};}interface MyState{   count: number}function reducer(state: MyState, action: {type: string}): MyState {   switch (action.type) {      case 'increment':         return {count: state.count + 1};      case 'decrement':         return {count: state.count - 1};      default:         throw {            count: 0         };   }}const r: Reducer<MyState, {type: string}> = reducerconst themes = {   light: {      foreground: "#000000",      background: "#eeeeee"   },   dark: {      foreground: "#ffffff",      background: "#222222"   }};const ThemeContext = createContext(themes.light);function InnerComponent(){   const theme = useContext(ThemeContext)   return <>      <button>         Inner button         theme: {theme.foreground}      </button>   </>}export function HooksComponent(){   const [count, setState] = useState(0)   useEffect(() => {      return () => {         console.log('after component update')      }   }, [count])   const myClick = () => {      setState(count+1);      dispatch({type: 'decrement'})   }   const [state, dispatch] = useReducer<Reducer<MyState, {type: string}>, any>(r, initialState, init);   return <>   <div>    <table className={'pre-wrap'}>       <tbody>         <tr>            <td>               { ` const [state, setState] = useState(initialState); //componentDidMount, componentWillUnmount, componentDidUpdate useEffect(() => {  const subscription = props.source.subscribe();  return () => {    // Clean up the subscription    subscription.unsubscribe();  };}, [deps])//useMemoconst memoizedValue = useMemo(() => computeExpensiveValue(a, b), [a, b]);const refContainer = useRef(initialValue); `               }            </td>            <td>               <div>                  {`const themes = {   light: {      foreground: "#000000",      background: "#eeeeee"   },   dark: {      foreground: "#ffffff",      background: "#222222"   }};const ThemeContext = createContext(themes.light);const value = useContext(MyContext)inside componentconst theme = useContext(ThemeContext)                  `}               </div>               <ThemeContext.Provider value={themes.dark}>                  <InnerComponent/>               </ThemeContext.Provider>            </td>         </tr>       </tbody>    </table>      <div>         {count}      </div>      <button onClick={myClick}>         click me      </button>   </div>   </>}