import {Action, AnyAction, combineReducers} from "redux";import {OpenweathermapItem} from "../interfaces/openweathermap";import {createReducer} from "@reduxjs/toolkit";import {legacy_createStore as createStore} from 'redux'import {loadingStart, loadingSuccess} from "./actions";export interface ApiOpenWeatherState {    loading: boolean;    loaded: boolean;    list: OpenweathermapItem[]}const defaultState: ApiOpenWeatherState = {    loading: false,    loaded: false,    list: []}// {//     [loadingStart]: (state: ApiOpenWeatherState): any => {//     state.loading = true// },//     [loadingSuccess as any]: (state: ApiOpenWeatherState, action: AnyAction): any => {//     state.loading = false;//     state.list = action.payload// }// }export const apiOpenWeatherReducer = createReducer<ApiOpenWeatherState, any>(defaultState, (builder: any) => {    builder        .addCase(            loadingStart, (state: ApiOpenWeatherState) => {                state.loading = true            }        )        .addCase(loadingSuccess, (state: ApiOpenWeatherState, action: AnyAction) => {            state.loading = false;            state.list = action.payload        })})export const _apiOpenWeatherReducer = (state = defaultState, action: AnyAction) => {    switch (action.type) {        case "LOADING_START": {            return {                ...state,                loading: true,                list: [],            }        }        case "LOADING_SUCCESS": {            return {                ...state,                loading: false,                loaded: true,                list: action.payload            }        }        default: {            return state        }    }}