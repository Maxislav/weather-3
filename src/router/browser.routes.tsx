import { createBrowserRouter, Outlet, useParams } from "react-router-dom";import { Layout } from "../components/layout/layout.component";import { Home, homeLoader } from "../components/home/home.component";import { deferredLoader, DeferredPage } from "../components/deffered/deffered.component";import { ForecastLayoutItemComponent } from "../components/forecast-layout-item/forecast-layout-item.component";import React, { Component } from "react";import { Observer, observer, Provider } from "mobx-react";import { observable, reaction, computed, makeAutoObservable, makeObservable } from 'mobx'import { configureStore } from "@reduxjs/toolkit";import { listenerMiddleware } from "../store/middleWares";import { rootReducer } from "../index";class MyStore{    @observable count = 0;    @observable name = 'ololo'    constructor() {        makeObservable(this)    }    get nikName(){        return this.name.concat(this.count.toString())    }    handleName(){        this.name = 'gav'    }    handle = () => {        this.count++    }}const myStore = new MyStore()@observer class Counter extends Component<{store: MyStore}, any> {    constructor(p: any) {        super(p);    }    handleIncrement = () => {        /* this.count++         console.log(this.count)*/        this.props.store.handle()    }    render() {        // console.log('->>',this.count)        return <div>            <button onClick={() => this.props.store.handleName()}>                {this.props.store.name}            </button>            <button onClick={ this.handleIncrement }>                add { this.props.store.count }            </button>        </div>;    }}export const myRouter = createBrowserRouter([    {        path: "todos",        Component: () => <Counter store={myStore}/>,    },    {        path: "/",        Component: Layout,        children: [            {                index: true,                loader: homeLoader,                Component: Home,            },            {                path: "deferred",                loader: deferredLoader,                Component: DeferredPage,            },            {                path: 'forecast-item/:id',                Component: ForecastLayoutItemComponent,            },            /*{                path: "todos",                action: todosAction,                loader: todosLoader,                Component: TodosList,                ErrorBoundary: TodosBoundary,                children: [                    {                        path: ":id",                        loader: todoLoader,                        Component: Todo,                    },                ],            },            {                path: "deferred",                loader: deferredLoader,                Component: DeferredPage,            },*/        ],    },    {        path: '*',        Component: () => <h1> Not found</h1>    },], {    basename: '/',// '/C:/Projects/weather/dist/index.html'    //  basename: '/C:/Projects/weather-3/dist/index.html',// '/C:/Projects/weather/dist/index.html'});