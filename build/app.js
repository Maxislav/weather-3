/*! For license information please see app.js.LICENSE.txt */
!function(){var e,t,n,r,o={6297:function(e,t,n){"use strict";var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,".app-component__app__kWsvb7UbJ5 {\n  width: 100%;\n  margin: 0 auto;\n  padding: 4px;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n}\n","",{version:3,sources:["webpack://./src/components/app/app.component.less"],names:[],mappings:"AAAA;EACE,WAAA;EACA,cAAA;EACA,YAAA;EACA,YAAA;EACA,aAAA;EACA,sBAAA;AACF",sourcesContent:[".app {\n  width: 100%;\n  margin: 0 auto;\n  padding: 4px;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  //TODo uncomment\n  //max-width: 800px;\n  //background: lightgrey;\n  //max-height: 600px;\n  // overflow: hidden;\n}"],sourceRoot:""}]),a.locals={app:"app-component__app__kWsvb7UbJ5"},t.Z=a},966:function(e,t,n){"use strict";var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,".canvas-image-component__canvas__i3J9sdx_k7 {\n  width: 100%;\n  height: 100%;\n}\n","",{version:3,sources:["webpack://./src/components/canvas-image/canvas-image.component.less"],names:[],mappings:"AAAA;EACE,WAAA;EACA,YAAA;AACF",sourcesContent:[".canvas{\n  width: 100%;\n  height: 100%;\n}"],sourceRoot:""}]),a.locals={canvas:"canvas-image-component__canvas__i3J9sdx_k7"},t.Z=a},7093:function(e,t,n){"use strict";var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,".deffered-component__container__ZkMEqUgZez {\n  display: flex;\n  flex-wrap: wrap;\n  width: fit-content;\n  border: 1px solid red;\n}\n.deffered-component__el__cVgwxmXjo4 {\n  padding: 10px;\n  border: 1px solid green;\n  flex-grow: 0;\n  flex-shrink: 0;\n  flex-basis: calc(50% - 4px);\n  min-width: 200px;\n}\n","",{version:3,sources:["webpack://./src/components/deffered/deffered.component.less"],names:[],mappings:"AAAA;EACE,aAAA;EACA,eAAA;EAEA,kBAAA;EACA,qBAAA;AAAF;AAGA;EAEE,aAAA;EACA,uBAAA;EACA,YAAA;EACA,cAAA;EACA,2BAAA;EACA,gBAAA;AAFF",sourcesContent:[".container {\n  display: flex;\n  flex-wrap: wrap;\n\n  width: fit-content;\n  border: 1px solid red;\n}\n\n.el {\n\n  padding: 10px;\n  border: 1px solid green;\n  flex-grow: 0;\n  flex-shrink: 0;\n  flex-basis: calc(50% - 4px);\n  min-width: 200px;\n}"],sourceRoot:""}]),a.locals={container:"deffered-component__container__ZkMEqUgZez",el:"deffered-component__el__cVgwxmXjo4"},t.Z=a},621:function(e,t,n){"use strict";var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,".forecast-layout-item-component__container__BfNCSfhVZZ {\n  background: no-repeat top / 100% url('/assets/pngegg.png'), #99ddff;\n  height: 100%;\n}\n.forecast-layout-item-component__title__H21oN2pd43 {\n  padding: 0;\n  margin: 10px;\n  font-size: 15px;\n  color: white;\n  text-shadow: #00d0ff 1px 0 10px;\n}\n","",{version:3,sources:["webpack://./src/components/forecast-layout-item/forecast-layout-item.component.less"],names:[],mappings:"AAAA;EACE,mEAAA;EACA,YAAA;AACF;AAEA;EACE,UAAA;EACA,YAAA;EACA,eAAA;EACA,YAAA;EACA,+BAAA;AAAF",sourcesContent:[".container{\n  background: no-repeat top/100% url('/assets/pngegg.png'), #99ddff;\n  height: 100%;\n}\n\n.title{\n  padding: 0;\n  margin: 10px;\n  font-size: 15px;\n  color: white;\n  text-shadow: #00d0ff 1px 0 10px;\n}"],sourceRoot:""}]),a.locals={container:"forecast-layout-item-component__container__BfNCSfhVZZ",title:"forecast-layout-item-component__title__H21oN2pd43"},t.Z=a},6436:function(e,t,n){"use strict";var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,".forecast-list-item-component__container__dC9P9Fovtx {\n  display: flex;\n  flex-direction: column;\n  border: 1px solid gray;\n  height: 120px;\n  width: 80px;\n  padding: 3px;\n  font-size: 12px;\n  text-align: center;\n  border-radius: 3px;\n}\n.forecast-list-item-component__active__VR9dlRbCNm {\n  transform: scale(1.05);\n  box-shadow: 0 0 3px rgba(0, 0, 0, 0.5);\n}\n.forecast-list-item-component__time-00__I9bjtoIOaH {\n  background: #99bcff;\n}\n.forecast-list-item-component__time-03__d7f9lG1cH8 {\n  background: rgba(153, 188, 255, 0.9);\n}\n.forecast-list-item-component__time-06__bFcp_enN1V {\n  background: rgba(153, 188, 255, 0.6);\n}\n.forecast-list-item-component__time-09__n3jtNxl2X4 {\n  background: rgba(153, 188, 255, 0.3);\n}\n.forecast-list-item-component__time-12__E_ToloJdpD {\n  background: rgba(153, 188, 255, 0);\n}\n.forecast-list-item-component__time-15__K8Htor_HHR {\n  background: rgba(153, 188, 255, 0.15);\n}\n.forecast-list-item-component__time-18__oql9FkepBT {\n  background: rgba(153, 188, 255, 0.35);\n}\n.forecast-list-item-component__time-21__mCYCL1HQnK {\n  background: rgba(153, 188, 255, 0.7);\n}\n.forecast-list-item-component__date__vdOCBUEcOb,\n.forecast-list-item-component__time__Wf3N1jGbA3,\n.forecast-list-item-component__temperature__jtB71AEbnK {\n  white-space: nowrap;\n}\n","",{version:3,sources:["webpack://./src/components/forecast-list-item/forecast-list-item.component.less"],names:[],mappings:"AAAA;EACE,aAAA;EACA,sBAAA;EACA,sBAAA;EACA,aAAA;EACA,WAAA;EACA,YAAA;EACA,eAAA;EACA,kBAAA;EACA,kBAAA;AACF;AAEA;EACE,sBAAA;EACA,sCAAA;AAAF;AAGA;EACE,mBAAA;AADF;AAIA;EACE,oCAAA;AAFF;AAKA;EACE,oCAAA;AAHF;AAMA;EACE,oCAAA;AAJF;AAOA;EACE,kCAAA;AALF;AAQA;EACE,qCAAA;AANF;AASA;EACE,qCAAA;AAPF;AAUA;EACE,oCAAA;AARF;AAWA;;;EAGE,mBAAA;AATF",sourcesContent:[".container {\n  display: flex;\n  flex-direction: column;\n  border: 1px solid gray;\n  height: 120px;\n  width: 80px;\n  padding: 3px;\n  font-size: 12px;\n  text-align: center;\n  border-radius: 3px;\n}\n\n.active {\n  transform: scale(1.05);\n  box-shadow: 0 0 3px rgba(0, 0, 0, 0.5);\n}\n\n.time-00 {\n  background: rgba(153, 188, 255, 100%);\n}\n\n.time-03 {\n  background: rgba(153, 188, 255, 90%);\n}\n\n.time-06 {\n  background: rgba(153, 188, 255, 60%);\n}\n\n.time-09 {\n  background: rgba(153, 188, 255, 30%);\n}\n\n.time-12 {\n  background: rgba(153, 188, 255, 0%);\n}\n\n.time-15 {\n  background: rgba(153, 188, 255, 15%);\n}\n\n.time-18 {\n  background: rgba(153, 188, 255, 35%);\n}\n\n.time-21 {\n  background: rgba(153, 188, 255, 70%);\n}\n\n.date,\n.time,\n.temperature {\n  white-space: nowrap;\n}"],sourceRoot:""}]),a.locals={container:"forecast-list-item-component__container__dC9P9Fovtx",active:"forecast-list-item-component__active__VR9dlRbCNm","time-00":"forecast-list-item-component__time-00__I9bjtoIOaH","time-03":"forecast-list-item-component__time-03__d7f9lG1cH8","time-06":"forecast-list-item-component__time-06__bFcp_enN1V","time-09":"forecast-list-item-component__time-09__n3jtNxl2X4","time-12":"forecast-list-item-component__time-12__E_ToloJdpD","time-15":"forecast-list-item-component__time-15__K8Htor_HHR","time-18":"forecast-list-item-component__time-18__oql9FkepBT","time-21":"forecast-list-item-component__time-21__mCYCL1HQnK",date:"forecast-list-item-component__date__vdOCBUEcOb",time:"forecast-list-item-component__time__Wf3N1jGbA3",temperature:"forecast-list-item-component__temperature__jtB71AEbnK"},t.Z=a},4295:function(e,t,n){"use strict";var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,".forecast-list-component__list__X8Vh_XQ3uA {\n  display: flex;\n  column-gap: 4px;\n}\n.forecast-list-component__viewport__Mp4ML_XXDS {\n  overflow-x: hidden;\n  width: 100%;\n}\n","",{version:3,sources:["webpack://./src/components/forecast-list/forecast-list.component.less"],names:[],mappings:"AAAA;EACE,aAAA;EAEA,eAAA;AAAF;AAEA;EACE,kBAAA;EACA,WAAA;AAAF",sourcesContent:[".list{\n  display: flex;\n // overflow-x: auto;\n  column-gap: 4px;\n}\n.viewport{\n  overflow-x: hidden;\n  width: 100%;\n}"],sourceRoot:""}]),a.locals={list:"forecast-list-component__list__X8Vh_XQ3uA",viewport:"forecast-list-component__viewport__Mp4ML_XXDS"},t.Z=a},9240:function(e,t,n){"use strict";var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,".home-component__container__ht50_ZARWd {\n  width: 100%;\n  overflow: hidden;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n}\n","",{version:3,sources:["webpack://./src/components/home/home.component.less"],names:[],mappings:"AAAA;EACE,WAAA;EACA,gBAAA;EACA,YAAA;EACA,aAAA;EACA,uBAAA;AACF",sourcesContent:[".container {\n  width: 100%;\n  overflow: hidden;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n}\n"],sourceRoot:""}]),a.locals={container:"home-component__container__ht50_ZARWd"},t.Z=a},6317:function(e,t,n){"use strict";var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,".images-component__container__jgoUjKKkqO {\n  background: aquamarine;\n  position: relative;\n  height: 400px;\n  width: 100%;\n}\n.images-component__container__jgoUjKKkqO > div {\n  position: absolute;\n  top: 0;\n  left: 50%;\n  transform: translateX(-50%);\n  width: 800px;\n}\n","",{version:3,sources:["webpack://./src/components/images/images.component.less"],names:[],mappings:"AAAA;EACE,sBAAA;EACA,kBAAA;EACA,aAAA;EACA,WAAA;AACF;AAAE;EACE,kBAAA;EACA,MAAA;EACA,SAAA;EACA,2BAAA;EACA,YAAA;AAEJ",sourcesContent:[".container{\n  background: aquamarine;\n  position: relative;\n  height: 400px;\n  width: 100%;\n  &>div{\n    position: absolute;\n    top: 0;\n    left: 50%;\n    transform: translateX(-50%);\n    width: 800px;\n  }\n}"],sourceRoot:""}]),a.locals={container:"images-component__container__jgoUjKKkqO"},t.Z=a},88:function(e,t,n){"use strict";var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,".layout__nav__XaE_RadvGP ul {\n  margin: 20px 10px;\n  gap: 10px;\n  padding: 0;\n  display: flex;\n  flex-wrap: wrap;\n}\n.layout__nav__XaE_RadvGP li {\n  list-style: none;\n  white-space: nowrap;\n}\n","",{version:3,sources:["webpack://./src/components/layout/layout.less"],names:[],mappings:"AAAA;EAEI,iBAAA;EACA,SAAA;EACA,UAAA;EACA,aAAA;EACA,eAAA;AAAJ;AANA;EAUI,gBAAA;EACA,mBAAA;AADJ",sourcesContent:[".nav {\n  ul {\n    margin: 20px 10px;\n    gap: 10px;\n    padding: 0;\n    display: flex;\n    flex-wrap: wrap;\n  }\n\n  li {\n    list-style: none;\n    white-space: nowrap;\n  }\n}"],sourceRoot:""}]),a.locals={nav:"layout__nav__XaE_RadvGP"},t.Z=a},2439:function(e,t,n){"use strict";var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,".map-clouds-component__container__oKaBffzxMS {\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr;\n  width: 100%;\n}\n.map-clouds-component__container__oKaBffzxMS img {\n  width: 100%;\n  height: auto;\n}\n","",{version:3,sources:["webpack://./src/components/map-clouds/map-clouds.component.less"],names:[],mappings:"AAAA;EACE,aAAA;EACA,8CAAA;EACA,WAAA;AACF;AAJA;EAKI,WAAA;EACA,YAAA;AAEJ",sourcesContent:[".container{\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr;\n  width: 100%;\n  img{\n    width: 100%;\n    height: auto;\n  }\n}"],sourceRoot:""}]),a.locals={container:"map-clouds-component__container__oKaBffzxMS"},t.Z=a},5074:function(e,t,n){"use strict";var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,".map-rain-component__container__Rgez3CDfM0 {\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr;\n  width: 100%;\n}\n.map-rain-component__container__Rgez3CDfM0 img {\n  width: 100%;\n  height: auto;\n}\n","",{version:3,sources:["webpack://./src/components/map-rain/map-rain.component.less"],names:[],mappings:"AAAA;EACE,aAAA;EACA,8CAAA;EACA,WAAA;AACF;AAJA;EAKI,WAAA;EACA,YAAA;AAEJ",sourcesContent:[".container{\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr;\n  width: 100%;\n  img{\n    width: 100%;\n    height: auto;\n  }\n}"],sourceRoot:""}]),a.locals={container:"map-rain-component__container__Rgez3CDfM0"},t.Z=a},319:function(e,t,n){"use strict";var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,".map-tiles-component__container___Clpcc9g2r {\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr;\n  width: 100%;\n}\n.map-tiles-component__container___Clpcc9g2r img {\n  width: 100%;\n  height: auto;\n}\n","",{version:3,sources:["webpack://./src/components/map-tiles/map-tiles.component.less"],names:[],mappings:"AAAA;EACE,aAAA;EACA,8CAAA;EACA,WAAA;AACF;AAJA;EAKI,WAAA;EACA,YAAA;AAEJ",sourcesContent:[".container{\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr;\n  width: 100%;\n  img{\n    width: 100%;\n    height: auto;\n  }\n}"],sourceRoot:""}]),a.locals={container:"map-tiles-component__container___Clpcc9g2r"},t.Z=a},6161:function(e,t,n){"use strict";var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,".mobx-test-component__container__m0gELwNrSZ {\n  display: block;\n}\n.mobx-test-component__container__m0gELwNrSZ button {\n  display: block;\n  width: 160px;\n  height: 40px;\n}\n","",{version:3,sources:["webpack://./src/components/mobx-test/mobx-test.component.less"],names:[],mappings:"AAAA;EACE,cAAA;AACF;AAFA;EAGI,cAAA;EACA,YAAA;EACA,YAAA;AAEJ",sourcesContent:[".container{\n  display: block;\n  button{\n    display: block;\n    width: 160px;\n    height: 40px;\n  }\n}"],sourceRoot:""}]),a.locals={container:"mobx-test-component__container__m0gELwNrSZ"},t.Z=a},7518:function(e,t,n){"use strict";var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,".life-cycle-component__image__chyG4rKO_V {\n  max-width: 800px;\n  height: auto;\n}\n","",{version:3,sources:["webpack://./src/components/tech-check/life-cycle/life-cycle.component.less"],names:[],mappings:"AAAA;EACE,gBAAA;EACA,YAAA;AACF",sourcesContent:[".image{\n  max-width: 800px;\n  height: auto;\n}"],sourceRoot:""}]),a.locals={image:"life-cycle-component__image__chyG4rKO_V"},t.Z=a},7391:function(e,t,n){"use strict";var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,"button {\n  display: block;\n}\n","",{version:3,sources:["webpack://./src/components/tech-check/my-mobx/my-mobx.component.less"],names:[],mappings:"AAAA;EACI,cAAA;AACJ",sourcesContent:["button{\n    display: block;\n}"],sourceRoot:""}]),a.locals={},t.Z=a},3645:function(e){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var l=0;l<this.length;l++){var u=this[l][0];null!=u&&(a[u]=!0)}for(var s=0;s<e.length;s++){var c=[].concat(e[s]);r&&a[c[0]]||(void 0!==i&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=i),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),o&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=o):c[4]="".concat(o)),t.push(c))}},t}},7537:function(e){"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},8679:function(e,t,n){"use strict";var r=n(1296),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},i={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},l={};function u(e){return r.isMemo(e)?a:l[e.$$typeof]||o}l[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},l[r.Memo]=a;var s=Object.defineProperty,c=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var o=p(n);o&&o!==h&&e(t,o,r)}var a=c(n);f&&(a=a.concat(f(n)));for(var l=u(t),m=u(n),v=0;v<a.length;++v){var y=a[v];if(!(i[y]||r&&r[y]||m&&m[y]||l&&l[y])){var g=d(n,y);try{s(t,y,g)}catch(e){}}}}return t}},6103:function(e,t){"use strict";var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,o=n?Symbol.for("react.portal"):60106,i=n?Symbol.for("react.fragment"):60107,a=n?Symbol.for("react.strict_mode"):60108,l=n?Symbol.for("react.profiler"):60114,u=n?Symbol.for("react.provider"):60109,s=n?Symbol.for("react.context"):60110,c=n?Symbol.for("react.async_mode"):60111,f=n?Symbol.for("react.concurrent_mode"):60111,d=n?Symbol.for("react.forward_ref"):60112,p=n?Symbol.for("react.suspense"):60113,h=n?Symbol.for("react.suspense_list"):60120,m=n?Symbol.for("react.memo"):60115,v=n?Symbol.for("react.lazy"):60116,y=n?Symbol.for("react.block"):60121,g=n?Symbol.for("react.fundamental"):60117,b=n?Symbol.for("react.responder"):60118,w=n?Symbol.for("react.scope"):60119;function _(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case c:case f:case i:case l:case a:case p:return e;default:switch(e=e&&e.$$typeof){case s:case d:case v:case m:case u:return e;default:return t}}case o:return t}}}function x(e){return _(e)===f}t.AsyncMode=c,t.ConcurrentMode=f,t.ContextConsumer=s,t.ContextProvider=u,t.Element=r,t.ForwardRef=d,t.Fragment=i,t.Lazy=v,t.Memo=m,t.Portal=o,t.Profiler=l,t.StrictMode=a,t.Suspense=p,t.isAsyncMode=function(e){return x(e)||_(e)===c},t.isConcurrentMode=x,t.isContextConsumer=function(e){return _(e)===s},t.isContextProvider=function(e){return _(e)===u},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},t.isForwardRef=function(e){return _(e)===d},t.isFragment=function(e){return _(e)===i},t.isLazy=function(e){return _(e)===v},t.isMemo=function(e){return _(e)===m},t.isPortal=function(e){return _(e)===o},t.isProfiler=function(e){return _(e)===l},t.isStrictMode=function(e){return _(e)===a},t.isSuspense=function(e){return _(e)===p},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===i||e===f||e===l||e===a||e===p||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===v||e.$$typeof===m||e.$$typeof===u||e.$$typeof===s||e.$$typeof===d||e.$$typeof===g||e.$$typeof===b||e.$$typeof===w||e.$$typeof===y)},t.typeOf=_},1296:function(e,t,n){"use strict";e.exports=n(6103)},4448:function(e,t,n){"use strict";var r=n(7294),o=n(3840);function i(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var a=new Set,l={};function u(e,t){s(e,t),s(e+"Capture",t)}function s(e,t){for(l[e]=t,e=0;e<t.length;e++)a.add(t[e])}var c=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),f=Object.prototype.hasOwnProperty,d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p={},h={};function m(e,t,n,r,o,i,a){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=i,this.removeEmptyString=a}var v={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){v[e]=new m(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];v[t]=new m(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){v[e]=new m(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){v[e]=new m(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){v[e]=new m(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){v[e]=new m(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){v[e]=new m(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){v[e]=new m(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){v[e]=new m(e,5,!1,e.toLowerCase(),null,!1,!1)}));var y=/[\-:]([a-z])/g;function g(e){return e[1].toUpperCase()}function b(e,t,n,r){var o=v.hasOwnProperty(t)?v[t]:null;(null!==o?0!==o.type:r||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!f.call(h,e)||!f.call(p,e)&&(d.test(e)?h[e]=!0:(p[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(y,g);v[t]=new m(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(y,g);v[t]=new m(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(y,g);v[t]=new m(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){v[e]=new m(e,1,!1,e.toLowerCase(),null,!1,!1)})),v.xlinkHref=new m("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){v[e]=new m(e,1,!1,e.toLowerCase(),null,!0,!0)}));var w=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,_=Symbol.for("react.element"),x=Symbol.for("react.portal"),S=Symbol.for("react.fragment"),A=Symbol.for("react.strict_mode"),E=Symbol.for("react.profiler"),k=Symbol.for("react.provider"),C=Symbol.for("react.context"),O=Symbol.for("react.forward_ref"),j=Symbol.for("react.suspense"),P=Symbol.for("react.suspense_list"),R=Symbol.for("react.memo"),T=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var N=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var D=Symbol.iterator;function M(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=D&&e[D]||e["@@iterator"])?e:null}var L,U=Object.assign;function F(e){if(void 0===L)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);L=t&&t[1]||""}return"\n"+L+e}var z=!1;function I(e,t){if(!e||z)return"";z=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(t){if(t&&r&&"string"==typeof t.stack){for(var o=t.stack.split("\n"),i=r.stack.split("\n"),a=o.length-1,l=i.length-1;1<=a&&0<=l&&o[a]!==i[l];)l--;for(;1<=a&&0<=l;a--,l--)if(o[a]!==i[l]){if(1!==a||1!==l)do{if(a--,0>--l||o[a]!==i[l]){var u="\n"+o[a].replace(" at new "," at ");return e.displayName&&u.includes("<anonymous>")&&(u=u.replace("<anonymous>",e.displayName)),u}}while(1<=a&&0<=l);break}}}finally{z=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?F(e):""}function B(e){switch(e.tag){case 5:return F(e.type);case 16:return F("Lazy");case 13:return F("Suspense");case 19:return F("SuspenseList");case 0:case 2:case 15:return I(e.type,!1);case 11:return I(e.type.render,!1);case 1:return I(e.type,!0);default:return""}}function V(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case S:return"Fragment";case x:return"Portal";case E:return"Profiler";case A:return"StrictMode";case j:return"Suspense";case P:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case C:return(e.displayName||"Context")+".Consumer";case k:return(e._context.displayName||"Context")+".Provider";case O:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case R:return null!==(t=e.displayName||null)?t:V(e.type)||"Memo";case T:t=e._payload,e=e._init;try{return V(e(t))}catch(e){}}return null}function W(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return V(t);case 8:return t===A?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function H(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function q(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function $(e){e._valueTracker||(e._valueTracker=function(e){var t=q(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function K(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=q(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function Z(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function G(e,t){var n=t.checked;return U({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function Q(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=H(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function Y(e,t){null!=(t=t.checked)&&b(e,"checked",t,!1)}function J(e,t){Y(e,t);var n=H(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,n):t.hasOwnProperty("defaultValue")&&ee(e,t.type,H(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function X(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ee(e,t,n){"number"===t&&Z(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var te=Array.isArray;function ne(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+H(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function re(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(i(91));return U({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function oe(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(i(92));if(te(n)){if(1<n.length)throw Error(i(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:H(n)}}function ie(e,t){var n=H(t.value),r=H(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ae(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function le(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function ue(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?le(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var se,ce,fe=(ce=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((se=se||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=se.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return ce(e,t)}))}:ce);function de(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var pe={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},he=["Webkit","ms","Moz","O"];function me(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||pe.hasOwnProperty(e)&&pe[e]?(""+t).trim():t+"px"}function ve(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=me(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(pe).forEach((function(e){he.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),pe[t]=pe[e]}))}));var ye=U({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ge(e,t){if(t){if(ye[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(i(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(i(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(i(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(i(62))}}function be(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var we=null;function _e(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var xe=null,Se=null,Ae=null;function Ee(e){if(e=wo(e)){if("function"!=typeof xe)throw Error(i(280));var t=e.stateNode;t&&(t=xo(t),xe(e.stateNode,e.type,t))}}function ke(e){Se?Ae?Ae.push(e):Ae=[e]:Se=e}function Ce(){if(Se){var e=Se,t=Ae;if(Ae=Se=null,Ee(e),t)for(e=0;e<t.length;e++)Ee(t[e])}}function Oe(e,t){return e(t)}function je(){}var Pe=!1;function Re(e,t,n){if(Pe)return e(t,n);Pe=!0;try{return Oe(e,t,n)}finally{Pe=!1,(null!==Se||null!==Ae)&&(je(),Ce())}}function Te(e,t){var n=e.stateNode;if(null===n)return null;var r=xo(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(i(231,t,typeof n));return n}var Ne=!1;if(c)try{var De={};Object.defineProperty(De,"passive",{get:function(){Ne=!0}}),window.addEventListener("test",De,De),window.removeEventListener("test",De,De)}catch(ce){Ne=!1}function Me(e,t,n,r,o,i,a,l,u){var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this.onError(e)}}var Le=!1,Ue=null,Fe=!1,ze=null,Ie={onError:function(e){Le=!0,Ue=e}};function Be(e,t,n,r,o,i,a,l,u){Le=!1,Ue=null,Me.apply(Ie,arguments)}function Ve(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function We(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function He(e){if(Ve(e)!==e)throw Error(i(188))}function qe(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ve(e)))throw Error(i(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var a=o.alternate;if(null===a){if(null!==(r=o.return)){n=r;continue}break}if(o.child===a.child){for(a=o.child;a;){if(a===n)return He(o),e;if(a===r)return He(o),t;a=a.sibling}throw Error(i(188))}if(n.return!==r.return)n=o,r=a;else{for(var l=!1,u=o.child;u;){if(u===n){l=!0,n=o,r=a;break}if(u===r){l=!0,r=o,n=a;break}u=u.sibling}if(!l){for(u=a.child;u;){if(u===n){l=!0,n=a,r=o;break}if(u===r){l=!0,r=a,n=o;break}u=u.sibling}if(!l)throw Error(i(189))}}if(n.alternate!==r)throw Error(i(190))}if(3!==n.tag)throw Error(i(188));return n.stateNode.current===n?e:t}(e))?$e(e):null}function $e(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=$e(e);if(null!==t)return t;e=e.sibling}return null}var Ke=o.unstable_scheduleCallback,Ze=o.unstable_cancelCallback,Ge=o.unstable_shouldYield,Qe=o.unstable_requestPaint,Ye=o.unstable_now,Je=o.unstable_getCurrentPriorityLevel,Xe=o.unstable_ImmediatePriority,et=o.unstable_UserBlockingPriority,tt=o.unstable_NormalPriority,nt=o.unstable_LowPriority,rt=o.unstable_IdlePriority,ot=null,it=null,at=Math.clz32?Math.clz32:function(e){return 0===(e>>>=0)?32:31-(lt(e)/ut|0)|0},lt=Math.log,ut=Math.LN2,st=64,ct=4194304;function ft(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function dt(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,o=e.suspendedLanes,i=e.pingedLanes,a=268435455&n;if(0!==a){var l=a&~o;0!==l?r=ft(l):0!=(i&=a)&&(r=ft(i))}else 0!=(a=n&~o)?r=ft(a):0!==i&&(r=ft(i));if(0===r)return 0;if(0!==t&&t!==r&&0==(t&o)&&((o=r&-r)>=(i=t&-t)||16===o&&0!=(4194240&i)))return t;if(0!=(4&r)&&(r|=16&n),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)o=1<<(n=31-at(t)),r|=e[n],t&=~o;return r}function pt(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function ht(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function mt(){var e=st;return 0==(4194240&(st<<=1))&&(st=64),e}function vt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function yt(e,t,n){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-at(t)]=n}function gt(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-at(n),o=1<<r;o&t|e[r]&t&&(e[r]|=t),n&=~o}}var bt=0;function wt(e){return 1<(e&=-e)?4<e?0!=(268435455&e)?16:536870912:4:1}var _t,xt,St,At,Et,kt=!1,Ct=[],Ot=null,jt=null,Pt=null,Rt=new Map,Tt=new Map,Nt=[],Dt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Mt(e,t){switch(e){case"focusin":case"focusout":Ot=null;break;case"dragenter":case"dragleave":jt=null;break;case"mouseover":case"mouseout":Pt=null;break;case"pointerover":case"pointerout":Rt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Tt.delete(t.pointerId)}}function Lt(e,t,n,r,o,i){return null===e||e.nativeEvent!==i?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:i,targetContainers:[o]},null!==t&&null!==(t=wo(t))&&xt(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function Ut(e){var t=bo(e.target);if(null!==t){var n=Ve(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=We(n)))return e.blockedOn=t,void Et(e.priority,(function(){St(n)}))}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Ft(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Gt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=wo(n))&&xt(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);we=r,n.target.dispatchEvent(r),we=null,t.shift()}return!0}function zt(e,t,n){Ft(e)&&n.delete(t)}function It(){kt=!1,null!==Ot&&Ft(Ot)&&(Ot=null),null!==jt&&Ft(jt)&&(jt=null),null!==Pt&&Ft(Pt)&&(Pt=null),Rt.forEach(zt),Tt.forEach(zt)}function Bt(e,t){e.blockedOn===t&&(e.blockedOn=null,kt||(kt=!0,o.unstable_scheduleCallback(o.unstable_NormalPriority,It)))}function Vt(e){function t(t){return Bt(t,e)}if(0<Ct.length){Bt(Ct[0],e);for(var n=1;n<Ct.length;n++){var r=Ct[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==Ot&&Bt(Ot,e),null!==jt&&Bt(jt,e),null!==Pt&&Bt(Pt,e),Rt.forEach(t),Tt.forEach(t),n=0;n<Nt.length;n++)(r=Nt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<Nt.length&&null===(n=Nt[0]).blockedOn;)Ut(n),null===n.blockedOn&&Nt.shift()}var Wt=w.ReactCurrentBatchConfig,Ht=!0;function qt(e,t,n,r){var o=bt,i=Wt.transition;Wt.transition=null;try{bt=1,Kt(e,t,n,r)}finally{bt=o,Wt.transition=i}}function $t(e,t,n,r){var o=bt,i=Wt.transition;Wt.transition=null;try{bt=4,Kt(e,t,n,r)}finally{bt=o,Wt.transition=i}}function Kt(e,t,n,r){if(Ht){var o=Gt(e,t,n,r);if(null===o)Hr(e,t,r,Zt,n),Mt(e,r);else if(function(e,t,n,r,o){switch(t){case"focusin":return Ot=Lt(Ot,e,t,n,r,o),!0;case"dragenter":return jt=Lt(jt,e,t,n,r,o),!0;case"mouseover":return Pt=Lt(Pt,e,t,n,r,o),!0;case"pointerover":var i=o.pointerId;return Rt.set(i,Lt(Rt.get(i)||null,e,t,n,r,o)),!0;case"gotpointercapture":return i=o.pointerId,Tt.set(i,Lt(Tt.get(i)||null,e,t,n,r,o)),!0}return!1}(o,e,t,n,r))r.stopPropagation();else if(Mt(e,r),4&t&&-1<Dt.indexOf(e)){for(;null!==o;){var i=wo(o);if(null!==i&&_t(i),null===(i=Gt(e,t,n,r))&&Hr(e,t,r,Zt,n),i===o)break;o=i}null!==o&&r.stopPropagation()}else Hr(e,t,r,null,n)}}var Zt=null;function Gt(e,t,n,r){if(Zt=null,null!==(e=bo(e=_e(r))))if(null===(t=Ve(e)))e=null;else if(13===(n=t.tag)){if(null!==(e=We(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return Zt=e,null}function Qt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Je()){case Xe:return 1;case et:return 4;case tt:case nt:return 16;case rt:return 536870912;default:return 16}default:return 16}}var Yt=null,Jt=null,Xt=null;function en(){if(Xt)return Xt;var e,t,n=Jt,r=n.length,o="value"in Yt?Yt.value:Yt.textContent,i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return Xt=o.slice(e,1<t?1-t:void 0)}function tn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function nn(){return!0}function rn(){return!1}function on(e){function t(t,n,r,o,i){for(var a in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=o,this.target=i,this.currentTarget=null,e)e.hasOwnProperty(a)&&(t=e[a],this[a]=t?t(o):o[a]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?nn:rn,this.isPropagationStopped=rn,this}return U(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=nn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=nn)},persist:function(){},isPersistent:nn}),t}var an,ln,un,sn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},cn=on(sn),fn=U({},sn,{view:0,detail:0}),dn=on(fn),pn=U({},fn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:En,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==un&&(un&&"mousemove"===e.type?(an=e.screenX-un.screenX,ln=e.screenY-un.screenY):ln=an=0,un=e),an)},movementY:function(e){return"movementY"in e?e.movementY:ln}}),hn=on(pn),mn=on(U({},pn,{dataTransfer:0})),vn=on(U({},fn,{relatedTarget:0})),yn=on(U({},sn,{animationName:0,elapsedTime:0,pseudoElement:0})),gn=U({},sn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),bn=on(gn),wn=on(U({},sn,{data:0})),_n={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},xn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Sn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function An(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Sn[e])&&!!t[e]}function En(){return An}var kn=U({},fn,{key:function(e){if(e.key){var t=_n[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=tn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?xn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:En,charCode:function(e){return"keypress"===e.type?tn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Cn=on(kn),On=on(U({},pn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),jn=on(U({},fn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:En})),Pn=on(U({},sn,{propertyName:0,elapsedTime:0,pseudoElement:0})),Rn=U({},pn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Tn=on(Rn),Nn=[9,13,27,32],Dn=c&&"CompositionEvent"in window,Mn=null;c&&"documentMode"in document&&(Mn=document.documentMode);var Ln=c&&"TextEvent"in window&&!Mn,Un=c&&(!Dn||Mn&&8<Mn&&11>=Mn),Fn=String.fromCharCode(32),zn=!1;function In(e,t){switch(e){case"keyup":return-1!==Nn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Bn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Vn=!1,Wn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Hn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Wn[e.type]:"textarea"===t}function qn(e,t,n,r){ke(r),0<(t=$r(t,"onChange")).length&&(n=new cn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var $n=null,Kn=null;function Zn(e){Fr(e,0)}function Gn(e){if(K(_o(e)))return e}function Qn(e,t){if("change"===e)return t}var Yn=!1;if(c){var Jn;if(c){var Xn="oninput"in document;if(!Xn){var er=document.createElement("div");er.setAttribute("oninput","return;"),Xn="function"==typeof er.oninput}Jn=Xn}else Jn=!1;Yn=Jn&&(!document.documentMode||9<document.documentMode)}function tr(){$n&&($n.detachEvent("onpropertychange",nr),Kn=$n=null)}function nr(e){if("value"===e.propertyName&&Gn(Kn)){var t=[];qn(t,Kn,e,_e(e)),Re(Zn,t)}}function rr(e,t,n){"focusin"===e?(tr(),Kn=n,($n=t).attachEvent("onpropertychange",nr)):"focusout"===e&&tr()}function or(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Gn(Kn)}function ir(e,t){if("click"===e)return Gn(t)}function ar(e,t){if("input"===e||"change"===e)return Gn(t)}var lr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function ur(e,t){if(lr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var o=n[r];if(!f.call(t,o)||!lr(e[o],t[o]))return!1}return!0}function sr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function cr(e,t){var n,r=sr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=sr(r)}}function fr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?fr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function dr(){for(var e=window,t=Z();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=Z((e=t.contentWindow).document)}return t}function pr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function hr(e){var t=dr(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&fr(n.ownerDocument.documentElement,n)){if(null!==r&&pr(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var o=n.textContent.length,i=Math.min(r.start,o);r=void 0===r.end?i:Math.min(r.end,o),!e.extend&&i>r&&(o=r,r=i,i=o),o=cr(n,i);var a=cr(n,r);o&&a&&(1!==e.rangeCount||e.anchorNode!==o.node||e.anchorOffset!==o.offset||e.focusNode!==a.node||e.focusOffset!==a.offset)&&((t=t.createRange()).setStart(o.node,o.offset),e.removeAllRanges(),i>r?(e.addRange(t),e.extend(a.node,a.offset)):(t.setEnd(a.node,a.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var mr=c&&"documentMode"in document&&11>=document.documentMode,vr=null,yr=null,gr=null,br=!1;function wr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;br||null==vr||vr!==Z(r)||(r="selectionStart"in(r=vr)&&pr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},gr&&ur(gr,r)||(gr=r,0<(r=$r(yr,"onSelect")).length&&(t=new cn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=vr)))}function _r(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var xr={animationend:_r("Animation","AnimationEnd"),animationiteration:_r("Animation","AnimationIteration"),animationstart:_r("Animation","AnimationStart"),transitionend:_r("Transition","TransitionEnd")},Sr={},Ar={};function Er(e){if(Sr[e])return Sr[e];if(!xr[e])return e;var t,n=xr[e];for(t in n)if(n.hasOwnProperty(t)&&t in Ar)return Sr[e]=n[t];return e}c&&(Ar=document.createElement("div").style,"AnimationEvent"in window||(delete xr.animationend.animation,delete xr.animationiteration.animation,delete xr.animationstart.animation),"TransitionEvent"in window||delete xr.transitionend.transition);var kr=Er("animationend"),Cr=Er("animationiteration"),Or=Er("animationstart"),jr=Er("transitionend"),Pr=new Map,Rr="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Tr(e,t){Pr.set(e,t),u(t,[e])}for(var Nr=0;Nr<Rr.length;Nr++){var Dr=Rr[Nr];Tr(Dr.toLowerCase(),"on"+(Dr[0].toUpperCase()+Dr.slice(1)))}Tr(kr,"onAnimationEnd"),Tr(Cr,"onAnimationIteration"),Tr(Or,"onAnimationStart"),Tr("dblclick","onDoubleClick"),Tr("focusin","onFocus"),Tr("focusout","onBlur"),Tr(jr,"onTransitionEnd"),s("onMouseEnter",["mouseout","mouseover"]),s("onMouseLeave",["mouseout","mouseover"]),s("onPointerEnter",["pointerout","pointerover"]),s("onPointerLeave",["pointerout","pointerover"]),u("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),u("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),u("onBeforeInput",["compositionend","keypress","textInput","paste"]),u("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Mr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Lr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Mr));function Ur(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,o,a,l,u,s){if(Be.apply(this,arguments),Le){if(!Le)throw Error(i(198));var c=Ue;Le=!1,Ue=null,Fe||(Fe=!0,ze=c)}}(r,t,void 0,e),e.currentTarget=null}function Fr(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var i=void 0;if(t)for(var a=r.length-1;0<=a;a--){var l=r[a],u=l.instance,s=l.currentTarget;if(l=l.listener,u!==i&&o.isPropagationStopped())break e;Ur(o,l,s),i=u}else for(a=0;a<r.length;a++){if(u=(l=r[a]).instance,s=l.currentTarget,l=l.listener,u!==i&&o.isPropagationStopped())break e;Ur(o,l,s),i=u}}}if(Fe)throw e=ze,Fe=!1,ze=null,e}function zr(e,t){var n=t[vo];void 0===n&&(n=t[vo]=new Set);var r=e+"__bubble";n.has(r)||(Wr(t,e,2,!1),n.add(r))}function Ir(e,t,n){var r=0;t&&(r|=4),Wr(n,e,r,t)}var Br="_reactListening"+Math.random().toString(36).slice(2);function Vr(e){if(!e[Br]){e[Br]=!0,a.forEach((function(t){"selectionchange"!==t&&(Lr.has(t)||Ir(t,!1,e),Ir(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[Br]||(t[Br]=!0,Ir("selectionchange",!1,t))}}function Wr(e,t,n,r){switch(Qt(t)){case 1:var o=qt;break;case 4:o=$t;break;default:o=Kt}n=o.bind(null,t,n,e),o=void 0,!Ne||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),r?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function Hr(e,t,n,r,o){var i=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var a=r.tag;if(3===a||4===a){var l=r.stateNode.containerInfo;if(l===o||8===l.nodeType&&l.parentNode===o)break;if(4===a)for(a=r.return;null!==a;){var u=a.tag;if((3===u||4===u)&&((u=a.stateNode.containerInfo)===o||8===u.nodeType&&u.parentNode===o))return;a=a.return}for(;null!==l;){if(null===(a=bo(l)))return;if(5===(u=a.tag)||6===u){r=i=a;continue e}l=l.parentNode}}r=r.return}Re((function(){var r=i,o=_e(n),a=[];e:{var l=Pr.get(e);if(void 0!==l){var u=cn,s=e;switch(e){case"keypress":if(0===tn(n))break e;case"keydown":case"keyup":u=Cn;break;case"focusin":s="focus",u=vn;break;case"focusout":s="blur",u=vn;break;case"beforeblur":case"afterblur":u=vn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=hn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=mn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=jn;break;case kr:case Cr:case Or:u=yn;break;case jr:u=Pn;break;case"scroll":u=dn;break;case"wheel":u=Tn;break;case"copy":case"cut":case"paste":u=bn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=On}var c=0!=(4&t),f=!c&&"scroll"===e,d=c?null!==l?l+"Capture":null:l;c=[];for(var p,h=r;null!==h;){var m=(p=h).stateNode;if(5===p.tag&&null!==m&&(p=m,null!==d&&null!=(m=Te(h,d))&&c.push(qr(h,m,p))),f)break;h=h.return}0<c.length&&(l=new u(l,s,null,n,o),a.push({event:l,listeners:c}))}}if(0==(7&t)){if(u="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||n===we||!(s=n.relatedTarget||n.fromElement)||!bo(s)&&!s[mo])&&(u||l)&&(l=o.window===o?o:(l=o.ownerDocument)?l.defaultView||l.parentWindow:window,u?(u=r,null!==(s=(s=n.relatedTarget||n.toElement)?bo(s):null)&&(s!==(f=Ve(s))||5!==s.tag&&6!==s.tag)&&(s=null)):(u=null,s=r),u!==s)){if(c=hn,m="onMouseLeave",d="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=On,m="onPointerLeave",d="onPointerEnter",h="pointer"),f=null==u?l:_o(u),p=null==s?l:_o(s),(l=new c(m,h+"leave",u,n,o)).target=f,l.relatedTarget=p,m=null,bo(o)===r&&((c=new c(d,h+"enter",s,n,o)).target=p,c.relatedTarget=f,m=c),f=m,u&&s)e:{for(d=s,h=0,p=c=u;p;p=Kr(p))h++;for(p=0,m=d;m;m=Kr(m))p++;for(;0<h-p;)c=Kr(c),h--;for(;0<p-h;)d=Kr(d),p--;for(;h--;){if(c===d||null!==d&&c===d.alternate)break e;c=Kr(c),d=Kr(d)}c=null}else c=null;null!==u&&Zr(a,l,u,c,!1),null!==s&&null!==f&&Zr(a,f,s,c,!0)}if("select"===(u=(l=r?_o(r):window).nodeName&&l.nodeName.toLowerCase())||"input"===u&&"file"===l.type)var v=Qn;else if(Hn(l))if(Yn)v=ar;else{v=or;var y=rr}else(u=l.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===l.type||"radio"===l.type)&&(v=ir);switch(v&&(v=v(e,r))?qn(a,v,n,o):(y&&y(e,l,r),"focusout"===e&&(y=l._wrapperState)&&y.controlled&&"number"===l.type&&ee(l,"number",l.value)),y=r?_o(r):window,e){case"focusin":(Hn(y)||"true"===y.contentEditable)&&(vr=y,yr=r,gr=null);break;case"focusout":gr=yr=vr=null;break;case"mousedown":br=!0;break;case"contextmenu":case"mouseup":case"dragend":br=!1,wr(a,n,o);break;case"selectionchange":if(mr)break;case"keydown":case"keyup":wr(a,n,o)}var g;if(Dn)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Vn?In(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(Un&&"ko"!==n.locale&&(Vn||"onCompositionStart"!==b?"onCompositionEnd"===b&&Vn&&(g=en()):(Jt="value"in(Yt=o)?Yt.value:Yt.textContent,Vn=!0)),0<(y=$r(r,b)).length&&(b=new wn(b,e,null,n,o),a.push({event:b,listeners:y}),(g||null!==(g=Bn(n)))&&(b.data=g))),(g=Ln?function(e,t){switch(e){case"compositionend":return Bn(t);case"keypress":return 32!==t.which?null:(zn=!0,Fn);case"textInput":return(e=t.data)===Fn&&zn?null:e;default:return null}}(e,n):function(e,t){if(Vn)return"compositionend"===e||!Dn&&In(e,t)?(e=en(),Xt=Jt=Yt=null,Vn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Un&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=$r(r,"onBeforeInput")).length&&(o=new wn("onBeforeInput","beforeinput",null,n,o),a.push({event:o,listeners:r}),o.data=g)}Fr(a,t)}))}function qr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function $r(e,t){for(var n=t+"Capture",r=[];null!==e;){var o=e,i=o.stateNode;5===o.tag&&null!==i&&(o=i,null!=(i=Te(e,n))&&r.unshift(qr(e,i,o)),null!=(i=Te(e,t))&&r.push(qr(e,i,o))),e=e.return}return r}function Kr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Zr(e,t,n,r,o){for(var i=t._reactName,a=[];null!==n&&n!==r;){var l=n,u=l.alternate,s=l.stateNode;if(null!==u&&u===r)break;5===l.tag&&null!==s&&(l=s,o?null!=(u=Te(n,i))&&a.unshift(qr(n,u,l)):o||null!=(u=Te(n,i))&&a.push(qr(n,u,l))),n=n.return}0!==a.length&&e.push({event:t,listeners:a})}var Gr=/\r\n?/g,Qr=/\u0000|\uFFFD/g;function Yr(e){return("string"==typeof e?e:""+e).replace(Gr,"\n").replace(Qr,"")}function Jr(e,t,n){if(t=Yr(t),Yr(e)!==t&&n)throw Error(i(425))}function Xr(){}var eo=null,to=null;function no(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var ro="function"==typeof setTimeout?setTimeout:void 0,oo="function"==typeof clearTimeout?clearTimeout:void 0,io="function"==typeof Promise?Promise:void 0,ao="function"==typeof queueMicrotask?queueMicrotask:void 0!==io?function(e){return io.resolve(null).then(e).catch(lo)}:ro;function lo(e){setTimeout((function(){throw e}))}function uo(e,t){var n=t,r=0;do{var o=n.nextSibling;if(e.removeChild(n),o&&8===o.nodeType)if("/$"===(n=o.data)){if(0===r)return e.removeChild(o),void Vt(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=o}while(n);Vt(t)}function so(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function co(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var fo=Math.random().toString(36).slice(2),po="__reactFiber$"+fo,ho="__reactProps$"+fo,mo="__reactContainer$"+fo,vo="__reactEvents$"+fo,yo="__reactListeners$"+fo,go="__reactHandles$"+fo;function bo(e){var t=e[po];if(t)return t;for(var n=e.parentNode;n;){if(t=n[mo]||n[po]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=co(e);null!==e;){if(n=e[po])return n;e=co(e)}return t}n=(e=n).parentNode}return null}function wo(e){return!(e=e[po]||e[mo])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function _o(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(i(33))}function xo(e){return e[ho]||null}var So=[],Ao=-1;function Eo(e){return{current:e}}function ko(e){0>Ao||(e.current=So[Ao],So[Ao]=null,Ao--)}function Co(e,t){Ao++,So[Ao]=e.current,e.current=t}var Oo={},jo=Eo(Oo),Po=Eo(!1),Ro=Oo;function To(e,t){var n=e.type.contextTypes;if(!n)return Oo;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in n)i[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function No(e){return null!=e.childContextTypes}function Do(){ko(Po),ko(jo)}function Mo(e,t,n){if(jo.current!==Oo)throw Error(i(168));Co(jo,t),Co(Po,n)}function Lo(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var o in r=r.getChildContext())if(!(o in t))throw Error(i(108,W(e)||"Unknown",o));return U({},n,r)}function Uo(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||Oo,Ro=jo.current,Co(jo,e),Co(Po,Po.current),!0}function Fo(e,t,n){var r=e.stateNode;if(!r)throw Error(i(169));n?(e=Lo(e,t,Ro),r.__reactInternalMemoizedMergedChildContext=e,ko(Po),ko(jo),Co(jo,e)):ko(Po),Co(Po,n)}var zo=null,Io=!1,Bo=!1;function Vo(e){null===zo?zo=[e]:zo.push(e)}function Wo(){if(!Bo&&null!==zo){Bo=!0;var e=0,t=bt;try{var n=zo;for(bt=1;e<n.length;e++){var r=n[e];do{r=r(!0)}while(null!==r)}zo=null,Io=!1}catch(t){throw null!==zo&&(zo=zo.slice(e+1)),Ke(Xe,Wo),t}finally{bt=t,Bo=!1}}return null}var Ho=[],qo=0,$o=null,Ko=0,Zo=[],Go=0,Qo=null,Yo=1,Jo="";function Xo(e,t){Ho[qo++]=Ko,Ho[qo++]=$o,$o=e,Ko=t}function ei(e,t,n){Zo[Go++]=Yo,Zo[Go++]=Jo,Zo[Go++]=Qo,Qo=e;var r=Yo;e=Jo;var o=32-at(r)-1;r&=~(1<<o),n+=1;var i=32-at(t)+o;if(30<i){var a=o-o%5;i=(r&(1<<a)-1).toString(32),r>>=a,o-=a,Yo=1<<32-at(t)+o|n<<o|r,Jo=i+e}else Yo=1<<i|n<<o|r,Jo=e}function ti(e){null!==e.return&&(Xo(e,1),ei(e,1,0))}function ni(e){for(;e===$o;)$o=Ho[--qo],Ho[qo]=null,Ko=Ho[--qo],Ho[qo]=null;for(;e===Qo;)Qo=Zo[--Go],Zo[Go]=null,Jo=Zo[--Go],Zo[Go]=null,Yo=Zo[--Go],Zo[Go]=null}var ri=null,oi=null,ii=!1,ai=null;function li(e,t){var n=Ts(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)}function ui(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,ri=e,oi=so(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,ri=e,oi=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(n=null!==Qo?{id:Yo,overflow:Jo}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},(n=Ts(18,null,null,0)).stateNode=t,n.return=e,e.child=n,ri=e,oi=null,!0);default:return!1}}function si(e){return 0!=(1&e.mode)&&0==(128&e.flags)}function ci(e){if(ii){var t=oi;if(t){var n=t;if(!ui(e,t)){if(si(e))throw Error(i(418));t=so(n.nextSibling);var r=ri;t&&ui(e,t)?li(r,n):(e.flags=-4097&e.flags|2,ii=!1,ri=e)}}else{if(si(e))throw Error(i(418));e.flags=-4097&e.flags|2,ii=!1,ri=e}}}function fi(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;ri=e}function di(e){if(e!==ri)return!1;if(!ii)return fi(e),ii=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!no(e.type,e.memoizedProps)),t&&(t=oi)){if(si(e))throw pi(),Error(i(418));for(;t;)li(e,t),t=so(t.nextSibling)}if(fi(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(i(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){oi=so(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}oi=null}}else oi=ri?so(e.stateNode.nextSibling):null;return!0}function pi(){for(var e=oi;e;)e=so(e.nextSibling)}function hi(){oi=ri=null,ii=!1}function mi(e){null===ai?ai=[e]:ai.push(e)}var vi=w.ReactCurrentBatchConfig;function yi(e,t){if(e&&e.defaultProps){for(var n in t=U({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var gi=Eo(null),bi=null,wi=null,_i=null;function xi(){_i=wi=bi=null}function Si(e){var t=gi.current;ko(gi),e._currentValue=t}function Ai(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function Ei(e,t){bi=e,_i=wi=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(wl=!0),e.firstContext=null)}function ki(e){var t=e._currentValue;if(_i!==e)if(e={context:e,memoizedValue:t,next:null},null===wi){if(null===bi)throw Error(i(308));wi=e,bi.dependencies={lanes:0,firstContext:e}}else wi=wi.next=e;return t}var Ci=null;function Oi(e){null===Ci?Ci=[e]:Ci.push(e)}function ji(e,t,n,r){var o=t.interleaved;return null===o?(n.next=n,Oi(t)):(n.next=o.next,o.next=n),t.interleaved=n,Pi(e,r)}function Pi(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}var Ri=!1;function Ti(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Ni(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Di(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function Mi(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,0!=(2&ju)){var o=r.pending;return null===o?t.next=t:(t.next=o.next,o.next=t),r.pending=t,Pi(e,n)}return null===(o=r.interleaved)?(t.next=t,Oi(r)):(t.next=o.next,o.next=t),r.interleaved=t,Pi(e,n)}function Li(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,0!=(4194240&n))){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,gt(e,n)}}function Ui(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var o=null,i=null;if(null!==(n=n.firstBaseUpdate)){do{var a={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===i?o=i=a:i=i.next=a,n=n.next}while(null!==n);null===i?o=i=t:i=i.next=t}else o=i=t;return n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:i,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function Fi(e,t,n,r){var o=e.updateQueue;Ri=!1;var i=o.firstBaseUpdate,a=o.lastBaseUpdate,l=o.shared.pending;if(null!==l){o.shared.pending=null;var u=l,s=u.next;u.next=null,null===a?i=s:a.next=s,a=u;var c=e.alternate;null!==c&&(l=(c=c.updateQueue).lastBaseUpdate)!==a&&(null===l?c.firstBaseUpdate=s:l.next=s,c.lastBaseUpdate=u)}if(null!==i){var f=o.baseState;for(a=0,c=s=u=null,l=i;;){var d=l.lane,p=l.eventTime;if((r&d)===d){null!==c&&(c=c.next={eventTime:p,lane:0,tag:l.tag,payload:l.payload,callback:l.callback,next:null});e:{var h=e,m=l;switch(d=t,p=n,m.tag){case 1:if("function"==typeof(h=m.payload)){f=h.call(p,f,d);break e}f=h;break e;case 3:h.flags=-65537&h.flags|128;case 0:if(null==(d="function"==typeof(h=m.payload)?h.call(p,f,d):h))break e;f=U({},f,d);break e;case 2:Ri=!0}}null!==l.callback&&0!==l.lane&&(e.flags|=64,null===(d=o.effects)?o.effects=[l]:d.push(l))}else p={eventTime:p,lane:d,tag:l.tag,payload:l.payload,callback:l.callback,next:null},null===c?(s=c=p,u=f):c=c.next=p,a|=d;if(null===(l=l.next)){if(null===(l=o.shared.pending))break;l=(d=l).next,d.next=null,o.lastBaseUpdate=d,o.shared.pending=null}}if(null===c&&(u=f),o.baseState=u,o.firstBaseUpdate=s,o.lastBaseUpdate=c,null!==(t=o.shared.interleaved)){o=t;do{a|=o.lane,o=o.next}while(o!==t)}else null===i&&(o.shared.lanes=0);Uu|=a,e.lanes=a,e.memoizedState=f}}function zi(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=n,"function"!=typeof o)throw Error(i(191,o));o.call(r)}}}var Ii=(new r.Component).refs;function Bi(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:U({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var Vi={isMounted:function(e){return!!(e=e._reactInternals)&&Ve(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=ts(),o=ns(e),i=Di(r,o);i.payload=t,null!=n&&(i.callback=n),null!==(t=Mi(e,i,o))&&(rs(t,e,o,r),Li(t,e,o))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=ts(),o=ns(e),i=Di(r,o);i.tag=1,i.payload=t,null!=n&&(i.callback=n),null!==(t=Mi(e,i,o))&&(rs(t,e,o,r),Li(t,e,o))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=ts(),r=ns(e),o=Di(n,r);o.tag=2,null!=t&&(o.callback=t),null!==(t=Mi(e,o,r))&&(rs(t,e,r,n),Li(t,e,r))}};function Wi(e,t,n,r,o,i,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,a):!(t.prototype&&t.prototype.isPureReactComponent&&ur(n,r)&&ur(o,i))}function Hi(e,t,n){var r=!1,o=Oo,i=t.contextType;return"object"==typeof i&&null!==i?i=ki(i):(o=No(t)?Ro:jo.current,i=(r=null!=(r=t.contextTypes))?To(e,o):Oo),t=new t(n,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=Vi,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=i),t}function qi(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&Vi.enqueueReplaceState(t,t.state,null)}function $i(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=Ii,Ti(e);var i=t.contextType;"object"==typeof i&&null!==i?o.context=ki(i):(i=No(t)?Ro:jo.current,o.context=To(e,i)),o.state=e.memoizedState,"function"==typeof(i=t.getDerivedStateFromProps)&&(Bi(e,t,i,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&Vi.enqueueReplaceState(o,o.state,null),Fi(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.flags|=4194308)}function Ki(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(i(309));var r=n.stateNode}if(!r)throw Error(i(147,e));var o=r,a=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===a?t.ref:(t=function(e){var t=o.refs;t===Ii&&(t=o.refs={}),null===e?delete t[a]:t[a]=e},t._stringRef=a,t)}if("string"!=typeof e)throw Error(i(284));if(!n._owner)throw Error(i(290,e))}return e}function Zi(e,t){throw e=Object.prototype.toString.call(t),Error(i(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function Gi(e){return(0,e._init)(e._payload)}function Qi(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=Ds(e,t)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=2,n):r:(t.flags|=2,n):(t.flags|=1048576,n)}function l(t){return e&&null===t.alternate&&(t.flags|=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=Fs(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function s(e,t,n,r){var i=n.type;return i===S?f(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===i||"object"==typeof i&&null!==i&&i.$$typeof===T&&Gi(i)===t.type)?((r=o(t,n.props)).ref=Ki(e,t,n),r.return=e,r):((r=Ms(n.type,n.key,n.props,null,e.mode,r)).ref=Ki(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=zs(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,i){return null===t||7!==t.tag?((t=Ls(n,e.mode,r,i)).return=e,t):((t=o(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=Fs(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case _:return(n=Ms(t.type,t.key,t.props,null,e.mode,n)).ref=Ki(e,null,t),n.return=e,n;case x:return(t=zs(t,e.mode,n)).return=e,t;case T:return d(e,(0,t._init)(t._payload),n)}if(te(t)||M(t))return(t=Ls(t,e.mode,n,null)).return=e,t;Zi(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==o?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case _:return n.key===o?s(e,t,n,r):null;case x:return n.key===o?c(e,t,n,r):null;case T:return p(e,t,(o=n._init)(n._payload),r)}if(te(n)||M(n))return null!==o?null:f(e,t,n,r,null);Zi(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r&&""!==r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case _:return s(t,e=e.get(null===r.key?n:r.key)||null,r,o);case x:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o);case T:return h(e,t,n,(0,r._init)(r._payload),o)}if(te(r)||M(r))return f(t,e=e.get(n)||null,r,o,null);Zi(t,r)}return null}function m(o,i,l,u){for(var s=null,c=null,f=i,m=i=0,v=null;null!==f&&m<l.length;m++){f.index>m?(v=f,f=null):v=f.sibling;var y=p(o,f,l[m],u);if(null===y){null===f&&(f=v);break}e&&f&&null===y.alternate&&t(o,f),i=a(y,i,m),null===c?s=y:c.sibling=y,c=y,f=v}if(m===l.length)return n(o,f),ii&&Xo(o,m),s;if(null===f){for(;m<l.length;m++)null!==(f=d(o,l[m],u))&&(i=a(f,i,m),null===c?s=f:c.sibling=f,c=f);return ii&&Xo(o,m),s}for(f=r(o,f);m<l.length;m++)null!==(v=h(f,o,m,l[m],u))&&(e&&null!==v.alternate&&f.delete(null===v.key?m:v.key),i=a(v,i,m),null===c?s=v:c.sibling=v,c=v);return e&&f.forEach((function(e){return t(o,e)})),ii&&Xo(o,m),s}function v(o,l,u,s){var c=M(u);if("function"!=typeof c)throw Error(i(150));if(null==(u=c.call(u)))throw Error(i(151));for(var f=c=null,m=l,v=l=0,y=null,g=u.next();null!==m&&!g.done;v++,g=u.next()){m.index>v?(y=m,m=null):y=m.sibling;var b=p(o,m,g.value,s);if(null===b){null===m&&(m=y);break}e&&m&&null===b.alternate&&t(o,m),l=a(b,l,v),null===f?c=b:f.sibling=b,f=b,m=y}if(g.done)return n(o,m),ii&&Xo(o,v),c;if(null===m){for(;!g.done;v++,g=u.next())null!==(g=d(o,g.value,s))&&(l=a(g,l,v),null===f?c=g:f.sibling=g,f=g);return ii&&Xo(o,v),c}for(m=r(o,m);!g.done;v++,g=u.next())null!==(g=h(m,o,v,g.value,s))&&(e&&null!==g.alternate&&m.delete(null===g.key?v:g.key),l=a(g,l,v),null===f?c=g:f.sibling=g,f=g);return e&&m.forEach((function(e){return t(o,e)})),ii&&Xo(o,v),c}return function e(r,i,a,u){if("object"==typeof a&&null!==a&&a.type===S&&null===a.key&&(a=a.props.children),"object"==typeof a&&null!==a){switch(a.$$typeof){case _:e:{for(var s=a.key,c=i;null!==c;){if(c.key===s){if((s=a.type)===S){if(7===c.tag){n(r,c.sibling),(i=o(c,a.props.children)).return=r,r=i;break e}}else if(c.elementType===s||"object"==typeof s&&null!==s&&s.$$typeof===T&&Gi(s)===c.type){n(r,c.sibling),(i=o(c,a.props)).ref=Ki(r,c,a),i.return=r,r=i;break e}n(r,c);break}t(r,c),c=c.sibling}a.type===S?((i=Ls(a.props.children,r.mode,u,a.key)).return=r,r=i):((u=Ms(a.type,a.key,a.props,null,r.mode,u)).ref=Ki(r,i,a),u.return=r,r=u)}return l(r);case x:e:{for(c=a.key;null!==i;){if(i.key===c){if(4===i.tag&&i.stateNode.containerInfo===a.containerInfo&&i.stateNode.implementation===a.implementation){n(r,i.sibling),(i=o(i,a.children||[])).return=r,r=i;break e}n(r,i);break}t(r,i),i=i.sibling}(i=zs(a,r.mode,u)).return=r,r=i}return l(r);case T:return e(r,i,(c=a._init)(a._payload),u)}if(te(a))return m(r,i,a,u);if(M(a))return v(r,i,a,u);Zi(r,a)}return"string"==typeof a&&""!==a||"number"==typeof a?(a=""+a,null!==i&&6===i.tag?(n(r,i.sibling),(i=o(i,a)).return=r,r=i):(n(r,i),(i=Fs(a,r.mode,u)).return=r,r=i),l(r)):n(r,i)}}var Yi=Qi(!0),Ji=Qi(!1),Xi={},ea=Eo(Xi),ta=Eo(Xi),na=Eo(Xi);function ra(e){if(e===Xi)throw Error(i(174));return e}function oa(e,t){switch(Co(na,t),Co(ta,e),Co(ea,Xi),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:ue(null,"");break;default:t=ue(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}ko(ea),Co(ea,t)}function ia(){ko(ea),ko(ta),ko(na)}function aa(e){ra(na.current);var t=ra(ea.current),n=ue(t,e.type);t!==n&&(Co(ta,e),Co(ea,n))}function la(e){ta.current===e&&(ko(ea),ko(ta))}var ua=Eo(0);function sa(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(128&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var ca=[];function fa(){for(var e=0;e<ca.length;e++)ca[e]._workInProgressVersionPrimary=null;ca.length=0}var da=w.ReactCurrentDispatcher,pa=w.ReactCurrentBatchConfig,ha=0,ma=null,va=null,ya=null,ga=!1,ba=!1,wa=0,_a=0;function xa(){throw Error(i(321))}function Sa(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!lr(e[n],t[n]))return!1;return!0}function Aa(e,t,n,r,o,a){if(ha=a,ma=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,da.current=null===e||null===e.memoizedState?ll:ul,e=n(r,o),ba){a=0;do{if(ba=!1,wa=0,25<=a)throw Error(i(301));a+=1,ya=va=null,t.updateQueue=null,da.current=sl,e=n(r,o)}while(ba)}if(da.current=al,t=null!==va&&null!==va.next,ha=0,ya=va=ma=null,ga=!1,t)throw Error(i(300));return e}function Ea(){var e=0!==wa;return wa=0,e}function ka(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===ya?ma.memoizedState=ya=e:ya=ya.next=e,ya}function Ca(){if(null===va){var e=ma.alternate;e=null!==e?e.memoizedState:null}else e=va.next;var t=null===ya?ma.memoizedState:ya.next;if(null!==t)ya=t,va=e;else{if(null===e)throw Error(i(310));e={memoizedState:(va=e).memoizedState,baseState:va.baseState,baseQueue:va.baseQueue,queue:va.queue,next:null},null===ya?ma.memoizedState=ya=e:ya=ya.next=e}return ya}function Oa(e,t){return"function"==typeof t?t(e):t}function ja(e){var t=Ca(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=va,o=r.baseQueue,a=n.pending;if(null!==a){if(null!==o){var l=o.next;o.next=a.next,a.next=l}r.baseQueue=o=a,n.pending=null}if(null!==o){a=o.next,r=r.baseState;var u=l=null,s=null,c=a;do{var f=c.lane;if((ha&f)===f)null!==s&&(s=s.next={lane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),r=c.hasEagerState?c.eagerState:e(r,c.action);else{var d={lane:f,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null};null===s?(u=s=d,l=r):s=s.next=d,ma.lanes|=f,Uu|=f}c=c.next}while(null!==c&&c!==a);null===s?l=r:s.next=u,lr(r,t.memoizedState)||(wl=!0),t.memoizedState=r,t.baseState=l,t.baseQueue=s,n.lastRenderedState=r}if(null!==(e=n.interleaved)){o=e;do{a=o.lane,ma.lanes|=a,Uu|=a,o=o.next}while(o!==e)}else null===o&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function Pa(e){var t=Ca(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,a=t.memoizedState;if(null!==o){n.pending=null;var l=o=o.next;do{a=e(a,l.action),l=l.next}while(l!==o);lr(a,t.memoizedState)||(wl=!0),t.memoizedState=a,null===t.baseQueue&&(t.baseState=a),n.lastRenderedState=a}return[a,r]}function Ra(){}function Ta(e,t){var n=ma,r=Ca(),o=t(),a=!lr(r.memoizedState,o);if(a&&(r.memoizedState=o,wl=!0),r=r.queue,Ha(Ma.bind(null,n,r,e),[e]),r.getSnapshot!==t||a||null!==ya&&1&ya.memoizedState.tag){if(n.flags|=2048,za(9,Da.bind(null,n,r,o,t),void 0,null),null===Pu)throw Error(i(349));0!=(30&ha)||Na(n,t,o)}return o}function Na(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=ma.updateQueue)?(t={lastEffect:null,stores:null},ma.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function Da(e,t,n,r){t.value=n,t.getSnapshot=r,La(t)&&Ua(e)}function Ma(e,t,n){return n((function(){La(t)&&Ua(e)}))}function La(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!lr(e,n)}catch(e){return!0}}function Ua(e){var t=Pi(e,1);null!==t&&rs(t,e,1,-1)}function Fa(e){var t=ka();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:Oa,lastRenderedState:e},t.queue=e,e=e.dispatch=nl.bind(null,ma,e),[t.memoizedState,e]}function za(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=ma.updateQueue)?(t={lastEffect:null,stores:null},ma.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function Ia(){return Ca().memoizedState}function Ba(e,t,n,r){var o=ka();ma.flags|=e,o.memoizedState=za(1|t,n,void 0,void 0===r?null:r)}function Va(e,t,n,r){var o=Ca();r=void 0===r?null:r;var i=void 0;if(null!==va){var a=va.memoizedState;if(i=a.destroy,null!==r&&Sa(r,a.deps))return void(o.memoizedState=za(t,n,i,r))}ma.flags|=e,o.memoizedState=za(1|t,n,i,r)}function Wa(e,t){return Ba(8390656,8,e,t)}function Ha(e,t){return Va(2048,8,e,t)}function qa(e,t){return Va(4,2,e,t)}function $a(e,t){return Va(4,4,e,t)}function Ka(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Za(e,t,n){return n=null!=n?n.concat([e]):null,Va(4,4,Ka.bind(null,t,e),n)}function Ga(){}function Qa(e,t){var n=Ca();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Sa(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Ya(e,t){var n=Ca();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Sa(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Ja(e,t,n){return 0==(21&ha)?(e.baseState&&(e.baseState=!1,wl=!0),e.memoizedState=n):(lr(n,t)||(n=mt(),ma.lanes|=n,Uu|=n,e.baseState=!0),t)}function Xa(e,t){var n=bt;bt=0!==n&&4>n?n:4,e(!0);var r=pa.transition;pa.transition={};try{e(!1),t()}finally{bt=n,pa.transition=r}}function el(){return Ca().memoizedState}function tl(e,t,n){var r=ns(e);n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},rl(e)?ol(t,n):null!==(n=ji(e,t,n,r))&&(rs(n,e,r,ts()),il(n,t,r))}function nl(e,t,n){var r=ns(e),o={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(rl(e))ol(t,o);else{var i=e.alternate;if(0===e.lanes&&(null===i||0===i.lanes)&&null!==(i=t.lastRenderedReducer))try{var a=t.lastRenderedState,l=i(a,n);if(o.hasEagerState=!0,o.eagerState=l,lr(l,a)){var u=t.interleaved;return null===u?(o.next=o,Oi(t)):(o.next=u.next,u.next=o),void(t.interleaved=o)}}catch(e){}null!==(n=ji(e,t,o,r))&&(rs(n,e,r,o=ts()),il(n,t,r))}}function rl(e){var t=e.alternate;return e===ma||null!==t&&t===ma}function ol(e,t){ba=ga=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function il(e,t,n){if(0!=(4194240&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,gt(e,n)}}var al={readContext:ki,useCallback:xa,useContext:xa,useEffect:xa,useImperativeHandle:xa,useInsertionEffect:xa,useLayoutEffect:xa,useMemo:xa,useReducer:xa,useRef:xa,useState:xa,useDebugValue:xa,useDeferredValue:xa,useTransition:xa,useMutableSource:xa,useSyncExternalStore:xa,useId:xa,unstable_isNewReconciler:!1},ll={readContext:ki,useCallback:function(e,t){return ka().memoizedState=[e,void 0===t?null:t],e},useContext:ki,useEffect:Wa,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,Ba(4194308,4,Ka.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Ba(4194308,4,e,t)},useInsertionEffect:function(e,t){return Ba(4,2,e,t)},useMemo:function(e,t){var n=ka();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=ka();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=tl.bind(null,ma,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},ka().memoizedState=e},useState:Fa,useDebugValue:Ga,useDeferredValue:function(e){return ka().memoizedState=e},useTransition:function(){var e=Fa(!1),t=e[0];return e=Xa.bind(null,e[1]),ka().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=ma,o=ka();if(ii){if(void 0===n)throw Error(i(407));n=n()}else{if(n=t(),null===Pu)throw Error(i(349));0!=(30&ha)||Na(r,t,n)}o.memoizedState=n;var a={value:n,getSnapshot:t};return o.queue=a,Wa(Ma.bind(null,r,a,e),[e]),r.flags|=2048,za(9,Da.bind(null,r,a,n,t),void 0,null),n},useId:function(){var e=ka(),t=Pu.identifierPrefix;if(ii){var n=Jo;t=":"+t+"R"+(n=(Yo&~(1<<32-at(Yo)-1)).toString(32)+n),0<(n=wa++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=_a++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},ul={readContext:ki,useCallback:Qa,useContext:ki,useEffect:Ha,useImperativeHandle:Za,useInsertionEffect:qa,useLayoutEffect:$a,useMemo:Ya,useReducer:ja,useRef:Ia,useState:function(){return ja(Oa)},useDebugValue:Ga,useDeferredValue:function(e){return Ja(Ca(),va.memoizedState,e)},useTransition:function(){return[ja(Oa)[0],Ca().memoizedState]},useMutableSource:Ra,useSyncExternalStore:Ta,useId:el,unstable_isNewReconciler:!1},sl={readContext:ki,useCallback:Qa,useContext:ki,useEffect:Ha,useImperativeHandle:Za,useInsertionEffect:qa,useLayoutEffect:$a,useMemo:Ya,useReducer:Pa,useRef:Ia,useState:function(){return Pa(Oa)},useDebugValue:Ga,useDeferredValue:function(e){var t=Ca();return null===va?t.memoizedState=e:Ja(t,va.memoizedState,e)},useTransition:function(){return[Pa(Oa)[0],Ca().memoizedState]},useMutableSource:Ra,useSyncExternalStore:Ta,useId:el,unstable_isNewReconciler:!1};function cl(e,t){try{var n="",r=t;do{n+=B(r),r=r.return}while(r);var o=n}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:o,digest:null}}function fl(e,t,n){return{value:e,source:null,stack:null!=n?n:null,digest:null!=t?t:null}}function dl(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var pl="function"==typeof WeakMap?WeakMap:Map;function hl(e,t,n){(n=Di(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){qu||(qu=!0,$u=r),dl(0,t)},n}function ml(e,t,n){(n=Di(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return r(o)},n.callback=function(){dl(0,t)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){dl(0,t),"function"!=typeof r&&(null===Ku?Ku=new Set([this]):Ku.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}function vl(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new pl;var o=new Set;r.set(t,o)}else void 0===(o=r.get(t))&&(o=new Set,r.set(t,o));o.has(n)||(o.add(n),e=ks.bind(null,e,t,n),t.then(e,e))}function yl(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function gl(e,t,n,r,o){return 0==(1&e.mode)?(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((t=Di(-1,1)).tag=2,Mi(n,t,1))),n.lanes|=1),e):(e.flags|=65536,e.lanes=o,e)}var bl=w.ReactCurrentOwner,wl=!1;function _l(e,t,n,r){t.child=null===e?Ji(t,null,n,r):Yi(t,e.child,n,r)}function xl(e,t,n,r,o){n=n.render;var i=t.ref;return Ei(t,o),r=Aa(e,t,n,r,i,o),n=Ea(),null===e||wl?(ii&&n&&ti(t),t.flags|=1,_l(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,ql(e,t,o))}function Sl(e,t,n,r,o){if(null===e){var i=n.type;return"function"!=typeof i||Ns(i)||void 0!==i.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Ms(n.type,null,r,t,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=i,Al(e,t,i,r,o))}if(i=e.child,0==(e.lanes&o)){var a=i.memoizedProps;if((n=null!==(n=n.compare)?n:ur)(a,r)&&e.ref===t.ref)return ql(e,t,o)}return t.flags|=1,(e=Ds(i,r)).ref=t.ref,e.return=t,t.child=e}function Al(e,t,n,r,o){if(null!==e){var i=e.memoizedProps;if(ur(i,r)&&e.ref===t.ref){if(wl=!1,t.pendingProps=r=i,0==(e.lanes&o))return t.lanes=e.lanes,ql(e,t,o);0!=(131072&e.flags)&&(wl=!0)}}return Cl(e,t,n,r,o)}function El(e,t,n){var r=t.pendingProps,o=r.children,i=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(0==(1&t.mode))t.memoizedState={baseLanes:0,cachePool:null,transitions:null},Co(Du,Nu),Nu|=n;else{if(0==(1073741824&n))return e=null!==i?i.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,Co(Du,Nu),Nu|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==i?i.baseLanes:n,Co(Du,Nu),Nu|=r}else null!==i?(r=i.baseLanes|n,t.memoizedState=null):r=n,Co(Du,Nu),Nu|=r;return _l(e,t,o,n),t.child}function kl(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function Cl(e,t,n,r,o){var i=No(n)?Ro:jo.current;return i=To(t,i),Ei(t,o),n=Aa(e,t,n,r,i,o),r=Ea(),null===e||wl?(ii&&r&&ti(t),t.flags|=1,_l(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,ql(e,t,o))}function Ol(e,t,n,r,o){if(No(n)){var i=!0;Uo(t)}else i=!1;if(Ei(t,o),null===t.stateNode)Hl(e,t),Hi(t,n,r),$i(t,n,r,o),r=!0;else if(null===e){var a=t.stateNode,l=t.memoizedProps;a.props=l;var u=a.context,s=n.contextType;s="object"==typeof s&&null!==s?ki(s):To(t,s=No(n)?Ro:jo.current);var c=n.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof a.getSnapshotBeforeUpdate;f||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(l!==r||u!==s)&&qi(t,a,r,s),Ri=!1;var d=t.memoizedState;a.state=d,Fi(t,r,a,o),u=t.memoizedState,l!==r||d!==u||Po.current||Ri?("function"==typeof c&&(Bi(t,n,c,r),u=t.memoizedState),(l=Ri||Wi(t,n,l,r,d,u,s))?(f||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.flags|=4194308)):("function"==typeof a.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=u),a.props=r,a.state=u,a.context=s,r=l):("function"==typeof a.componentDidMount&&(t.flags|=4194308),r=!1)}else{a=t.stateNode,Ni(e,t),l=t.memoizedProps,s=t.type===t.elementType?l:yi(t.type,l),a.props=s,f=t.pendingProps,d=a.context,u="object"==typeof(u=n.contextType)&&null!==u?ki(u):To(t,u=No(n)?Ro:jo.current);var p=n.getDerivedStateFromProps;(c="function"==typeof p||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(l!==f||d!==u)&&qi(t,a,r,u),Ri=!1,d=t.memoizedState,a.state=d,Fi(t,r,a,o);var h=t.memoizedState;l!==f||d!==h||Po.current||Ri?("function"==typeof p&&(Bi(t,n,p,r),h=t.memoizedState),(s=Ri||Wi(t,n,s,r,d,h,u)||!1)?(c||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,h,u),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,h,u)),"function"==typeof a.componentDidUpdate&&(t.flags|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof a.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=h),a.props=r,a.state=h,a.context=u,r=s):("function"!=typeof a.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),r=!1)}return jl(e,t,n,r,i,o)}function jl(e,t,n,r,o,i){kl(e,t);var a=0!=(128&t.flags);if(!r&&!a)return o&&Fo(t,n,!1),ql(e,t,i);r=t.stateNode,bl.current=t;var l=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&a?(t.child=Yi(t,e.child,null,i),t.child=Yi(t,null,l,i)):_l(e,t,l,i),t.memoizedState=r.state,o&&Fo(t,n,!0),t.child}function Pl(e){var t=e.stateNode;t.pendingContext?Mo(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Mo(0,t.context,!1),oa(e,t.containerInfo)}function Rl(e,t,n,r,o){return hi(),mi(o),t.flags|=256,_l(e,t,n,r),t.child}var Tl,Nl,Dl,Ml,Ll={dehydrated:null,treeContext:null,retryLane:0};function Ul(e){return{baseLanes:e,cachePool:null,transitions:null}}function Fl(e,t,n){var r,o=t.pendingProps,a=ua.current,l=!1,u=0!=(128&t.flags);if((r=u)||(r=(null===e||null!==e.memoizedState)&&0!=(2&a)),r?(l=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(a|=1),Co(ua,1&a),null===e)return ci(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(0==(1&t.mode)?t.lanes=1:"$!"===e.data?t.lanes=8:t.lanes=1073741824,null):(u=o.children,e=o.fallback,l?(o=t.mode,l=t.child,u={mode:"hidden",children:u},0==(1&o)&&null!==l?(l.childLanes=0,l.pendingProps=u):l=Us(u,o,0,null),e=Ls(e,o,n,null),l.return=t,e.return=t,l.sibling=e,t.child=l,t.child.memoizedState=Ul(n),t.memoizedState=Ll,e):zl(t,u));if(null!==(a=e.memoizedState)&&null!==(r=a.dehydrated))return function(e,t,n,r,o,a,l){if(n)return 256&t.flags?(t.flags&=-257,Il(e,t,l,r=fl(Error(i(422))))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(a=r.fallback,o=t.mode,r=Us({mode:"visible",children:r.children},o,0,null),(a=Ls(a,o,l,null)).flags|=2,r.return=t,a.return=t,r.sibling=a,t.child=r,0!=(1&t.mode)&&Yi(t,e.child,null,l),t.child.memoizedState=Ul(l),t.memoizedState=Ll,a);if(0==(1&t.mode))return Il(e,t,l,null);if("$!"===o.data){if(r=o.nextSibling&&o.nextSibling.dataset)var u=r.dgst;return r=u,Il(e,t,l,r=fl(a=Error(i(419)),r,void 0))}if(u=0!=(l&e.childLanes),wl||u){if(null!==(r=Pu)){switch(l&-l){case 4:o=2;break;case 16:o=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:o=32;break;case 536870912:o=268435456;break;default:o=0}0!==(o=0!=(o&(r.suspendedLanes|l))?0:o)&&o!==a.retryLane&&(a.retryLane=o,Pi(e,o),rs(r,e,o,-1))}return vs(),Il(e,t,l,r=fl(Error(i(421))))}return"$?"===o.data?(t.flags|=128,t.child=e.child,t=Os.bind(null,e),o._reactRetry=t,null):(e=a.treeContext,oi=so(o.nextSibling),ri=t,ii=!0,ai=null,null!==e&&(Zo[Go++]=Yo,Zo[Go++]=Jo,Zo[Go++]=Qo,Yo=e.id,Jo=e.overflow,Qo=t),(t=zl(t,r.children)).flags|=4096,t)}(e,t,u,o,r,a,n);if(l){l=o.fallback,u=t.mode,r=(a=e.child).sibling;var s={mode:"hidden",children:o.children};return 0==(1&u)&&t.child!==a?((o=t.child).childLanes=0,o.pendingProps=s,t.deletions=null):(o=Ds(a,s)).subtreeFlags=14680064&a.subtreeFlags,null!==r?l=Ds(r,l):(l=Ls(l,u,n,null)).flags|=2,l.return=t,o.return=t,o.sibling=l,t.child=o,o=l,l=t.child,u=null===(u=e.child.memoizedState)?Ul(n):{baseLanes:u.baseLanes|n,cachePool:null,transitions:u.transitions},l.memoizedState=u,l.childLanes=e.childLanes&~n,t.memoizedState=Ll,o}return e=(l=e.child).sibling,o=Ds(l,{mode:"visible",children:o.children}),0==(1&t.mode)&&(o.lanes=n),o.return=t,o.sibling=null,null!==e&&(null===(n=t.deletions)?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=o,t.memoizedState=null,o}function zl(e,t){return(t=Us({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function Il(e,t,n,r){return null!==r&&mi(r),Yi(t,e.child,null,n),(e=zl(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function Bl(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),Ai(e.return,t,n)}function Vl(e,t,n,r,o){var i=e.memoizedState;null===i?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o}:(i.isBackwards=t,i.rendering=null,i.renderingStartTime=0,i.last=r,i.tail=n,i.tailMode=o)}function Wl(e,t,n){var r=t.pendingProps,o=r.revealOrder,i=r.tail;if(_l(e,t,r.children,n),0!=(2&(r=ua.current)))r=1&r|2,t.flags|=128;else{if(null!==e&&0!=(128&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Bl(e,n,t);else if(19===e.tag)Bl(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(Co(ua,r),0==(1&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===sa(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),Vl(t,!1,o,n,i);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===sa(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}Vl(t,!0,n,null,i);break;case"together":Vl(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function Hl(e,t){0==(1&t.mode)&&null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2)}function ql(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Uu|=t.lanes,0==(n&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(i(153));if(null!==t.child){for(n=Ds(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Ds(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function $l(e,t){if(!ii)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Kl(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var o=e.child;null!==o;)n|=o.lanes|o.childLanes,r|=14680064&o.subtreeFlags,r|=14680064&o.flags,o.return=e,o=o.sibling;else for(o=e.child;null!==o;)n|=o.lanes|o.childLanes,r|=o.subtreeFlags,r|=o.flags,o.return=e,o=o.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function Zl(e,t,n){var r=t.pendingProps;switch(ni(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Kl(t),null;case 1:case 17:return No(t.type)&&Do(),Kl(t),null;case 3:return r=t.stateNode,ia(),ko(Po),ko(jo),fa(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(di(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&0==(256&t.flags)||(t.flags|=1024,null!==ai&&(ls(ai),ai=null))),Nl(e,t),Kl(t),null;case 5:la(t);var o=ra(na.current);if(n=t.type,null!==e&&null!=t.stateNode)Dl(e,t,n,r,o),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(null===t.stateNode)throw Error(i(166));return Kl(t),null}if(e=ra(ea.current),di(t)){r=t.stateNode,n=t.type;var a=t.memoizedProps;switch(r[po]=t,r[ho]=a,e=0!=(1&t.mode),n){case"dialog":zr("cancel",r),zr("close",r);break;case"iframe":case"object":case"embed":zr("load",r);break;case"video":case"audio":for(o=0;o<Mr.length;o++)zr(Mr[o],r);break;case"source":zr("error",r);break;case"img":case"image":case"link":zr("error",r),zr("load",r);break;case"details":zr("toggle",r);break;case"input":Q(r,a),zr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!a.multiple},zr("invalid",r);break;case"textarea":oe(r,a),zr("invalid",r)}for(var u in ge(n,a),o=null,a)if(a.hasOwnProperty(u)){var s=a[u];"children"===u?"string"==typeof s?r.textContent!==s&&(!0!==a.suppressHydrationWarning&&Jr(r.textContent,s,e),o=["children",s]):"number"==typeof s&&r.textContent!==""+s&&(!0!==a.suppressHydrationWarning&&Jr(r.textContent,s,e),o=["children",""+s]):l.hasOwnProperty(u)&&null!=s&&"onScroll"===u&&zr("scroll",r)}switch(n){case"input":$(r),X(r,a,!0);break;case"textarea":$(r),ae(r);break;case"select":case"option":break;default:"function"==typeof a.onClick&&(r.onclick=Xr)}r=o,t.updateQueue=r,null!==r&&(t.flags|=4)}else{u=9===o.nodeType?o:o.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=le(n)),"http://www.w3.org/1999/xhtml"===e?"script"===n?((e=u.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=u.createElement(n,{is:r.is}):(e=u.createElement(n),"select"===n&&(u=e,r.multiple?u.multiple=!0:r.size&&(u.size=r.size))):e=u.createElementNS(e,n),e[po]=t,e[ho]=r,Tl(e,t,!1,!1),t.stateNode=e;e:{switch(u=be(n,r),n){case"dialog":zr("cancel",e),zr("close",e),o=r;break;case"iframe":case"object":case"embed":zr("load",e),o=r;break;case"video":case"audio":for(o=0;o<Mr.length;o++)zr(Mr[o],e);o=r;break;case"source":zr("error",e),o=r;break;case"img":case"image":case"link":zr("error",e),zr("load",e),o=r;break;case"details":zr("toggle",e),o=r;break;case"input":Q(e,r),o=G(e,r),zr("invalid",e);break;case"option":default:o=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},o=U({},r,{value:void 0}),zr("invalid",e);break;case"textarea":oe(e,r),o=re(e,r),zr("invalid",e)}for(a in ge(n,o),s=o)if(s.hasOwnProperty(a)){var c=s[a];"style"===a?ve(e,c):"dangerouslySetInnerHTML"===a?null!=(c=c?c.__html:void 0)&&fe(e,c):"children"===a?"string"==typeof c?("textarea"!==n||""!==c)&&de(e,c):"number"==typeof c&&de(e,""+c):"suppressContentEditableWarning"!==a&&"suppressHydrationWarning"!==a&&"autoFocus"!==a&&(l.hasOwnProperty(a)?null!=c&&"onScroll"===a&&zr("scroll",e):null!=c&&b(e,a,c,u))}switch(n){case"input":$(e),X(e,r,!1);break;case"textarea":$(e),ae(e);break;case"option":null!=r.value&&e.setAttribute("value",""+H(r.value));break;case"select":e.multiple=!!r.multiple,null!=(a=r.value)?ne(e,!!r.multiple,a,!1):null!=r.defaultValue&&ne(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof o.onClick&&(e.onclick=Xr)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return Kl(t),null;case 6:if(e&&null!=t.stateNode)Ml(e,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(i(166));if(n=ra(na.current),ra(ea.current),di(t)){if(r=t.stateNode,n=t.memoizedProps,r[po]=t,(a=r.nodeValue!==n)&&null!==(e=ri))switch(e.tag){case 3:Jr(r.nodeValue,n,0!=(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Jr(r.nodeValue,n,0!=(1&e.mode))}a&&(t.flags|=4)}else(r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[po]=t,t.stateNode=r}return Kl(t),null;case 13:if(ko(ua),r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(ii&&null!==oi&&0!=(1&t.mode)&&0==(128&t.flags))pi(),hi(),t.flags|=98560,a=!1;else if(a=di(t),null!==r&&null!==r.dehydrated){if(null===e){if(!a)throw Error(i(318));if(!(a=null!==(a=t.memoizedState)?a.dehydrated:null))throw Error(i(317));a[po]=t}else hi(),0==(128&t.flags)&&(t.memoizedState=null),t.flags|=4;Kl(t),a=!1}else null!==ai&&(ls(ai),ai=null),a=!0;if(!a)return 65536&t.flags?t:null}return 0!=(128&t.flags)?(t.lanes=n,t):((r=null!==r)!=(null!==e&&null!==e.memoizedState)&&r&&(t.child.flags|=8192,0!=(1&t.mode)&&(null===e||0!=(1&ua.current)?0===Mu&&(Mu=3):vs())),null!==t.updateQueue&&(t.flags|=4),Kl(t),null);case 4:return ia(),Nl(e,t),null===e&&Vr(t.stateNode.containerInfo),Kl(t),null;case 10:return Si(t.type._context),Kl(t),null;case 19:if(ko(ua),null===(a=t.memoizedState))return Kl(t),null;if(r=0!=(128&t.flags),null===(u=a.rendering))if(r)$l(a,!1);else{if(0!==Mu||null!==e&&0!=(128&e.flags))for(e=t.child;null!==e;){if(null!==(u=sa(e))){for(t.flags|=128,$l(a,!1),null!==(r=u.updateQueue)&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;null!==n;)e=r,(a=n).flags&=14680066,null===(u=a.alternate)?(a.childLanes=0,a.lanes=e,a.child=null,a.subtreeFlags=0,a.memoizedProps=null,a.memoizedState=null,a.updateQueue=null,a.dependencies=null,a.stateNode=null):(a.childLanes=u.childLanes,a.lanes=u.lanes,a.child=u.child,a.subtreeFlags=0,a.deletions=null,a.memoizedProps=u.memoizedProps,a.memoizedState=u.memoizedState,a.updateQueue=u.updateQueue,a.type=u.type,e=u.dependencies,a.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return Co(ua,1&ua.current|2),t.child}e=e.sibling}null!==a.tail&&Ye()>Wu&&(t.flags|=128,r=!0,$l(a,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=sa(u))){if(t.flags|=128,r=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),$l(a,!0),null===a.tail&&"hidden"===a.tailMode&&!u.alternate&&!ii)return Kl(t),null}else 2*Ye()-a.renderingStartTime>Wu&&1073741824!==n&&(t.flags|=128,r=!0,$l(a,!1),t.lanes=4194304);a.isBackwards?(u.sibling=t.child,t.child=u):(null!==(n=a.last)?n.sibling=u:t.child=u,a.last=u)}return null!==a.tail?(t=a.tail,a.rendering=t,a.tail=t.sibling,a.renderingStartTime=Ye(),t.sibling=null,n=ua.current,Co(ua,r?1&n|2:1&n),t):(Kl(t),null);case 22:case 23:return ds(),r=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==r&&(t.flags|=8192),r&&0!=(1&t.mode)?0!=(1073741824&Nu)&&(Kl(t),6&t.subtreeFlags&&(t.flags|=8192)):Kl(t),null;case 24:case 25:return null}throw Error(i(156,t.tag))}function Gl(e,t){switch(ni(t),t.tag){case 1:return No(t.type)&&Do(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return ia(),ko(Po),ko(jo),fa(),0!=(65536&(e=t.flags))&&0==(128&e)?(t.flags=-65537&e|128,t):null;case 5:return la(t),null;case 13:if(ko(ua),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(i(340));hi()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return ko(ua),null;case 4:return ia(),null;case 10:return Si(t.type._context),null;case 22:case 23:return ds(),null;default:return null}}Tl=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Nl=function(){},Dl=function(e,t,n,r){var o=e.memoizedProps;if(o!==r){e=t.stateNode,ra(ea.current);var i,a=null;switch(n){case"input":o=G(e,o),r=G(e,r),a=[];break;case"select":o=U({},o,{value:void 0}),r=U({},r,{value:void 0}),a=[];break;case"textarea":o=re(e,o),r=re(e,r),a=[];break;default:"function"!=typeof o.onClick&&"function"==typeof r.onClick&&(e.onclick=Xr)}for(c in ge(n,r),n=null,o)if(!r.hasOwnProperty(c)&&o.hasOwnProperty(c)&&null!=o[c])if("style"===c){var u=o[c];for(i in u)u.hasOwnProperty(i)&&(n||(n={}),n[i]="")}else"dangerouslySetInnerHTML"!==c&&"children"!==c&&"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(l.hasOwnProperty(c)?a||(a=[]):(a=a||[]).push(c,null));for(c in r){var s=r[c];if(u=null!=o?o[c]:void 0,r.hasOwnProperty(c)&&s!==u&&(null!=s||null!=u))if("style"===c)if(u){for(i in u)!u.hasOwnProperty(i)||s&&s.hasOwnProperty(i)||(n||(n={}),n[i]="");for(i in s)s.hasOwnProperty(i)&&u[i]!==s[i]&&(n||(n={}),n[i]=s[i])}else n||(a||(a=[]),a.push(c,n)),n=s;else"dangerouslySetInnerHTML"===c?(s=s?s.__html:void 0,u=u?u.__html:void 0,null!=s&&u!==s&&(a=a||[]).push(c,s)):"children"===c?"string"!=typeof s&&"number"!=typeof s||(a=a||[]).push(c,""+s):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&(l.hasOwnProperty(c)?(null!=s&&"onScroll"===c&&zr("scroll",e),a||u===s||(a=[])):(a=a||[]).push(c,s))}n&&(a=a||[]).push("style",n);var c=a;(t.updateQueue=c)&&(t.flags|=4)}},Ml=function(e,t,n,r){n!==r&&(t.flags|=4)};var Ql=!1,Yl=!1,Jl="function"==typeof WeakSet?WeakSet:Set,Xl=null;function eu(e,t){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){Es(e,t,n)}else n.current=null}function tu(e,t,n){try{n()}catch(n){Es(e,t,n)}}var nu=!1;function ru(e,t,n){var r=t.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var o=r=r.next;do{if((o.tag&e)===e){var i=o.destroy;o.destroy=void 0,void 0!==i&&tu(t,n,i)}o=o.next}while(o!==r)}}function ou(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function iu(e){var t=e.ref;if(null!==t){var n=e.stateNode;e.tag,e=n,"function"==typeof t?t(e):t.current=e}}function au(e){var t=e.alternate;null!==t&&(e.alternate=null,au(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&(delete t[po],delete t[ho],delete t[vo],delete t[yo],delete t[go]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function lu(e){return 5===e.tag||3===e.tag||4===e.tag}function uu(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||lu(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function su(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Xr));else if(4!==r&&null!==(e=e.child))for(su(e,t,n),e=e.sibling;null!==e;)su(e,t,n),e=e.sibling}function cu(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(cu(e,t,n),e=e.sibling;null!==e;)cu(e,t,n),e=e.sibling}var fu=null,du=!1;function pu(e,t,n){for(n=n.child;null!==n;)hu(e,t,n),n=n.sibling}function hu(e,t,n){if(it&&"function"==typeof it.onCommitFiberUnmount)try{it.onCommitFiberUnmount(ot,n)}catch(e){}switch(n.tag){case 5:Yl||eu(n,t);case 6:var r=fu,o=du;fu=null,pu(e,t,n),du=o,null!==(fu=r)&&(du?(e=fu,n=n.stateNode,8===e.nodeType?e.parentNode.removeChild(n):e.removeChild(n)):fu.removeChild(n.stateNode));break;case 18:null!==fu&&(du?(e=fu,n=n.stateNode,8===e.nodeType?uo(e.parentNode,n):1===e.nodeType&&uo(e,n),Vt(e)):uo(fu,n.stateNode));break;case 4:r=fu,o=du,fu=n.stateNode.containerInfo,du=!0,pu(e,t,n),fu=r,du=o;break;case 0:case 11:case 14:case 15:if(!Yl&&null!==(r=n.updateQueue)&&null!==(r=r.lastEffect)){o=r=r.next;do{var i=o,a=i.destroy;i=i.tag,void 0!==a&&(0!=(2&i)||0!=(4&i))&&tu(n,t,a),o=o.next}while(o!==r)}pu(e,t,n);break;case 1:if(!Yl&&(eu(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(e){Es(n,t,e)}pu(e,t,n);break;case 21:pu(e,t,n);break;case 22:1&n.mode?(Yl=(r=Yl)||null!==n.memoizedState,pu(e,t,n),Yl=r):pu(e,t,n);break;default:pu(e,t,n)}}function mu(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Jl),t.forEach((function(t){var r=js.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function vu(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var o=n[r];try{var a=e,l=t,u=l;e:for(;null!==u;){switch(u.tag){case 5:fu=u.stateNode,du=!1;break e;case 3:case 4:fu=u.stateNode.containerInfo,du=!0;break e}u=u.return}if(null===fu)throw Error(i(160));hu(a,l,o),fu=null,du=!1;var s=o.alternate;null!==s&&(s.return=null),o.return=null}catch(e){Es(o,t,e)}}if(12854&t.subtreeFlags)for(t=t.child;null!==t;)yu(t,e),t=t.sibling}function yu(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(vu(t,e),gu(e),4&r){try{ru(3,e,e.return),ou(3,e)}catch(t){Es(e,e.return,t)}try{ru(5,e,e.return)}catch(t){Es(e,e.return,t)}}break;case 1:vu(t,e),gu(e),512&r&&null!==n&&eu(n,n.return);break;case 5:if(vu(t,e),gu(e),512&r&&null!==n&&eu(n,n.return),32&e.flags){var o=e.stateNode;try{de(o,"")}catch(t){Es(e,e.return,t)}}if(4&r&&null!=(o=e.stateNode)){var a=e.memoizedProps,l=null!==n?n.memoizedProps:a,u=e.type,s=e.updateQueue;if(e.updateQueue=null,null!==s)try{"input"===u&&"radio"===a.type&&null!=a.name&&Y(o,a),be(u,l);var c=be(u,a);for(l=0;l<s.length;l+=2){var f=s[l],d=s[l+1];"style"===f?ve(o,d):"dangerouslySetInnerHTML"===f?fe(o,d):"children"===f?de(o,d):b(o,f,d,c)}switch(u){case"input":J(o,a);break;case"textarea":ie(o,a);break;case"select":var p=o._wrapperState.wasMultiple;o._wrapperState.wasMultiple=!!a.multiple;var h=a.value;null!=h?ne(o,!!a.multiple,h,!1):p!==!!a.multiple&&(null!=a.defaultValue?ne(o,!!a.multiple,a.defaultValue,!0):ne(o,!!a.multiple,a.multiple?[]:"",!1))}o[ho]=a}catch(t){Es(e,e.return,t)}}break;case 6:if(vu(t,e),gu(e),4&r){if(null===e.stateNode)throw Error(i(162));o=e.stateNode,a=e.memoizedProps;try{o.nodeValue=a}catch(t){Es(e,e.return,t)}}break;case 3:if(vu(t,e),gu(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{Vt(t.containerInfo)}catch(t){Es(e,e.return,t)}break;case 4:default:vu(t,e),gu(e);break;case 13:vu(t,e),gu(e),8192&(o=e.child).flags&&(a=null!==o.memoizedState,o.stateNode.isHidden=a,!a||null!==o.alternate&&null!==o.alternate.memoizedState||(Vu=Ye())),4&r&&mu(e);break;case 22:if(f=null!==n&&null!==n.memoizedState,1&e.mode?(Yl=(c=Yl)||f,vu(t,e),Yl=c):vu(t,e),gu(e),8192&r){if(c=null!==e.memoizedState,(e.stateNode.isHidden=c)&&!f&&0!=(1&e.mode))for(Xl=e,f=e.child;null!==f;){for(d=Xl=f;null!==Xl;){switch(h=(p=Xl).child,p.tag){case 0:case 11:case 14:case 15:ru(4,p,p.return);break;case 1:eu(p,p.return);var m=p.stateNode;if("function"==typeof m.componentWillUnmount){r=p,n=p.return;try{t=r,m.props=t.memoizedProps,m.state=t.memoizedState,m.componentWillUnmount()}catch(e){Es(r,n,e)}}break;case 5:eu(p,p.return);break;case 22:if(null!==p.memoizedState){xu(d);continue}}null!==h?(h.return=p,Xl=h):xu(d)}f=f.sibling}e:for(f=null,d=e;;){if(5===d.tag){if(null===f){f=d;try{o=d.stateNode,c?"function"==typeof(a=o.style).setProperty?a.setProperty("display","none","important"):a.display="none":(u=d.stateNode,l=null!=(s=d.memoizedProps.style)&&s.hasOwnProperty("display")?s.display:null,u.style.display=me("display",l))}catch(t){Es(e,e.return,t)}}}else if(6===d.tag){if(null===f)try{d.stateNode.nodeValue=c?"":d.memoizedProps}catch(t){Es(e,e.return,t)}}else if((22!==d.tag&&23!==d.tag||null===d.memoizedState||d===e)&&null!==d.child){d.child.return=d,d=d.child;continue}if(d===e)break e;for(;null===d.sibling;){if(null===d.return||d.return===e)break e;f===d&&(f=null),d=d.return}f===d&&(f=null),d.sibling.return=d.return,d=d.sibling}}break;case 19:vu(t,e),gu(e),4&r&&mu(e);case 21:}}function gu(e){var t=e.flags;if(2&t){try{e:{for(var n=e.return;null!==n;){if(lu(n)){var r=n;break e}n=n.return}throw Error(i(160))}switch(r.tag){case 5:var o=r.stateNode;32&r.flags&&(de(o,""),r.flags&=-33),cu(e,uu(e),o);break;case 3:case 4:var a=r.stateNode.containerInfo;su(e,uu(e),a);break;default:throw Error(i(161))}}catch(t){Es(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function bu(e,t,n){Xl=e,wu(e,t,n)}function wu(e,t,n){for(var r=0!=(1&e.mode);null!==Xl;){var o=Xl,i=o.child;if(22===o.tag&&r){var a=null!==o.memoizedState||Ql;if(!a){var l=o.alternate,u=null!==l&&null!==l.memoizedState||Yl;l=Ql;var s=Yl;if(Ql=a,(Yl=u)&&!s)for(Xl=o;null!==Xl;)u=(a=Xl).child,22===a.tag&&null!==a.memoizedState?Su(o):null!==u?(u.return=a,Xl=u):Su(o);for(;null!==i;)Xl=i,wu(i,t,n),i=i.sibling;Xl=o,Ql=l,Yl=s}_u(e)}else 0!=(8772&o.subtreeFlags)&&null!==i?(i.return=o,Xl=i):_u(e)}}function _u(e){for(;null!==Xl;){var t=Xl;if(0!=(8772&t.flags)){var n=t.alternate;try{if(0!=(8772&t.flags))switch(t.tag){case 0:case 11:case 15:Yl||ou(5,t);break;case 1:var r=t.stateNode;if(4&t.flags&&!Yl)if(null===n)r.componentDidMount();else{var o=t.elementType===t.type?n.memoizedProps:yi(t.type,n.memoizedProps);r.componentDidUpdate(o,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var a=t.updateQueue;null!==a&&zi(t,a,r);break;case 3:var l=t.updateQueue;if(null!==l){if(n=null,null!==t.child)switch(t.child.tag){case 5:case 1:n=t.child.stateNode}zi(t,l,n)}break;case 5:var u=t.stateNode;if(null===n&&4&t.flags){n=u;var s=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":s.autoFocus&&n.focus();break;case"img":s.src&&(n.src=s.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===t.memoizedState){var c=t.alternate;if(null!==c){var f=c.memoizedState;if(null!==f){var d=f.dehydrated;null!==d&&Vt(d)}}}break;default:throw Error(i(163))}Yl||512&t.flags&&iu(t)}catch(e){Es(t,t.return,e)}}if(t===e){Xl=null;break}if(null!==(n=t.sibling)){n.return=t.return,Xl=n;break}Xl=t.return}}function xu(e){for(;null!==Xl;){var t=Xl;if(t===e){Xl=null;break}var n=t.sibling;if(null!==n){n.return=t.return,Xl=n;break}Xl=t.return}}function Su(e){for(;null!==Xl;){var t=Xl;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{ou(4,t)}catch(e){Es(t,n,e)}break;case 1:var r=t.stateNode;if("function"==typeof r.componentDidMount){var o=t.return;try{r.componentDidMount()}catch(e){Es(t,o,e)}}var i=t.return;try{iu(t)}catch(e){Es(t,i,e)}break;case 5:var a=t.return;try{iu(t)}catch(e){Es(t,a,e)}}}catch(e){Es(t,t.return,e)}if(t===e){Xl=null;break}var l=t.sibling;if(null!==l){l.return=t.return,Xl=l;break}Xl=t.return}}var Au,Eu=Math.ceil,ku=w.ReactCurrentDispatcher,Cu=w.ReactCurrentOwner,Ou=w.ReactCurrentBatchConfig,ju=0,Pu=null,Ru=null,Tu=0,Nu=0,Du=Eo(0),Mu=0,Lu=null,Uu=0,Fu=0,zu=0,Iu=null,Bu=null,Vu=0,Wu=1/0,Hu=null,qu=!1,$u=null,Ku=null,Zu=!1,Gu=null,Qu=0,Yu=0,Ju=null,Xu=-1,es=0;function ts(){return 0!=(6&ju)?Ye():-1!==Xu?Xu:Xu=Ye()}function ns(e){return 0==(1&e.mode)?1:0!=(2&ju)&&0!==Tu?Tu&-Tu:null!==vi.transition?(0===es&&(es=mt()),es):0!==(e=bt)?e:e=void 0===(e=window.event)?16:Qt(e.type)}function rs(e,t,n,r){if(50<Yu)throw Yu=0,Ju=null,Error(i(185));yt(e,n,r),0!=(2&ju)&&e===Pu||(e===Pu&&(0==(2&ju)&&(Fu|=n),4===Mu&&us(e,Tu)),os(e,r),1===n&&0===ju&&0==(1&t.mode)&&(Wu=Ye()+500,Io&&Wo()))}function os(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,o=e.expirationTimes,i=e.pendingLanes;0<i;){var a=31-at(i),l=1<<a,u=o[a];-1===u?0!=(l&n)&&0==(l&r)||(o[a]=pt(l,t)):u<=t&&(e.expiredLanes|=l),i&=~l}}(e,t);var r=dt(e,e===Pu?Tu:0);if(0===r)null!==n&&Ze(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(null!=n&&Ze(n),1===t)0===e.tag?function(e){Io=!0,Vo(e)}(ss.bind(null,e)):Vo(ss.bind(null,e)),ao((function(){0==(6&ju)&&Wo()})),n=null;else{switch(wt(r)){case 1:n=Xe;break;case 4:n=et;break;case 16:default:n=tt;break;case 536870912:n=rt}n=Ps(n,is.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function is(e,t){if(Xu=-1,es=0,0!=(6&ju))throw Error(i(327));var n=e.callbackNode;if(Ss()&&e.callbackNode!==n)return null;var r=dt(e,e===Pu?Tu:0);if(0===r)return null;if(0!=(30&r)||0!=(r&e.expiredLanes)||t)t=ys(e,r);else{t=r;var o=ju;ju|=2;var a=ms();for(Pu===e&&Tu===t||(Hu=null,Wu=Ye()+500,ps(e,t));;)try{bs();break}catch(t){hs(e,t)}xi(),ku.current=a,ju=o,null!==Ru?t=0:(Pu=null,Tu=0,t=Mu)}if(0!==t){if(2===t&&0!==(o=ht(e))&&(r=o,t=as(e,o)),1===t)throw n=Lu,ps(e,0),us(e,r),os(e,Ye()),n;if(6===t)us(e,r);else{if(o=e.current.alternate,0==(30&r)&&!function(e){for(var t=e;;){if(16384&t.flags){var n=t.updateQueue;if(null!==n&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var o=n[r],i=o.getSnapshot;o=o.value;try{if(!lr(i(),o))return!1}catch(e){return!1}}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(o)&&(2===(t=ys(e,r))&&0!==(a=ht(e))&&(r=a,t=as(e,a)),1===t))throw n=Lu,ps(e,0),us(e,r),os(e,Ye()),n;switch(e.finishedWork=o,e.finishedLanes=r,t){case 0:case 1:throw Error(i(345));case 2:case 5:xs(e,Bu,Hu);break;case 3:if(us(e,r),(130023424&r)===r&&10<(t=Vu+500-Ye())){if(0!==dt(e,0))break;if(((o=e.suspendedLanes)&r)!==r){ts(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=ro(xs.bind(null,e,Bu,Hu),t);break}xs(e,Bu,Hu);break;case 4:if(us(e,r),(4194240&r)===r)break;for(t=e.eventTimes,o=-1;0<r;){var l=31-at(r);a=1<<l,(l=t[l])>o&&(o=l),r&=~a}if(r=o,10<(r=(120>(r=Ye()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*Eu(r/1960))-r)){e.timeoutHandle=ro(xs.bind(null,e,Bu,Hu),r);break}xs(e,Bu,Hu);break;default:throw Error(i(329))}}}return os(e,Ye()),e.callbackNode===n?is.bind(null,e):null}function as(e,t){var n=Iu;return e.current.memoizedState.isDehydrated&&(ps(e,t).flags|=256),2!==(e=ys(e,t))&&(t=Bu,Bu=n,null!==t&&ls(t)),e}function ls(e){null===Bu?Bu=e:Bu.push.apply(Bu,e)}function us(e,t){for(t&=~zu,t&=~Fu,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-at(t),r=1<<n;e[n]=-1,t&=~r}}function ss(e){if(0!=(6&ju))throw Error(i(327));Ss();var t=dt(e,0);if(0==(1&t))return os(e,Ye()),null;var n=ys(e,t);if(0!==e.tag&&2===n){var r=ht(e);0!==r&&(t=r,n=as(e,r))}if(1===n)throw n=Lu,ps(e,0),us(e,t),os(e,Ye()),n;if(6===n)throw Error(i(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,xs(e,Bu,Hu),os(e,Ye()),null}function cs(e,t){var n=ju;ju|=1;try{return e(t)}finally{0===(ju=n)&&(Wu=Ye()+500,Io&&Wo())}}function fs(e){null!==Gu&&0===Gu.tag&&0==(6&ju)&&Ss();var t=ju;ju|=1;var n=Ou.transition,r=bt;try{if(Ou.transition=null,bt=1,e)return e()}finally{bt=r,Ou.transition=n,0==(6&(ju=t))&&Wo()}}function ds(){Nu=Du.current,ko(Du)}function ps(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,oo(n)),null!==Ru)for(n=Ru.return;null!==n;){var r=n;switch(ni(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&Do();break;case 3:ia(),ko(Po),ko(jo),fa();break;case 5:la(r);break;case 4:ia();break;case 13:case 19:ko(ua);break;case 10:Si(r.type._context);break;case 22:case 23:ds()}n=n.return}if(Pu=e,Ru=e=Ds(e.current,null),Tu=Nu=t,Mu=0,Lu=null,zu=Fu=Uu=0,Bu=Iu=null,null!==Ci){for(t=0;t<Ci.length;t++)if(null!==(r=(n=Ci[t]).interleaved)){n.interleaved=null;var o=r.next,i=n.pending;if(null!==i){var a=i.next;i.next=o,r.next=a}n.pending=r}Ci=null}return e}function hs(e,t){for(;;){var n=Ru;try{if(xi(),da.current=al,ga){for(var r=ma.memoizedState;null!==r;){var o=r.queue;null!==o&&(o.pending=null),r=r.next}ga=!1}if(ha=0,ya=va=ma=null,ba=!1,wa=0,Cu.current=null,null===n||null===n.return){Mu=1,Lu=t,Ru=null;break}e:{var a=e,l=n.return,u=n,s=t;if(t=Tu,u.flags|=32768,null!==s&&"object"==typeof s&&"function"==typeof s.then){var c=s,f=u,d=f.tag;if(0==(1&f.mode)&&(0===d||11===d||15===d)){var p=f.alternate;p?(f.updateQueue=p.updateQueue,f.memoizedState=p.memoizedState,f.lanes=p.lanes):(f.updateQueue=null,f.memoizedState=null)}var h=yl(l);if(null!==h){h.flags&=-257,gl(h,l,u,0,t),1&h.mode&&vl(a,c,t),s=c;var m=(t=h).updateQueue;if(null===m){var v=new Set;v.add(s),t.updateQueue=v}else m.add(s);break e}if(0==(1&t)){vl(a,c,t),vs();break e}s=Error(i(426))}else if(ii&&1&u.mode){var y=yl(l);if(null!==y){0==(65536&y.flags)&&(y.flags|=256),gl(y,l,u,0,t),mi(cl(s,u));break e}}a=s=cl(s,u),4!==Mu&&(Mu=2),null===Iu?Iu=[a]:Iu.push(a),a=l;do{switch(a.tag){case 3:a.flags|=65536,t&=-t,a.lanes|=t,Ui(a,hl(0,s,t));break e;case 1:u=s;var g=a.type,b=a.stateNode;if(0==(128&a.flags)&&("function"==typeof g.getDerivedStateFromError||null!==b&&"function"==typeof b.componentDidCatch&&(null===Ku||!Ku.has(b)))){a.flags|=65536,t&=-t,a.lanes|=t,Ui(a,ml(a,u,t));break e}}a=a.return}while(null!==a)}_s(n)}catch(e){t=e,Ru===n&&null!==n&&(Ru=n=n.return);continue}break}}function ms(){var e=ku.current;return ku.current=al,null===e?al:e}function vs(){0!==Mu&&3!==Mu&&2!==Mu||(Mu=4),null===Pu||0==(268435455&Uu)&&0==(268435455&Fu)||us(Pu,Tu)}function ys(e,t){var n=ju;ju|=2;var r=ms();for(Pu===e&&Tu===t||(Hu=null,ps(e,t));;)try{gs();break}catch(t){hs(e,t)}if(xi(),ju=n,ku.current=r,null!==Ru)throw Error(i(261));return Pu=null,Tu=0,Mu}function gs(){for(;null!==Ru;)ws(Ru)}function bs(){for(;null!==Ru&&!Ge();)ws(Ru)}function ws(e){var t=Au(e.alternate,e,Nu);e.memoizedProps=e.pendingProps,null===t?_s(e):Ru=t,Cu.current=null}function _s(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(32768&t.flags)){if(null!==(n=Zl(n,t,Nu)))return void(Ru=n)}else{if(null!==(n=Gl(n,t)))return n.flags&=32767,void(Ru=n);if(null===e)return Mu=6,void(Ru=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}if(null!==(t=t.sibling))return void(Ru=t);Ru=t=e}while(null!==t);0===Mu&&(Mu=5)}function xs(e,t,n){var r=bt,o=Ou.transition;try{Ou.transition=null,bt=1,function(e,t,n,r){do{Ss()}while(null!==Gu);if(0!=(6&ju))throw Error(i(327));n=e.finishedWork;var o=e.finishedLanes;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(i(177));e.callbackNode=null,e.callbackPriority=0;var a=n.lanes|n.childLanes;if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var o=31-at(n),i=1<<o;t[o]=0,r[o]=-1,e[o]=-1,n&=~i}}(e,a),e===Pu&&(Ru=Pu=null,Tu=0),0==(2064&n.subtreeFlags)&&0==(2064&n.flags)||Zu||(Zu=!0,Ps(tt,(function(){return Ss(),null}))),a=0!=(15990&n.flags),0!=(15990&n.subtreeFlags)||a){a=Ou.transition,Ou.transition=null;var l=bt;bt=1;var u=ju;ju|=4,Cu.current=null,function(e,t){if(eo=Ht,pr(e=dr())){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var o=r.anchorOffset,a=r.focusNode;r=r.focusOffset;try{n.nodeType,a.nodeType}catch(e){n=null;break e}var l=0,u=-1,s=-1,c=0,f=0,d=e,p=null;t:for(;;){for(var h;d!==n||0!==o&&3!==d.nodeType||(u=l+o),d!==a||0!==r&&3!==d.nodeType||(s=l+r),3===d.nodeType&&(l+=d.nodeValue.length),null!==(h=d.firstChild);)p=d,d=h;for(;;){if(d===e)break t;if(p===n&&++c===o&&(u=l),p===a&&++f===r&&(s=l),null!==(h=d.nextSibling))break;p=(d=p).parentNode}d=h}n=-1===u||-1===s?null:{start:u,end:s}}else n=null}n=n||{start:0,end:0}}else n=null;for(to={focusedElem:e,selectionRange:n},Ht=!1,Xl=t;null!==Xl;)if(e=(t=Xl).child,0!=(1028&t.subtreeFlags)&&null!==e)e.return=t,Xl=e;else for(;null!==Xl;){t=Xl;try{var m=t.alternate;if(0!=(1024&t.flags))switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==m){var v=m.memoizedProps,y=m.memoizedState,g=t.stateNode,b=g.getSnapshotBeforeUpdate(t.elementType===t.type?v:yi(t.type,v),y);g.__reactInternalSnapshotBeforeUpdate=b}break;case 3:var w=t.stateNode.containerInfo;1===w.nodeType?w.textContent="":9===w.nodeType&&w.documentElement&&w.removeChild(w.documentElement);break;default:throw Error(i(163))}}catch(e){Es(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Xl=e;break}Xl=t.return}m=nu,nu=!1}(e,n),yu(n,e),hr(to),Ht=!!eo,to=eo=null,e.current=n,bu(n,e,o),Qe(),ju=u,bt=l,Ou.transition=a}else e.current=n;if(Zu&&(Zu=!1,Gu=e,Qu=o),0===(a=e.pendingLanes)&&(Ku=null),function(e){if(it&&"function"==typeof it.onCommitFiberRoot)try{it.onCommitFiberRoot(ot,e,void 0,128==(128&e.current.flags))}catch(e){}}(n.stateNode),os(e,Ye()),null!==t)for(r=e.onRecoverableError,n=0;n<t.length;n++)r((o=t[n]).value,{componentStack:o.stack,digest:o.digest});if(qu)throw qu=!1,e=$u,$u=null,e;0!=(1&Qu)&&0!==e.tag&&Ss(),0!=(1&(a=e.pendingLanes))?e===Ju?Yu++:(Yu=0,Ju=e):Yu=0,Wo()}(e,t,n,r)}finally{Ou.transition=o,bt=r}return null}function Ss(){if(null!==Gu){var e=wt(Qu),t=Ou.transition,n=bt;try{if(Ou.transition=null,bt=16>e?16:e,null===Gu)var r=!1;else{if(e=Gu,Gu=null,Qu=0,0!=(6&ju))throw Error(i(331));var o=ju;for(ju|=4,Xl=e.current;null!==Xl;){var a=Xl,l=a.child;if(0!=(16&Xl.flags)){var u=a.deletions;if(null!==u){for(var s=0;s<u.length;s++){var c=u[s];for(Xl=c;null!==Xl;){var f=Xl;switch(f.tag){case 0:case 11:case 15:ru(8,f,a)}var d=f.child;if(null!==d)d.return=f,Xl=d;else for(;null!==Xl;){var p=(f=Xl).sibling,h=f.return;if(au(f),f===c){Xl=null;break}if(null!==p){p.return=h,Xl=p;break}Xl=h}}}var m=a.alternate;if(null!==m){var v=m.child;if(null!==v){m.child=null;do{var y=v.sibling;v.sibling=null,v=y}while(null!==v)}}Xl=a}}if(0!=(2064&a.subtreeFlags)&&null!==l)l.return=a,Xl=l;else e:for(;null!==Xl;){if(0!=(2048&(a=Xl).flags))switch(a.tag){case 0:case 11:case 15:ru(9,a,a.return)}var g=a.sibling;if(null!==g){g.return=a.return,Xl=g;break e}Xl=a.return}}var b=e.current;for(Xl=b;null!==Xl;){var w=(l=Xl).child;if(0!=(2064&l.subtreeFlags)&&null!==w)w.return=l,Xl=w;else e:for(l=b;null!==Xl;){if(0!=(2048&(u=Xl).flags))try{switch(u.tag){case 0:case 11:case 15:ou(9,u)}}catch(e){Es(u,u.return,e)}if(u===l){Xl=null;break e}var _=u.sibling;if(null!==_){_.return=u.return,Xl=_;break e}Xl=u.return}}if(ju=o,Wo(),it&&"function"==typeof it.onPostCommitFiberRoot)try{it.onPostCommitFiberRoot(ot,e)}catch(e){}r=!0}return r}finally{bt=n,Ou.transition=t}}return!1}function As(e,t,n){e=Mi(e,t=hl(0,t=cl(n,t),1),1),t=ts(),null!==e&&(yt(e,1,t),os(e,t))}function Es(e,t,n){if(3===e.tag)As(e,e,n);else for(;null!==t;){if(3===t.tag){As(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Ku||!Ku.has(r))){t=Mi(t,e=ml(t,e=cl(n,e),1),1),e=ts(),null!==t&&(yt(t,1,e),os(t,e));break}}t=t.return}}function ks(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=ts(),e.pingedLanes|=e.suspendedLanes&n,Pu===e&&(Tu&n)===n&&(4===Mu||3===Mu&&(130023424&Tu)===Tu&&500>Ye()-Vu?ps(e,0):zu|=n),os(e,t)}function Cs(e,t){0===t&&(0==(1&e.mode)?t=1:(t=ct,0==(130023424&(ct<<=1))&&(ct=4194304)));var n=ts();null!==(e=Pi(e,t))&&(yt(e,t,n),os(e,n))}function Os(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),Cs(e,n)}function js(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,o=e.memoizedState;null!==o&&(n=o.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(i(314))}null!==r&&r.delete(t),Cs(e,n)}function Ps(e,t){return Ke(e,t)}function Rs(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Ts(e,t,n,r){return new Rs(e,t,n,r)}function Ns(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Ds(e,t){var n=e.alternate;return null===n?((n=Ts(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Ms(e,t,n,r,o,a){var l=2;if(r=e,"function"==typeof e)Ns(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case S:return Ls(n.children,o,a,t);case A:l=8,o|=8;break;case E:return(e=Ts(12,n,t,2|o)).elementType=E,e.lanes=a,e;case j:return(e=Ts(13,n,t,o)).elementType=j,e.lanes=a,e;case P:return(e=Ts(19,n,t,o)).elementType=P,e.lanes=a,e;case N:return Us(n,o,a,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case k:l=10;break e;case C:l=9;break e;case O:l=11;break e;case R:l=14;break e;case T:l=16,r=null;break e}throw Error(i(130,null==e?e:typeof e,""))}return(t=Ts(l,n,t,o)).elementType=e,t.type=r,t.lanes=a,t}function Ls(e,t,n,r){return(e=Ts(7,e,r,t)).lanes=n,e}function Us(e,t,n,r){return(e=Ts(22,e,r,t)).elementType=N,e.lanes=n,e.stateNode={isHidden:!1},e}function Fs(e,t,n){return(e=Ts(6,e,null,t)).lanes=n,e}function zs(e,t,n){return(t=Ts(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Is(e,t,n,r,o){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=vt(0),this.expirationTimes=vt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=vt(0),this.identifierPrefix=r,this.onRecoverableError=o,this.mutableSourceEagerHydrationData=null}function Bs(e,t,n,r,o,i,a,l,u){return e=new Is(e,t,n,l,u),1===t?(t=1,!0===i&&(t|=8)):t=0,i=Ts(3,null,null,t),e.current=i,i.stateNode=e,i.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},Ti(i),e}function Vs(e){if(!e)return Oo;e:{if(Ve(e=e._reactInternals)!==e||1!==e.tag)throw Error(i(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(No(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(i(171))}if(1===e.tag){var n=e.type;if(No(n))return Lo(e,n,t)}return t}function Ws(e,t,n,r,o,i,a,l,u){return(e=Bs(n,r,!0,e,0,i,0,l,u)).context=Vs(null),n=e.current,(i=Di(r=ts(),o=ns(n))).callback=null!=t?t:null,Mi(n,i,o),e.current.lanes=o,yt(e,o,r),os(e,r),e}function Hs(e,t,n,r){var o=t.current,i=ts(),a=ns(o);return n=Vs(n),null===t.context?t.context=n:t.pendingContext=n,(t=Di(i,a)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),null!==(e=Mi(o,t,a))&&(rs(e,o,a,i),Li(e,o,a)),a}function qs(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function $s(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Ks(e,t){$s(e,t),(e=e.alternate)&&$s(e,t)}Au=function(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps||Po.current)wl=!0;else{if(0==(e.lanes&n)&&0==(128&t.flags))return wl=!1,function(e,t,n){switch(t.tag){case 3:Pl(t),hi();break;case 5:aa(t);break;case 1:No(t.type)&&Uo(t);break;case 4:oa(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,o=t.memoizedProps.value;Co(gi,r._currentValue),r._currentValue=o;break;case 13:if(null!==(r=t.memoizedState))return null!==r.dehydrated?(Co(ua,1&ua.current),t.flags|=128,null):0!=(n&t.child.childLanes)?Fl(e,t,n):(Co(ua,1&ua.current),null!==(e=ql(e,t,n))?e.sibling:null);Co(ua,1&ua.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(128&e.flags)){if(r)return Wl(e,t,n);t.flags|=128}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),Co(ua,ua.current),r)break;return null;case 22:case 23:return t.lanes=0,El(e,t,n)}return ql(e,t,n)}(e,t,n);wl=0!=(131072&e.flags)}else wl=!1,ii&&0!=(1048576&t.flags)&&ei(t,Ko,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;Hl(e,t),e=t.pendingProps;var o=To(t,jo.current);Ei(t,n),o=Aa(null,t,r,e,o,n);var a=Ea();return t.flags|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,No(r)?(a=!0,Uo(t)):a=!1,t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,Ti(t),o.updater=Vi,t.stateNode=o,o._reactInternals=t,$i(t,r,e,n),t=jl(null,t,r,!0,a,n)):(t.tag=0,ii&&a&&ti(t),_l(null,t,o,n),t=t.child),t;case 16:r=t.elementType;e:{switch(Hl(e,t),e=t.pendingProps,r=(o=r._init)(r._payload),t.type=r,o=t.tag=function(e){if("function"==typeof e)return Ns(e)?1:0;if(null!=e){if((e=e.$$typeof)===O)return 11;if(e===R)return 14}return 2}(r),e=yi(r,e),o){case 0:t=Cl(null,t,r,e,n);break e;case 1:t=Ol(null,t,r,e,n);break e;case 11:t=xl(null,t,r,e,n);break e;case 14:t=Sl(null,t,r,yi(r.type,e),n);break e}throw Error(i(306,r,""))}return t;case 0:return r=t.type,o=t.pendingProps,Cl(e,t,r,o=t.elementType===r?o:yi(r,o),n);case 1:return r=t.type,o=t.pendingProps,Ol(e,t,r,o=t.elementType===r?o:yi(r,o),n);case 3:e:{if(Pl(t),null===e)throw Error(i(387));r=t.pendingProps,o=(a=t.memoizedState).element,Ni(e,t),Fi(t,r,null,n);var l=t.memoizedState;if(r=l.element,a.isDehydrated){if(a={element:r,isDehydrated:!1,cache:l.cache,pendingSuspenseBoundaries:l.pendingSuspenseBoundaries,transitions:l.transitions},t.updateQueue.baseState=a,t.memoizedState=a,256&t.flags){t=Rl(e,t,r,n,o=cl(Error(i(423)),t));break e}if(r!==o){t=Rl(e,t,r,n,o=cl(Error(i(424)),t));break e}for(oi=so(t.stateNode.containerInfo.firstChild),ri=t,ii=!0,ai=null,n=Ji(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(hi(),r===o){t=ql(e,t,n);break e}_l(e,t,r,n)}t=t.child}return t;case 5:return aa(t),null===e&&ci(t),r=t.type,o=t.pendingProps,a=null!==e?e.memoizedProps:null,l=o.children,no(r,o)?l=null:null!==a&&no(r,a)&&(t.flags|=32),kl(e,t),_l(e,t,l,n),t.child;case 6:return null===e&&ci(t),null;case 13:return Fl(e,t,n);case 4:return oa(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Yi(t,null,r,n):_l(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,xl(e,t,r,o=t.elementType===r?o:yi(r,o),n);case 7:return _l(e,t,t.pendingProps,n),t.child;case 8:case 12:return _l(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,o=t.pendingProps,a=t.memoizedProps,l=o.value,Co(gi,r._currentValue),r._currentValue=l,null!==a)if(lr(a.value,l)){if(a.children===o.children&&!Po.current){t=ql(e,t,n);break e}}else for(null!==(a=t.child)&&(a.return=t);null!==a;){var u=a.dependencies;if(null!==u){l=a.child;for(var s=u.firstContext;null!==s;){if(s.context===r){if(1===a.tag){(s=Di(-1,n&-n)).tag=2;var c=a.updateQueue;if(null!==c){var f=(c=c.shared).pending;null===f?s.next=s:(s.next=f.next,f.next=s),c.pending=s}}a.lanes|=n,null!==(s=a.alternate)&&(s.lanes|=n),Ai(a.return,n,t),u.lanes|=n;break}s=s.next}}else if(10===a.tag)l=a.type===t.type?null:a.child;else if(18===a.tag){if(null===(l=a.return))throw Error(i(341));l.lanes|=n,null!==(u=l.alternate)&&(u.lanes|=n),Ai(l,n,t),l=a.sibling}else l=a.child;if(null!==l)l.return=a;else for(l=a;null!==l;){if(l===t){l=null;break}if(null!==(a=l.sibling)){a.return=l.return,l=a;break}l=l.return}a=l}_l(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=t.pendingProps.children,Ei(t,n),r=r(o=ki(o)),t.flags|=1,_l(e,t,r,n),t.child;case 14:return o=yi(r=t.type,t.pendingProps),Sl(e,t,r,o=yi(r.type,o),n);case 15:return Al(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:yi(r,o),Hl(e,t),t.tag=1,No(r)?(e=!0,Uo(t)):e=!1,Ei(t,n),Hi(t,r,o),$i(t,r,o,n),jl(null,t,r,!0,e,n);case 19:return Wl(e,t,n);case 22:return El(e,t,n)}throw Error(i(156,t.tag))};var Zs="function"==typeof reportError?reportError:function(e){console.error(e)};function Gs(e){this._internalRoot=e}function Qs(e){this._internalRoot=e}function Ys(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Js(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Xs(){}function ec(e,t,n,r,o){var i=n._reactRootContainer;if(i){var a=i;if("function"==typeof o){var l=o;o=function(){var e=qs(a);l.call(e)}}Hs(t,a,e,o)}else a=function(e,t,n,r,o){if(o){if("function"==typeof r){var i=r;r=function(){var e=qs(a);i.call(e)}}var a=Ws(t,r,e,0,null,!1,0,"",Xs);return e._reactRootContainer=a,e[mo]=a.current,Vr(8===e.nodeType?e.parentNode:e),fs(),a}for(;o=e.lastChild;)e.removeChild(o);if("function"==typeof r){var l=r;r=function(){var e=qs(u);l.call(e)}}var u=Bs(e,0,!1,null,0,!1,0,"",Xs);return e._reactRootContainer=u,e[mo]=u.current,Vr(8===e.nodeType?e.parentNode:e),fs((function(){Hs(t,u,n,r)})),u}(n,t,e,o,r);return qs(a)}Qs.prototype.render=Gs.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(i(409));Hs(e,t,null,null)},Qs.prototype.unmount=Gs.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;fs((function(){Hs(null,e,null,null)})),t[mo]=null}},Qs.prototype.unstable_scheduleHydration=function(e){if(e){var t=At();e={blockedOn:null,target:e,priority:t};for(var n=0;n<Nt.length&&0!==t&&t<Nt[n].priority;n++);Nt.splice(n,0,e),0===n&&Ut(e)}},_t=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=ft(t.pendingLanes);0!==n&&(gt(t,1|n),os(t,Ye()),0==(6&ju)&&(Wu=Ye()+500,Wo()))}break;case 13:fs((function(){var t=Pi(e,1);if(null!==t){var n=ts();rs(t,e,1,n)}})),Ks(e,1)}},xt=function(e){if(13===e.tag){var t=Pi(e,134217728);null!==t&&rs(t,e,134217728,ts()),Ks(e,134217728)}},St=function(e){if(13===e.tag){var t=ns(e),n=Pi(e,t);null!==n&&rs(n,e,t,ts()),Ks(e,t)}},At=function(){return bt},Et=function(e,t){var n=bt;try{return bt=e,t()}finally{bt=n}},xe=function(e,t,n){switch(t){case"input":if(J(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=xo(r);if(!o)throw Error(i(90));K(r),J(r,o)}}}break;case"textarea":ie(e,n);break;case"select":null!=(t=n.value)&&ne(e,!!n.multiple,t,!1)}},Oe=cs,je=fs;var tc={usingClientEntryPoint:!1,Events:[wo,_o,xo,ke,Ce,cs]},nc={findFiberByHostInstance:bo,bundleType:0,version:"18.2.0",rendererPackageName:"react-dom"},rc={bundleType:nc.bundleType,version:nc.version,rendererPackageName:nc.rendererPackageName,rendererConfig:nc.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:w.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=qe(e))?null:e.stateNode},findFiberByHostInstance:nc.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.2.0-next-9e3b772b8-20220608"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var oc=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!oc.isDisabled&&oc.supportsFiber)try{ot=oc.inject(rc),it=oc}catch(ce){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=tc,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Ys(t))throw Error(i(200));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:x,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)},t.createRoot=function(e,t){if(!Ys(e))throw Error(i(299));var n=!1,r="",o=Zs;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onRecoverableError&&(o=t.onRecoverableError)),t=Bs(e,1,!1,null,0,n,0,r,o),e[mo]=t.current,Vr(8===e.nodeType?e.parentNode:e),new Gs(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(i(188));throw e=Object.keys(e).join(","),Error(i(268,e))}return null===(e=qe(t))?null:e.stateNode},t.flushSync=function(e){return fs(e)},t.hydrate=function(e,t,n){if(!Js(t))throw Error(i(200));return ec(null,e,t,!0,n)},t.hydrateRoot=function(e,t,n){if(!Ys(e))throw Error(i(405));var r=null!=n&&n.hydratedSources||null,o=!1,a="",l=Zs;if(null!=n&&(!0===n.unstable_strictMode&&(o=!0),void 0!==n.identifierPrefix&&(a=n.identifierPrefix),void 0!==n.onRecoverableError&&(l=n.onRecoverableError)),t=Ws(t,null,e,1,null!=n?n:null,o,0,a,l),e[mo]=t.current,Vr(e),r)for(e=0;e<r.length;e++)o=(o=(n=r[e])._getVersion)(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,o]:t.mutableSourceEagerHydrationData.push(n,o);return new Qs(t)},t.render=function(e,t,n){if(!Js(t))throw Error(i(200));return ec(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Js(e))throw Error(i(40));return!!e._reactRootContainer&&(fs((function(){ec(null,null,e,!1,(function(){e._reactRootContainer=null,e[mo]=null}))})),!0)},t.unstable_batchedUpdates=cs,t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Js(n))throw Error(i(200));if(null==e||void 0===e._reactInternals)throw Error(i(38));return ec(e,t,n,!1,r)},t.version="18.2.0-next-9e3b772b8-20220608"},745:function(e,t,n){"use strict";var r=n(3935);t.createRoot=r.createRoot,t.hydrateRoot=r.hydrateRoot},3935:function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(4448)},8359:function(e,t){"use strict";var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),o=Symbol.for("react.fragment"),i=Symbol.for("react.strict_mode"),a=Symbol.for("react.profiler"),l=Symbol.for("react.provider"),u=Symbol.for("react.context"),s=Symbol.for("react.server_context"),c=Symbol.for("react.forward_ref"),f=Symbol.for("react.suspense"),d=Symbol.for("react.suspense_list"),p=Symbol.for("react.memo"),h=Symbol.for("react.lazy");Symbol.for("react.offscreen");Symbol.for("react.module.reference"),t.isContextConsumer=function(e){return function(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case n:switch(e=e.type){case o:case a:case i:case f:case d:return e;default:switch(e=e&&e.$$typeof){case s:case u:case c:case h:case p:case l:return e;default:return t}}case r:return t}}}(e)===u}},2973:function(e,t,n){"use strict";e.exports=n(8359)},2811:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=t.CALL_HISTORY_METHOD="@@router/CALL_HISTORY_METHOD";function r(e){return function(){for(var t=arguments.length,r=Array(t),o=0;o<t;o++)r[o]=arguments[o];return{type:n,payload:{method:e,args:r}}}}var o=t.push=r("push"),i=t.replace=r("replace"),a=t.go=r("go"),l=t.goBack=r("goBack"),u=t.goForward=r("goForward");t.routerActions={push:o,replace:i,go:a,goBack:l,goForward:u}},3311:function(e,t,n){"use strict";t.mg=void 0;var r=n(8207);Object.defineProperty(t,"mg",{enumerable:!0,get:function(){return r.routerReducer}});n(2811);var o=a(n(8533)),i=a(n(2998));function a(e){return e&&e.__esModule?e:{default:e}}o.default,i.default},2998:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return function(){return function(t){return function(n){if(n.type!==r.CALL_HISTORY_METHOD)return t(n);var o=n.payload,i=o.method,a=o.args;e[i].apply(e,function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}(a))}}}};var r=n(2811)},8207:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};t.routerReducer=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:o,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},i=t.type,a=t.payload;return i===r?n({},e,{locationBeforeTransitions:a}):e};var r=t.LOCATION_CHANGE="@@router/LOCATION_CHANGE",o={locationBeforeTransitions:null}},8533:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};t.default=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},a=n.selectLocationState,l=void 0===a?i:a,u=n.adjustUrlOnReplay,s=void 0===u||u;if(void 0===l(t.getState()))throw new Error("Expected the routing state to be available either as `state.routing` or as the custom expression you can specify as `selectLocationState` in the `syncHistoryWithStore()` options. Ensure you have added the `routerReducer` to your store's reducers via `combineReducers` or whatever method you use to isolate your reducers.");var c=void 0,f=void 0,d=void 0,p=void 0,h=void 0,m=function(e){return l(t.getState()).locationBeforeTransitions||(e?c:void 0)};if(c=m(),s){var v=function(){var t=m(!0);h!==t&&c!==t&&(f=!0,h=t,e.transitionTo(r({},t,{action:"PUSH"})),f=!1)};d=t.subscribe(v),v()}var y=function(e){f||(h=e,!c&&(c=e,m())||t.dispatch({type:o.LOCATION_CHANGE,payload:e}))};return p=e.listen(y),e.getCurrentLocation&&y(e.getCurrentLocation()),r({},e,{listen:function(n){var r=m(!0),o=!1,i=t.subscribe((function(){var e=m(!0);e!==r&&(r=e,o||n(r))}));return e.getCurrentLocation||n(r),function(){o=!0,i()}},unsubscribe:function(){s&&d(),p()}})};var o=n(8207),i=function(e){return e.routing}},5251:function(e,t,n){"use strict";var r=n(7294),o=Symbol.for("react.element"),i=Symbol.for("react.fragment"),a=Object.prototype.hasOwnProperty,l=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,u={key:!0,ref:!0,__self:!0,__source:!0};function s(e,t,n){var r,i={},s=null,c=null;for(r in void 0!==n&&(s=""+n),void 0!==t.key&&(s=""+t.key),void 0!==t.ref&&(c=t.ref),t)a.call(t,r)&&!u.hasOwnProperty(r)&&(i[r]=t[r]);if(e&&e.defaultProps)for(r in t=e.defaultProps)void 0===i[r]&&(i[r]=t[r]);return{$$typeof:o,type:e,key:s,ref:c,props:i,_owner:l.current}}t.Fragment=i,t.jsx=s,t.jsxs=s},2408:function(e,t){"use strict";var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),o=Symbol.for("react.fragment"),i=Symbol.for("react.strict_mode"),a=Symbol.for("react.profiler"),l=Symbol.for("react.provider"),u=Symbol.for("react.context"),s=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),f=Symbol.for("react.memo"),d=Symbol.for("react.lazy"),p=Symbol.iterator,h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m=Object.assign,v={};function y(e,t,n){this.props=e,this.context=t,this.refs=v,this.updater=n||h}function g(){}function b(e,t,n){this.props=e,this.context=t,this.refs=v,this.updater=n||h}y.prototype.isReactComponent={},y.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},y.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},g.prototype=y.prototype;var w=b.prototype=new g;w.constructor=b,m(w,y.prototype),w.isPureReactComponent=!0;var _=Array.isArray,x=Object.prototype.hasOwnProperty,S={current:null},A={key:!0,ref:!0,__self:!0,__source:!0};function E(e,t,r){var o,i={},a=null,l=null;if(null!=t)for(o in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(a=""+t.key),t)x.call(t,o)&&!A.hasOwnProperty(o)&&(i[o]=t[o]);var u=arguments.length-2;if(1===u)i.children=r;else if(1<u){for(var s=Array(u),c=0;c<u;c++)s[c]=arguments[c+2];i.children=s}if(e&&e.defaultProps)for(o in u=e.defaultProps)void 0===i[o]&&(i[o]=u[o]);return{$$typeof:n,type:e,key:a,ref:l,props:i,_owner:S.current}}function k(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var C=/\/+/g;function O(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function j(e,t,o,i,a){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var u=!1;if(null===e)u=!0;else switch(l){case"string":case"number":u=!0;break;case"object":switch(e.$$typeof){case n:case r:u=!0}}if(u)return a=a(u=e),e=""===i?"."+O(u,0):i,_(a)?(o="",null!=e&&(o=e.replace(C,"$&/")+"/"),j(a,t,o,"",(function(e){return e}))):null!=a&&(k(a)&&(a=function(e,t){return{$$typeof:n,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(a,o+(!a.key||u&&u.key===a.key?"":(""+a.key).replace(C,"$&/")+"/")+e)),t.push(a)),1;if(u=0,i=""===i?".":i+":",_(e))for(var s=0;s<e.length;s++){var c=i+O(l=e[s],s);u+=j(l,t,o,c,a)}else if(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=p&&e[p]||e["@@iterator"])?e:null}(e),"function"==typeof c)for(e=c.call(e),s=0;!(l=e.next()).done;)u+=j(l=l.value,t,o,c=i+O(l,s++),a);else if("object"===l)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return u}function P(e,t,n){if(null==e)return e;var r=[],o=0;return j(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function R(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var T={current:null},N={transition:null},D={ReactCurrentDispatcher:T,ReactCurrentBatchConfig:N,ReactCurrentOwner:S};t.Children={map:P,forEach:function(e,t,n){P(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return P(e,(function(){t++})),t},toArray:function(e){return P(e,(function(e){return e}))||[]},only:function(e){if(!k(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=y,t.Fragment=o,t.Profiler=a,t.PureComponent=b,t.StrictMode=i,t.Suspense=c,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=D,t.cloneElement=function(e,t,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var o=m({},e.props),i=e.key,a=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(a=t.ref,l=S.current),void 0!==t.key&&(i=""+t.key),e.type&&e.type.defaultProps)var u=e.type.defaultProps;for(s in t)x.call(t,s)&&!A.hasOwnProperty(s)&&(o[s]=void 0===t[s]&&void 0!==u?u[s]:t[s])}var s=arguments.length-2;if(1===s)o.children=r;else if(1<s){u=Array(s);for(var c=0;c<s;c++)u[c]=arguments[c+2];o.children=u}return{$$typeof:n,type:e.type,key:i,ref:a,props:o,_owner:l}},t.createContext=function(e){return(e={$$typeof:u,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:l,_context:e},e.Consumer=e},t.createElement=E,t.createFactory=function(e){var t=E.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:s,render:e}},t.isValidElement=k,t.lazy=function(e){return{$$typeof:d,_payload:{_status:-1,_result:e},_init:R}},t.memo=function(e,t){return{$$typeof:f,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=N.transition;N.transition={};try{e()}finally{N.transition=t}},t.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},t.useCallback=function(e,t){return T.current.useCallback(e,t)},t.useContext=function(e){return T.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return T.current.useDeferredValue(e)},t.useEffect=function(e,t){return T.current.useEffect(e,t)},t.useId=function(){return T.current.useId()},t.useImperativeHandle=function(e,t,n){return T.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return T.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return T.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return T.current.useMemo(e,t)},t.useReducer=function(e,t,n){return T.current.useReducer(e,t,n)},t.useRef=function(e){return T.current.useRef(e)},t.useState=function(e){return T.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return T.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return T.current.useTransition()},t.version="18.2.0"},7294:function(e,t,n){"use strict";e.exports=n(2408)},5893:function(e,t,n){"use strict";e.exports=n(5251)},53:function(e,t){"use strict";function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,o=e[r];if(!(0<i(o,t)))break e;e[r]=t,e[n]=o,n=r}}function r(e){return 0===e.length?null:e[0]}function o(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length,a=o>>>1;r<a;){var l=2*(r+1)-1,u=e[l],s=l+1,c=e[s];if(0>i(u,n))s<o&&0>i(c,u)?(e[r]=c,e[s]=n,r=s):(e[r]=u,e[l]=n,r=l);else{if(!(s<o&&0>i(c,n)))break e;e[r]=c,e[s]=n,r=s}}}return t}function i(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var a=performance;t.unstable_now=function(){return a.now()}}else{var l=Date,u=l.now();t.unstable_now=function(){return l.now()-u}}var s=[],c=[],f=1,d=null,p=3,h=!1,m=!1,v=!1,y="function"==typeof setTimeout?setTimeout:null,g="function"==typeof clearTimeout?clearTimeout:null,b="undefined"!=typeof setImmediate?setImmediate:null;function w(e){for(var t=r(c);null!==t;){if(null===t.callback)o(c);else{if(!(t.startTime<=e))break;o(c),t.sortIndex=t.expirationTime,n(s,t)}t=r(c)}}function _(e){if(v=!1,w(e),!m)if(null!==r(s))m=!0,N(x);else{var t=r(c);null!==t&&D(_,t.startTime-e)}}function x(e,n){m=!1,v&&(v=!1,g(k),k=-1),h=!0;var i=p;try{for(w(n),d=r(s);null!==d&&(!(d.expirationTime>n)||e&&!j());){var a=d.callback;if("function"==typeof a){d.callback=null,p=d.priorityLevel;var l=a(d.expirationTime<=n);n=t.unstable_now(),"function"==typeof l?d.callback=l:d===r(s)&&o(s),w(n)}else o(s);d=r(s)}if(null!==d)var u=!0;else{var f=r(c);null!==f&&D(_,f.startTime-n),u=!1}return u}finally{d=null,p=i,h=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var S,A=!1,E=null,k=-1,C=5,O=-1;function j(){return!(t.unstable_now()-O<C)}function P(){if(null!==E){var e=t.unstable_now();O=e;var n=!0;try{n=E(!0,e)}finally{n?S():(A=!1,E=null)}}else A=!1}if("function"==typeof b)S=function(){b(P)};else if("undefined"!=typeof MessageChannel){var R=new MessageChannel,T=R.port2;R.port1.onmessage=P,S=function(){T.postMessage(null)}}else S=function(){y(P,0)};function N(e){E=e,A||(A=!0,S())}function D(e,n){k=y((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){m||h||(m=!0,N(x))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):C=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return p},t.unstable_getFirstCallbackNode=function(){return r(s)},t.unstable_next=function(e){switch(p){case 1:case 2:case 3:var t=3;break;default:t=p}var n=p;p=t;try{return e()}finally{p=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=p;p=e;try{return t()}finally{p=n}},t.unstable_scheduleCallback=function(e,o,i){var a=t.unstable_now();switch(i="object"==typeof i&&null!==i&&"number"==typeof(i=i.delay)&&0<i?a+i:a,e){case 1:var l=-1;break;case 2:l=250;break;case 5:l=1073741823;break;case 4:l=1e4;break;default:l=5e3}return e={id:f++,callback:o,priorityLevel:e,startTime:i,expirationTime:l=i+l,sortIndex:-1},i>a?(e.sortIndex=i,n(c,e),null===r(s)&&e===r(c)&&(v?(g(k),k=-1):v=!0,D(_,i-a))):(e.sortIndex=l,n(s,e),m||h||(m=!0,N(x))),e},t.unstable_shouldYield=j,t.unstable_wrapCallback=function(e){var t=p;return function(){var n=p;p=t;try{return e.apply(this,arguments)}finally{p=n}}}},3840:function(e,t,n){"use strict";e.exports=n(53)},3379:function(e){"use strict";var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var i={},a=[],l=0;l<e.length;l++){var u=e[l],s=r.base?u[0]+r.base:u[0],c=i[s]||0,f="".concat(s," ").concat(c);i[s]=c+1;var d=n(f),p={css:u[1],media:u[2],sourceMap:u[3],supports:u[4],layer:u[5]};if(-1!==d)t[d].references++,t[d].updater(p);else{var h=o(p,r);r.byIndex=l,t.splice(l,0,{identifier:f,updater:h,references:1})}a.push(f)}return a}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var i=r(e=e||[],o=o||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var l=n(i[a]);t[l].references--}for(var u=r(e,o),s=0;s<i.length;s++){var c=n(i[s]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}i=u}}},569:function(e){"use strict";var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},9216:function(e){"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},3565:function(e,t,n){"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},7795:function(e){"use strict";e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},4589:function(e){"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},3250:function(e,t,n){"use strict";var r=n(7294),o="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},i=r.useState,a=r.useEffect,l=r.useLayoutEffect,u=r.useDebugValue;function s(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!o(e,n)}catch(e){return!0}}var c="undefined"==typeof window||void 0===window.document||void 0===window.document.createElement?function(e,t){return t()}:function(e,t){var n=t(),r=i({inst:{value:n,getSnapshot:t}}),o=r[0].inst,c=r[1];return l((function(){o.value=n,o.getSnapshot=t,s(o)&&c({inst:o})}),[e,n,t]),a((function(){return s(o)&&c({inst:o}),e((function(){s(o)&&c({inst:o})}))}),[e]),u(n),n};t.useSyncExternalStore=void 0!==r.useSyncExternalStore?r.useSyncExternalStore:c},139:function(e,t,n){"use strict";var r=n(7294),o=n(1688),i="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},a=o.useSyncExternalStore,l=r.useRef,u=r.useEffect,s=r.useMemo,c=r.useDebugValue;t.useSyncExternalStoreWithSelector=function(e,t,n,r,o){var f=l(null);if(null===f.current){var d={hasValue:!1,value:null};f.current=d}else d=f.current;f=s((function(){function e(e){if(!u){if(u=!0,a=e,e=r(e),void 0!==o&&d.hasValue){var t=d.value;if(o(t,e))return l=t}return l=e}if(t=l,i(a,e))return t;var n=r(e);return void 0!==o&&o(t,n)?t:(a=e,l=n)}var a,l,u=!1,s=void 0===n?null:n;return[function(){return e(t())},null===s?void 0:function(){return e(s())}]}),[t,n,r,o]);var p=a(e,f[0],f[1]);return u((function(){d.hasValue=!0,d.value=p}),[p]),c(p),p}},1688:function(e,t,n){"use strict";e.exports=n(3250)},2798:function(e,t,n){"use strict";e.exports=n(139)},2134:function(e,t,n){var r;!function(o,i){"use strict";var a="tinyscrollbar",l={axis:"y",wheel:!0,wheelSpeed:40,wheelLock:!0,touchLock:!0,trackSize:!1,thumbSize:!1,thumbSizeMin:20};function u(e,t){this.options=function(){for(var e=1;e<arguments.length;e++)for(var t in arguments[e])arguments[e].hasOwnProperty(t)&&(arguments[0][t]=arguments[e][t]);return arguments[0]}({},l,t),this._defaults=l,this._name=a;var n=this,r=document.querySelectorAll("body")[0],u=e.querySelectorAll(".viewport")[0],s=e.querySelectorAll(".overview")[0],c=e.querySelectorAll(".scrollbar")[0],f=c.querySelectorAll(".track")[0],d=c.querySelectorAll(".thumb")[0],p=0,h="x"===this.options.axis,m="ontouchstart"in document.documentElement,v="onwheel"in document.createElement("div")?"wheel":document.onmousewheel!==i?"mousewheel":"DOMMouseScroll",y=h?"width":"height",g=h?"left":"top",b=document.createEvent("HTMLEvents");function w(){return n.contentPosition>0}function _(){return n.contentPosition<=n.contentSize-n.viewportSize-5}function x(e,t){n.hasContentToSroll&&(g.charAt(0).toUpperCase(),g.slice(1).toLowerCase(),p=t?d.getBoundingClientRect()[g]:h?e.clientX:e.clientY,r.className+=" noSelect",m&&(document.ontouchmove=function(e){(n.options.touchLock||w()&&_())&&e.preventDefault(),e.touches[0][a+"Touch"]=1,A(e.touches[0])},document.ontouchend=E),document.onmousemove=A,document.onmouseup=d.onmouseup=E,A(e))}function S(t){if(n.hasContentToSroll){var r=t||o.event,i=-(r.deltaY||r.detail||-1/3*r.wheelDelta)/40;1===r.deltaMode&&n.options.wheelSpeed,n.contentPosition-=i*n.options.wheelSpeed,n.contentPosition=Math.min(n.contentSize-n.viewportSize,Math.max(0,n.contentPosition)),n.thumbPosition=n.contentPosition/n.trackRatio,e.dispatchEvent(b),d.style[g]=n.thumbPosition+"px",s.style[g]=-n.contentPosition+"px",(n.options.wheelLock||w()&&_())&&r.preventDefault()}t.stopPropagation()}function A(t){if(n.hasContentToSroll){var r=h?t.clientX:t.clientY,o=t[a+"Touch"]?p-r:r-p,i=Math.min(n.trackSize-n.thumbSize,Math.max(0,n.thumbPosition+o));n.contentPosition=i*n.trackRatio,e.dispatchEvent(b),d.style[g]=i+"px",s.style[g]=-n.contentPosition+"px"}}function E(){n.thumbPosition=parseInt(d.style[g],10)||0,r.className=r.className.replace(" noSelect",""),document.onmousemove=document.onmouseup=null,d.onmouseup=null,f.onmouseup=null,document.ontouchmove=document.ontouchend=null}return b.initEvent("move",!0,!0),this.contentPosition=0,this.viewportSize=0,this.contentSize=0,this.contentRatio=0,this.trackSize=0,this.trackRatio=0,this.thumbSize=0,this.thumbPosition=0,this.hasContentToSroll=!1,this.update=function(e){var t=y.charAt(0).toUpperCase()+y.slice(1).toLowerCase(),r=c.className;switch(this.viewportSize=u["offset"+t],this.contentSize=s["scroll"+t],this.contentRatio=this.viewportSize/this.contentSize,this.trackSize=this.options.trackSize||this.viewportSize,this.thumbSize=Math.min(this.trackSize,Math.max(this.options.thumbSizeMin,this.options.thumbSize||this.trackSize*this.contentRatio)),this.trackRatio=(this.contentSize-this.viewportSize)/(this.trackSize-this.thumbSize),this.hasContentToSroll=this.contentRatio<1,c.className=this.hasContentToSroll?r.replace(/disable/g,""):r.replace(/ disable/g,"")+" disable",e){case"bottom":this.contentPosition=Math.max(this.contentSize-this.viewportSize,0);break;case"relative":this.contentPosition=Math.min(Math.max(this.contentSize-this.viewportSize,0),Math.max(0,this.contentPosition));break;default:this.contentPosition=parseInt(e,10)||0}return this.thumbPosition=n.contentPosition/n.trackRatio,d.style[g]=n.thumbPosition+"px",s.style[g]=-n.contentPosition+"px",c.style[y]=n.trackSize+"px",f.style[y]=n.trackSize+"px",d.style[y]=n.thumbSize+"px",n},n.update(),m&&(u.ontouchstart=function(e){1===e.touches.length&&(x(e.touches[0]),e.stopPropagation())}),d.onmousedown=function(e){e.stopPropagation(),x(e)},f.onmousedown=function(e){x(e,!0)},o.addEventListener("resize",(function(){n.update("relative")}),!0),n.options.wheel&&o.addEventListener?e.addEventListener(v,S,!1):n.options.wheel&&(e.onmousewheel=S),n}var s=function(e,t){return new u(e,t)};(r=function(){return s}.call(t,n,t,e))===i||(e.exports=r)}(window)}},i={};function a(e){var t=i[e];if(void 0!==t)return t.exports;var n=i[e]={id:e,exports:{}};return o[e](n,n.exports,a),n.exports}a.m=o,a.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return a.d(t,{a:t}),t},t=Object.getPrototypeOf?function(e){return Object.getPrototypeOf(e)}:function(e){return e.__proto__},a.t=function(n,r){if(1&r&&(n=this(n)),8&r)return n;if("object"==typeof n&&n){if(4&r&&n.__esModule)return n;if(16&r&&"function"==typeof n.then)return n}var o=Object.create(null);a.r(o);var i={};e=e||[null,t({}),t([]),t(t)];for(var l=2&r&&n;"object"==typeof l&&!~e.indexOf(l);l=t(l))Object.getOwnPropertyNames(l).forEach((function(e){i[e]=function(){return n[e]}}));return i.default=function(){return n},a.d(o,i),o},a.d=function(e,t){for(var n in t)a.o(t,n)&&!a.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},a.f={},a.e=function(e){return Promise.all(Object.keys(a.f).reduce((function(t,n){return a.f[n](e,t),t}),[]))},a.u=function(e){return e+".js"},a.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),a.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n={},r="weather-3:",a.l=function(e,t,o,i){if(n[e])n[e].push(t);else{var l,u;if(void 0!==o)for(var s=document.getElementsByTagName("script"),c=0;c<s.length;c++){var f=s[c];if(f.getAttribute("src")==e||f.getAttribute("data-webpack")==r+o){l=f;break}}l||(u=!0,(l=document.createElement("script")).charset="utf-8",l.timeout=120,a.nc&&l.setAttribute("nonce",a.nc),l.setAttribute("data-webpack",r+o),l.src=e),n[e]=[t];var d=function(t,r){l.onerror=l.onload=null,clearTimeout(p);var o=n[e];if(delete n[e],l.parentNode&&l.parentNode.removeChild(l),o&&o.forEach((function(e){return e(r)})),t)return t(r)},p=setTimeout(d.bind(null,void 0,{type:"timeout",target:l}),12e4);l.onerror=d.bind(null,l.onerror),l.onload=d.bind(null,l.onload),u&&document.head.appendChild(l)}},a.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},function(){var e;a.g.importScripts&&(e=a.g.location+"");var t=a.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");if(n.length)for(var r=n.length-1;r>-1&&!e;)e=n[r--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),a.p=e}(),function(){var e={143:0};a.f.j=function(t,n){var r=a.o(e,t)?e[t]:void 0;if(0!==r)if(r)n.push(r[2]);else{var o=new Promise((function(n,o){r=e[t]=[n,o]}));n.push(r[2]=o);var i=a.p+a.u(t),l=new Error;a.l(i,(function(n){if(a.o(e,t)&&(0!==(r=e[t])&&(e[t]=void 0),r)){var o=n&&("load"===n.type?"missing":n.type),i=n&&n.target&&n.target.src;l.message="Loading chunk "+t+" failed.\n("+o+": "+i+")",l.name="ChunkLoadError",l.type=o,l.request=i,r[1](l)}}),"chunk-"+t,t)}};var t=function(t,n){var r,o,i=n[0],l=n[1],u=n[2],s=0;if(i.some((function(t){return 0!==e[t]}))){for(r in l)a.o(l,r)&&(a.m[r]=l[r]);u&&u(a)}for(t&&t(n);s<i.length;s++)o=i[s],a.o(e,o)&&e[o]&&e[o][0](),e[o]=0},n=self.webpackChunkweather_3=self.webpackChunkweather_3||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))}(),a.nc=void 0,function(){"use strict";var e,t=a(5893),n=a(745),r=a(7294),o=a.t(r,2);function i(){return i=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i.apply(this,arguments)}!function(e){e.Pop="POP",e.Push="PUSH",e.Replace="REPLACE"}(e||(e={}));const l="popstate";function u(e,t){if(!1===e||null==e)throw new Error(t)}function s(e,t){if(!e){"undefined"!=typeof console&&console.warn(t);try{throw new Error(t)}catch(e){}}}function c(e,t){return{usr:e.state,key:e.key,idx:t}}function f(e,t,n,r){return void 0===n&&(n=null),i({pathname:"string"==typeof e?e:e.pathname,search:"",hash:""},"string"==typeof t?p(t):t,{state:n,key:t&&t.key||r||Math.random().toString(36).substr(2,8)})}function d(e){let{pathname:t="/",search:n="",hash:r=""}=e;return n&&"?"!==n&&(t+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(t+="#"===r.charAt(0)?r:"#"+r),t}function p(e){let t={};if(e){let n=e.indexOf("#");n>=0&&(t.hash=e.substr(n),e=e.substr(0,n));let r=e.indexOf("?");r>=0&&(t.search=e.substr(r),e=e.substr(0,r)),e&&(t.pathname=e)}return t}var h;!function(e){e.data="data",e.deferred="deferred",e.redirect="redirect",e.error="error"}(h||(h={}));const m=new Set(["lazy","caseSensitive","path","id","index","children"]);function v(e,t,n,r){return void 0===n&&(n=[]),void 0===r&&(r={}),e.map(((e,o)=>{let a=[...n,o],l="string"==typeof e.id?e.id:a.join("-");if(u(!0!==e.index||!e.children,"Cannot specify children on an index route"),u(!r[l],'Found a route id collision on id "'+l+"\".  Route id's must be globally unique within Data Router usages"),function(e){return!0===e.index}(e)){let n=i({},e,t(e),{id:l});return r[l]=n,n}{let n=i({},e,t(e),{id:l,children:void 0});return r[l]=n,e.children&&(n.children=v(e.children,t,a,r)),n}}))}function y(e,t,n){void 0===n&&(n="/");let r=R(("string"==typeof t?p(t):t).pathname||"/",n);if(null==r)return null;let o=g(e);!function(e){e.sort(((e,t)=>e.score!==t.score?t.score-e.score:function(e,t){let n=e.length===t.length&&e.slice(0,-1).every(((e,n)=>e===t[n]));return n?e[e.length-1]-t[t.length-1]:0}(e.routesMeta.map((e=>e.childrenIndex)),t.routesMeta.map((e=>e.childrenIndex)))))}(o);let i=null;for(let e=0;null==i&&e<o.length;++e)i=O(o[e],P(r));return i}function g(e,t,n,r){void 0===t&&(t=[]),void 0===n&&(n=[]),void 0===r&&(r="");let o=(e,o,i)=>{let a={relativePath:void 0===i?e.path||"":i,caseSensitive:!0===e.caseSensitive,childrenIndex:o,route:e};a.relativePath.startsWith("/")&&(u(a.relativePath.startsWith(r),'Absolute route path "'+a.relativePath+'" nested under path "'+r+'" is not valid. An absolute child route path must start with the combined path of all its parent routes.'),a.relativePath=a.relativePath.slice(r.length));let l=M([r,a.relativePath]),s=n.concat(a);e.children&&e.children.length>0&&(u(!0!==e.index,'Index routes must not have child routes. Please remove all child routes from route path "'+l+'".'),g(e.children,t,s,l)),(null!=e.path||e.index)&&t.push({path:l,score:C(l,e.index),routesMeta:s})};return e.forEach(((e,t)=>{var n;if(""!==e.path&&null!=(n=e.path)&&n.includes("?"))for(let n of b(e.path))o(e,t,n);else o(e,t)})),t}function b(e){let t=e.split("/");if(0===t.length)return[];let[n,...r]=t,o=n.endsWith("?"),i=n.replace(/\?$/,"");if(0===r.length)return o?[i,""]:[i];let a=b(r.join("/")),l=[];return l.push(...a.map((e=>""===e?i:[i,e].join("/")))),o&&l.push(...a),l.map((t=>e.startsWith("/")&&""===t?"/":t))}const w=/^:\w+$/,_=3,x=2,S=1,A=10,E=-2,k=e=>"*"===e;function C(e,t){let n=e.split("/"),r=n.length;return n.some(k)&&(r+=E),t&&(r+=x),n.filter((e=>!k(e))).reduce(((e,t)=>e+(w.test(t)?_:""===t?S:A)),r)}function O(e,t){let{routesMeta:n}=e,r={},o="/",i=[];for(let e=0;e<n.length;++e){let a=n[e],l=e===n.length-1,u="/"===o?t:t.slice(o.length)||"/",s=j({path:a.relativePath,caseSensitive:a.caseSensitive,end:l},u);if(!s)return null;Object.assign(r,s.params);let c=a.route;i.push({params:r,pathname:M([o,s.pathname]),pathnameBase:L(M([o,s.pathnameBase])),route:c}),"/"!==s.pathnameBase&&(o=M([o,s.pathnameBase]))}return i}function j(e,t){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});let[n,r]=function(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=!0),s("*"===e||!e.endsWith("*")||e.endsWith("/*"),'Route path "'+e+'" will be treated as if it were "'+e.replace(/\*$/,"/*")+'" because the `*` character must always follow a `/` in the pattern. To get rid of this warning, please change the route path to "'+e.replace(/\*$/,"/*")+'".');let r=[],o="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^$?{}|()[\]]/g,"\\$&").replace(/\/:(\w+)/g,((e,t)=>(r.push(t),"/([^\\/]+)")));return e.endsWith("*")?(r.push("*"),o+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):n?o+="\\/*$":""!==e&&"/"!==e&&(o+="(?:(?=\\/|$))"),[new RegExp(o,t?void 0:"i"),r]}(e.path,e.caseSensitive,e.end),o=t.match(n);if(!o)return null;let i=o[0],a=i.replace(/(.)\/+$/,"$1"),l=o.slice(1);return{params:r.reduce(((e,t,n)=>{if("*"===t){let e=l[n]||"";a=i.slice(0,i.length-e.length).replace(/(.)\/+$/,"$1")}return e[t]=function(e,t){try{return decodeURIComponent(e)}catch(n){return s(!1,'The value for the URL param "'+t+'" will not be decoded because the string "'+e+'" is a malformed URL segment. This is probably due to a bad percent encoding ('+n+")."),e}}(l[n]||"",t),e}),{}),pathname:i,pathnameBase:a,pattern:e}}function P(e){try{return decodeURI(e)}catch(t){return s(!1,'The URL path "'+e+'" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent encoding ('+t+")."),e}}function R(e,t){if("/"===t)return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let n=t.endsWith("/")?t.length-1:t.length,r=e.charAt(n);return r&&"/"!==r?null:e.slice(n)||"/"}function T(e,t,n,r){return"Cannot include a '"+e+"' character in a manually specified `to."+t+"` field ["+JSON.stringify(r)+"].  Please separate it out to the `to."+n+'` field. Alternatively you may provide the full path as a string in <Link to="..."> and the router will parse it for you.'}function N(e){return e.filter(((e,t)=>0===t||e.route.path&&e.route.path.length>0))}function D(e,t,n,r){let o;void 0===r&&(r=!1),"string"==typeof e?o=p(e):(o=i({},e),u(!o.pathname||!o.pathname.includes("?"),T("?","pathname","search",o)),u(!o.pathname||!o.pathname.includes("#"),T("#","pathname","hash",o)),u(!o.search||!o.search.includes("#"),T("#","search","hash",o)));let a,l=""===e||""===o.pathname,s=l?"/":o.pathname;if(r||null==s)a=n;else{let e=t.length-1;if(s.startsWith("..")){let t=s.split("/");for(;".."===t[0];)t.shift(),e-=1;o.pathname=t.join("/")}a=e>=0?t[e]:"/"}let c=function(e,t){void 0===t&&(t="/");let{pathname:n,search:r="",hash:o=""}="string"==typeof e?p(e):e,i=n?n.startsWith("/")?n:function(e,t){let n=t.replace(/\/+$/,"").split("/");return e.split("/").forEach((e=>{".."===e?n.length>1&&n.pop():"."!==e&&n.push(e)})),n.length>1?n.join("/"):"/"}(n,t):t;return{pathname:i,search:U(r),hash:F(o)}}(o,a),f=s&&"/"!==s&&s.endsWith("/"),d=(l||"."===s)&&n.endsWith("/");return c.pathname.endsWith("/")||!f&&!d||(c.pathname+="/"),c}const M=e=>e.join("/").replace(/\/\/+/g,"/"),L=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),U=e=>e&&"?"!==e?e.startsWith("?")?e:"?"+e:"",F=e=>e&&"#"!==e?e.startsWith("#")?e:"#"+e:"";Error;class z{constructor(e,t,n,r){void 0===r&&(r=!1),this.status=e,this.statusText=t||"",this.internal=r,n instanceof Error?(this.data=n.toString(),this.error=n):this.data=n}}function I(e){return null!=e&&"number"==typeof e.status&&"string"==typeof e.statusText&&"boolean"==typeof e.internal&&"data"in e}const B=["post","put","patch","delete"],V=new Set(B),W=["get",...B],H=new Set(W),q=new Set([301,302,303,307,308]),$=new Set([307,308]),K={state:"idle",location:void 0,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0},Z={state:"idle",data:void 0,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0},G={state:"unblocked",proceed:void 0,reset:void 0,location:void 0},Q=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,Y=e=>({hasErrorBoundary:Boolean(e.hasErrorBoundary)});function J(e,t,n,r,o,i,a){let l,u;if(null!=i&&"path"!==a){l=[];for(let e of t)if(l.push(e),e.route.id===i){u=e;break}}else l=t,u=t[t.length-1];let s=D(o||".",N(l).map((e=>e.pathnameBase)),R(e.pathname,n)||e.pathname,"path"===a);return null==o&&(s.search=e.search,s.hash=e.hash),null!=o&&""!==o&&"."!==o||!u||!u.route.index||_e(s.search)||(s.search=s.search?s.search.replace(/^\?/,"?index&"):"?index"),r&&"/"!==n&&(s.pathname="/"===s.pathname?n:M([n,s.pathname])),d(s)}function X(e,t,n,r){if(!r||!function(e){return null!=e&&("formData"in e&&null!=e.formData||"body"in e&&void 0!==e.body)}(r))return{path:n};if(r.formMethod&&(o=r.formMethod,!H.has(o.toLowerCase())))return{path:n,error:de(405,{method:r.formMethod})};var o;let i,a,l=()=>({path:n,error:de(400,{type:"invalid-body"})}),s=r.formMethod||"get",c=e?s.toUpperCase():s.toLowerCase(),f=he(n);if(void 0!==r.body){if("text/plain"===r.formEncType){if(!ge(c))return l();let e="string"==typeof r.body?r.body:r.body instanceof FormData||r.body instanceof URLSearchParams?Array.from(r.body.entries()).reduce(((e,t)=>{let[n,r]=t;return""+e+n+"="+r+"\n"}),""):String(r.body);return{path:n,submission:{formMethod:c,formAction:f,formEncType:r.formEncType,formData:void 0,json:void 0,text:e}}}if("application/json"===r.formEncType){if(!ge(c))return l();try{let e="string"==typeof r.body?JSON.parse(r.body):r.body;return{path:n,submission:{formMethod:c,formAction:f,formEncType:r.formEncType,formData:void 0,json:e,text:void 0}}}catch(e){return l()}}}if(u("function"==typeof FormData,"FormData is not available in this environment"),r.formData)i=ae(r.formData),a=r.formData;else if(r.body instanceof FormData)i=ae(r.body),a=r.body;else if(r.body instanceof URLSearchParams)i=r.body,a=le(i);else if(null==r.body)i=new URLSearchParams,a=new FormData;else try{i=new URLSearchParams(r.body),a=le(i)}catch(e){return l()}let h={formMethod:c,formAction:f,formEncType:r&&r.formEncType||"application/x-www-form-urlencoded",formData:a,json:void 0,text:void 0};if(ge(h.formMethod))return{path:n,submission:h};let m=p(n);return t&&m.search&&_e(m.search)&&i.append("index",""),m.search="?"+i,{path:d(m),submission:h}}function ee(e,t,n,r,o,a,l,u,s,c,f,d,p,h){let m=h?Object.values(h)[0]:p?Object.values(p)[0]:void 0,v=e.createURL(t.location),g=e.createURL(o),b=h?Object.keys(h)[0]:void 0,w=function(e,t){let n=e;if(t){let r=e.findIndex((e=>e.route.id===t));r>=0&&(n=e.slice(0,r))}return n}(n,b).filter(((e,n)=>{if(e.route.lazy)return!0;if(null==e.route.loader)return!1;if(function(e,t,n){let r=!t||n.route.id!==t.route.id,o=void 0===e[n.route.id];return r||o}(t.loaderData,t.matches[n],e)||l.some((t=>t===e.route.id)))return!0;let o=t.matches[n],u=e;return ne(e,i({currentUrl:v,currentParams:o.params,nextUrl:g,nextParams:u.params},r,{actionResult:m,defaultShouldRevalidate:a||v.pathname+v.search===g.pathname+g.search||v.search!==g.search||te(o,u)}))})),_=[];return s.forEach(((e,o)=>{if(!n.some((t=>t.route.id===e.routeId)))return;let l=y(f,e.path,d);if(!l)return void _.push({key:o,routeId:e.routeId,path:e.path,matches:null,match:null,controller:null});let s=t.fetchers.get(o),p=xe(l,e.path),h=!1;h=!c.has(o)&&(!!u.includes(o)||(s&&"idle"!==s.state&&void 0===s.data?a:ne(p,i({currentUrl:v,currentParams:t.matches[t.matches.length-1].params,nextUrl:g,nextParams:n[n.length-1].params},r,{actionResult:m,defaultShouldRevalidate:a})))),h&&_.push({key:o,routeId:e.routeId,path:e.path,matches:l,match:p,controller:new AbortController})})),[w,_]}function te(e,t){let n=e.route.path;return e.pathname!==t.pathname||null!=n&&n.endsWith("*")&&e.params["*"]!==t.params["*"]}function ne(e,t){if(e.route.shouldRevalidate){let n=e.route.shouldRevalidate(t);if("boolean"==typeof n)return n}return t.defaultShouldRevalidate}async function re(e,t,n){if(!e.lazy)return;let r=await e.lazy();if(!e.lazy)return;let o=n[e.id];u(o,"No route found in manifest");let a={};for(let e in r){let t=void 0!==o[e]&&"hasErrorBoundary"!==e;s(!t,'Route "'+o.id+'" has a static property "'+e+'" defined but its lazy function is also returning a value for this property. The lazy route property "'+e+'" will be ignored.'),t||m.has(e)||(a[e]=r[e])}Object.assign(o,a),Object.assign(o,i({},t(o),{lazy:void 0}))}async function oe(e,t,n,r,o,i,a,l){let s,c,f;void 0===l&&(l={});let d=e=>{let r,o=new Promise(((e,t)=>r=t));return f=()=>r(),t.signal.addEventListener("abort",f),Promise.race([e({request:t,params:n.params,context:l.requestContext}),o])};try{let r=n.route[e];if(n.route.lazy)if(r)c=(await Promise.all([d(r),re(n.route,i,o)]))[0];else{if(await re(n.route,i,o),r=n.route[e],!r){if("action"===e){let e=new URL(t.url),r=e.pathname+e.search;throw de(405,{method:t.method,pathname:r,routeId:n.route.id})}return{type:h.data,data:void 0}}c=await d(r)}else{if(!r){let e=new URL(t.url);throw de(404,{pathname:e.pathname+e.search})}c=await d(r)}u(void 0!==c,"You defined "+("action"===e?"an action":"a loader")+' for route "'+n.route.id+"\" but didn't return anything from your `"+e+"` function. Please return a value or `null`.")}catch(e){s=h.error,c=e}finally{f&&t.signal.removeEventListener("abort",f)}if(null!=(p=c)&&"number"==typeof p.status&&"string"==typeof p.statusText&&"object"==typeof p.headers&&void 0!==p.body){let e,o=c.status;if(q.has(o)){let e=c.headers.get("Location");if(u(e,"Redirects returned/thrown from loaders/actions must have a Location header"),Q.test(e)){if(!l.isStaticRequest){let n=new URL(t.url),r=e.startsWith("//")?new URL(n.protocol+e):new URL(e),o=null!=R(r.pathname,a);r.origin===n.origin&&o&&(e=r.pathname+r.search+r.hash)}}else e=J(new URL(t.url),r.slice(0,r.indexOf(n)+1),a,!0,e);if(l.isStaticRequest)throw c.headers.set("Location",e),c;return{type:h.redirect,status:o,location:e,revalidate:null!==c.headers.get("X-Remix-Revalidate")}}if(l.isRouteRequest)throw{type:s||h.data,response:c};let i=c.headers.get("Content-Type");return e=i&&/\bapplication\/json\b/.test(i)?await c.json():await c.text(),s===h.error?{type:s,error:new z(o,c.statusText,e),headers:c.headers}:{type:h.data,data:e,statusCode:c.status,headers:c.headers}}var p,m,v;return s===h.error?{type:s,error:c}:function(e){let t=e;return t&&"object"==typeof t&&"object"==typeof t.data&&"function"==typeof t.subscribe&&"function"==typeof t.cancel&&"function"==typeof t.resolveData}(c)?{type:h.deferred,deferredData:c,statusCode:null==(m=c.init)?void 0:m.status,headers:(null==(v=c.init)?void 0:v.headers)&&new Headers(c.init.headers)}:{type:h.data,data:c}}function ie(e,t,n,r){let o=e.createURL(he(t)).toString(),i={signal:n};if(r&&ge(r.formMethod)){let{formMethod:e,formEncType:t}=r;i.method=e.toUpperCase(),"application/json"===t?(i.headers=new Headers({"Content-Type":t}),i.body=JSON.stringify(r.json)):"text/plain"===t?i.body=r.text:"application/x-www-form-urlencoded"===t&&r.formData?i.body=ae(r.formData):i.body=r.formData}return new Request(o,i)}function ae(e){let t=new URLSearchParams;for(let[n,r]of e.entries())t.append(n,"string"==typeof r?r:r.name);return t}function le(e){let t=new FormData;for(let[n,r]of e.entries())t.append(n,r);return t}function ue(e,t,n,r,o,a,l,s){let{loaderData:c,errors:f}=function(e,t,n,r,o){let i,a={},l=null,s=!1,c={};return n.forEach(((n,f)=>{let d=t[f].route.id;if(u(!ye(n),"Cannot handle redirect results in processLoaderData"),ve(n)){let t=ce(e,d),o=n.error;r&&(o=Object.values(r)[0],r=void 0),l=l||{},null==l[t.route.id]&&(l[t.route.id]=o),a[d]=void 0,s||(s=!0,i=I(n.error)?n.error.status:500),n.headers&&(c[d]=n.headers)}else me(n)?(o.set(d,n.deferredData),a[d]=n.deferredData.data):a[d]=n.data,null==n.statusCode||200===n.statusCode||s||(i=n.statusCode),n.headers&&(c[d]=n.headers)})),r&&(l=r,a[Object.keys(r)[0]]=void 0),{loaderData:a,errors:l,statusCode:i||200,loaderHeaders:c}}(t,n,r,o,s);for(let t=0;t<a.length;t++){let{key:n,match:r,controller:o}=a[t];u(void 0!==l&&void 0!==l[t],"Did not find corresponding fetcher result");let s=l[t];if(!o||!o.signal.aborted)if(ve(s)){let t=ce(e.matches,null==r?void 0:r.route.id);f&&f[t.route.id]||(f=i({},f,{[t.route.id]:s.error})),e.fetchers.delete(n)}else if(ye(s))u(!1,"Unhandled fetcher revalidation redirect");else if(me(s))u(!1,"Unhandled fetcher deferred data");else{let t=ke(s.data);e.fetchers.set(n,t)}}return{loaderData:c,errors:f}}function se(e,t,n,r){let o=i({},t);for(let i of n){let n=i.route.id;if(t.hasOwnProperty(n)?void 0!==t[n]&&(o[n]=t[n]):void 0!==e[n]&&i.route.loader&&(o[n]=e[n]),r&&r.hasOwnProperty(n))break}return o}function ce(e,t){let n=t?e.slice(0,e.findIndex((e=>e.route.id===t))+1):[...e];return n.reverse().find((e=>!0===e.route.hasErrorBoundary))||e[0]}function fe(e){let t=e.find((e=>e.index||!e.path||"/"===e.path))||{id:"__shim-error-route__"};return{matches:[{params:{},pathname:"",pathnameBase:"",route:t}],route:t}}function de(e,t){let{pathname:n,routeId:r,method:o,type:i}=void 0===t?{}:t,a="Unknown Server Error",l="Unknown @remix-run/router error";return 400===e?(a="Bad Request",o&&n&&r?l="You made a "+o+' request to "'+n+'" but did not provide a `loader` for route "'+r+'", so there is no way to handle the request.':"defer-action"===i?l="defer() is not supported in actions":"invalid-body"===i&&(l="Unable to encode submission body")):403===e?(a="Forbidden",l='Route "'+r+'" does not match URL "'+n+'"'):404===e?(a="Not Found",l='No route matches URL "'+n+'"'):405===e&&(a="Method Not Allowed",o&&n&&r?l="You made a "+o.toUpperCase()+' request to "'+n+'" but did not provide an `action` for route "'+r+'", so there is no way to handle the request.':o&&(l='Invalid request method "'+o.toUpperCase()+'"')),new z(e||500,a,new Error(l),!0)}function pe(e){for(let t=e.length-1;t>=0;t--){let n=e[t];if(ye(n))return{result:n,idx:t}}}function he(e){return d(i({},"string"==typeof e?p(e):e,{hash:""}))}function me(e){return e.type===h.deferred}function ve(e){return e.type===h.error}function ye(e){return(e&&e.type)===h.redirect}function ge(e){return V.has(e.toLowerCase())}async function be(e,t,n,r,o,i){for(let a=0;a<n.length;a++){let l=n[a],s=t[a];if(!s)continue;let c=e.find((e=>e.route.id===s.route.id)),f=null!=c&&!te(c,s)&&void 0!==(i&&i[s.route.id]);if(me(l)&&(o||f)){let e=r[a];u(e,"Expected an AbortSignal for revalidating fetcher deferred result"),await we(l,e,o).then((e=>{e&&(n[a]=e||n[a])}))}}}async function we(e,t,n){if(void 0===n&&(n=!1),!await e.deferredData.resolveData(t)){if(n)try{return{type:h.data,data:e.deferredData.unwrappedData}}catch(e){return{type:h.error,error:e}}return{type:h.data,data:e.deferredData.data}}}function _e(e){return new URLSearchParams(e).getAll("index").some((e=>""===e))}function xe(e,t){let n="string"==typeof t?p(t).search:t.search;if(e[e.length-1].route.index&&_e(n||""))return e[e.length-1];let r=N(e);return r[r.length-1]}function Se(e){let{formMethod:t,formAction:n,formEncType:r,text:o,formData:i,json:a}=e;if(t&&n&&r)return null!=o?{formMethod:t,formAction:n,formEncType:r,formData:void 0,json:void 0,text:o}:null!=i?{formMethod:t,formAction:n,formEncType:r,formData:i,json:void 0,text:void 0}:void 0!==a?{formMethod:t,formAction:n,formEncType:r,formData:void 0,json:a,text:void 0}:void 0}function Ae(e,t){return t?{state:"loading",location:e,formMethod:t.formMethod,formAction:t.formAction,formEncType:t.formEncType,formData:t.formData,json:t.json,text:t.text}:{state:"loading",location:e,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0}}function Ee(e,t){return e?{state:"loading",formMethod:e.formMethod,formAction:e.formAction,formEncType:e.formEncType,formData:e.formData,json:e.json,text:e.text,data:t," _hasFetcherDoneAnything ":!0}:{state:"loading",formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0,data:t," _hasFetcherDoneAnything ":!0}}function ke(e){return{state:"idle",formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0,data:e," _hasFetcherDoneAnything ":!0}}function Ce(){return Ce=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Ce.apply(this,arguments)}Symbol("deferred");const Oe=r.createContext(null),je=r.createContext(null),Pe=r.createContext(null),Re=r.createContext(null),Te=r.createContext({outlet:null,matches:[],isDataRoute:!1}),Ne=r.createContext(null);function De(){return null!=r.useContext(Re)}function Me(){return De()||u(!1),r.useContext(Re).location}function Le(e){r.useContext(Pe).static||r.useLayoutEffect(e)}function Ue(){let{isDataRoute:e}=r.useContext(Te);return e?function(){let{router:e}=function(e){let t=r.useContext(Oe);return t||u(!1),t}($e.UseNavigateStable),t=Ge(Ke.UseNavigateStable),n=r.useRef(!1);Le((()=>{n.current=!0}));let o=r.useCallback((function(r,o){void 0===o&&(o={}),n.current&&("number"==typeof r?e.navigate(r):e.navigate(r,Ce({fromRouteId:t},o)))}),[e,t]);return o}():function(){De()||u(!1);let e=r.useContext(Oe),{basename:t,navigator:n}=r.useContext(Pe),{matches:o}=r.useContext(Te),{pathname:i}=Me(),a=JSON.stringify(N(o).map((e=>e.pathnameBase))),l=r.useRef(!1);Le((()=>{l.current=!0}));let s=r.useCallback((function(r,o){if(void 0===o&&(o={}),!l.current)return;if("number"==typeof r)return void n.go(r);let u=D(r,JSON.parse(a),i,"path"===o.relative);null==e&&"/"!==t&&(u.pathname="/"===u.pathname?t:M([t,u.pathname])),(o.replace?n.replace:n.push)(u,o.state,o)}),[t,n,a,i,e]);return s}()}const Fe=r.createContext(null);function ze(){let{matches:e}=r.useContext(Te),t=e[e.length-1];return t?t.params:{}}function Ie(e,t){let{relative:n}=void 0===t?{}:t,{matches:o}=r.useContext(Te),{pathname:i}=Me(),a=JSON.stringify(N(o).map((e=>e.pathnameBase)));return r.useMemo((()=>D(e,JSON.parse(a),i,"path"===n)),[e,a,i,n])}function Be(t,n,o){De()||u(!1);let{navigator:i}=r.useContext(Pe),{matches:a}=r.useContext(Te),l=a[a.length-1],s=l?l.params:{},c=(l&&l.pathname,l?l.pathnameBase:"/");l&&l.route;let f,d=Me();if(n){var h;let e="string"==typeof n?p(n):n;"/"===c||(null==(h=e.pathname)?void 0:h.startsWith(c))||u(!1),f=e}else f=d;let m=f.pathname||"/",v=y(t,{pathname:"/"===c?m:m.slice(c.length)||"/"}),g=function(e,t,n){var o;if(void 0===t&&(t=[]),void 0===n&&(n=null),null==e){var i;if(null==(i=n)||!i.errors)return null;e=n.matches}let a=e,l=null==(o=n)?void 0:o.errors;if(null!=l){let e=a.findIndex((e=>e.route.id&&(null==l?void 0:l[e.route.id])));e>=0||u(!1),a=a.slice(0,Math.min(a.length,e+1))}return a.reduceRight(((e,o,i)=>{let u=o.route.id?null==l?void 0:l[o.route.id]:null,s=null;n&&(s=o.route.errorElement||We);let c=t.concat(a.slice(0,i+1)),f=()=>{let t;return t=u?s:o.route.Component?r.createElement(o.route.Component,null):o.route.element?o.route.element:e,r.createElement(qe,{match:o,routeContext:{outlet:e,matches:c,isDataRoute:null!=n},children:t})};return n&&(o.route.ErrorBoundary||o.route.errorElement||0===i)?r.createElement(He,{location:n.location,revalidation:n.revalidation,component:s,error:u,children:f(),routeContext:{outlet:null,matches:c,isDataRoute:!0}}):f()}),null)}(v&&v.map((e=>Object.assign({},e,{params:Object.assign({},s,e.params),pathname:M([c,i.encodeLocation?i.encodeLocation(e.pathname).pathname:e.pathname]),pathnameBase:"/"===e.pathnameBase?c:M([c,i.encodeLocation?i.encodeLocation(e.pathnameBase).pathname:e.pathnameBase])}))),a,o);return n&&g?r.createElement(Re.Provider,{value:{location:Ce({pathname:"/",search:"",hash:"",state:null,key:"default"},f),navigationType:e.Pop}},g):g}function Ve(){let e=function(){var e;let t=r.useContext(Ne),n=Ze(Ke.UseRouteError),o=Ge(Ke.UseRouteError);return t||(null==(e=n.errors)?void 0:e[o])}(),t=I(e)?e.status+" "+e.statusText:e instanceof Error?e.message:JSON.stringify(e),n=e instanceof Error?e.stack:null,o={padding:"0.5rem",backgroundColor:"rgba(200,200,200, 0.5)"};return r.createElement(r.Fragment,null,r.createElement("h2",null,"Unexpected Application Error!"),r.createElement("h3",{style:{fontStyle:"italic"}},t),n?r.createElement("pre",{style:o},n):null,null)}const We=r.createElement(Ve,null);class He extends r.Component{constructor(e){super(e),this.state={location:e.location,revalidation:e.revalidation,error:e.error}}static getDerivedStateFromError(e){return{error:e}}static getDerivedStateFromProps(e,t){return t.location!==e.location||"idle"!==t.revalidation&&"idle"===e.revalidation?{error:e.error,location:e.location,revalidation:e.revalidation}:{error:e.error||t.error,location:t.location,revalidation:e.revalidation||t.revalidation}}componentDidCatch(e,t){console.error("React Router caught the following error during render",e,t)}render(){return this.state.error?r.createElement(Te.Provider,{value:this.props.routeContext},r.createElement(Ne.Provider,{value:this.state.error,children:this.props.component})):this.props.children}}function qe(e){let{routeContext:t,match:n,children:o}=e,i=r.useContext(Oe);return i&&i.static&&i.staticContext&&(n.route.errorElement||n.route.ErrorBoundary)&&(i.staticContext._deepestRenderedBoundaryId=n.route.id),r.createElement(Te.Provider,{value:t},o)}var $e,Ke;function Ze(e){let t=r.useContext(je);return t||u(!1),t}function Ge(e){let t=function(e){let t=r.useContext(Te);return t||u(!1),t}(),n=t.matches[t.matches.length-1];return n.route.id||u(!1),n.route.id}function Qe(){let e=Ze(Ke.UseLoaderData),t=Ge(Ke.UseLoaderData);if(!e.errors||null==e.errors[t])return e.loaderData[t];console.error("You cannot `useLoaderData` in an errorElement (routeId: "+t+")")}!function(e){e.UseBlocker="useBlocker",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate"}($e||($e={})),function(e){e.UseBlocker="useBlocker",e.UseLoaderData="useLoaderData",e.UseActionData="useActionData",e.UseRouteError="useRouteError",e.UseNavigation="useNavigation",e.UseRouteLoaderData="useRouteLoaderData",e.UseMatches="useMatches",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e.UseRouteId="useRouteId"}(Ke||(Ke={}));const Ye=o.startTransition;function Je(e){let{fallbackElement:t,router:n,future:o}=e,[i,a]=r.useState(n.state),{v7_startTransition:l}=o||{},u=r.useCallback((e=>{l&&Ye?Ye((()=>a(e))):a(e)}),[a,l]);r.useLayoutEffect((()=>n.subscribe(u)),[n,u]);let s=r.useMemo((()=>({createHref:n.createHref,encodeLocation:n.encodeLocation,go:e=>n.navigate(e),push:(e,t,r)=>n.navigate(e,{state:t,preventScrollReset:null==r?void 0:r.preventScrollReset}),replace:(e,t,r)=>n.navigate(e,{replace:!0,state:t,preventScrollReset:null==r?void 0:r.preventScrollReset})})),[n]),c=n.basename||"/",f=r.useMemo((()=>({router:n,navigator:s,static:!1,basename:c})),[n,s,c]);return r.createElement(r.Fragment,null,r.createElement(Oe.Provider,{value:f},r.createElement(je.Provider,{value:i},r.createElement(tt,{basename:c,location:i.location,navigationType:i.historyAction,navigator:s},i.initialized?r.createElement(Xe,{routes:n.routes,state:i}):t))),null)}function Xe(e){let{routes:t,state:n}=e;return Be(t,void 0,n)}function et(e){return function(e){let t=r.useContext(Te).outlet;return t?r.createElement(Fe.Provider,{value:e},t):t}(e.context)}function tt(t){let{basename:n="/",children:o=null,location:i,navigationType:a=e.Pop,navigator:l,static:s=!1}=t;De()&&u(!1);let c=n.replace(/^\/*/,"/"),f=r.useMemo((()=>({basename:c,navigator:l,static:s})),[c,l,s]);"string"==typeof i&&(i=p(i));let{pathname:d="/",search:h="",hash:m="",state:v=null,key:y="default"}=i,g=r.useMemo((()=>{let e=R(d,c);return null==e?null:{location:{pathname:e,search:h,hash:m,state:v,key:y},navigationType:a}}),[c,d,h,m,v,y,a]);return null==g?null:r.createElement(Pe.Provider,{value:f},r.createElement(Re.Provider,{children:o,value:g}))}var nt;function rt(){return rt=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},rt.apply(this,arguments)}function ot(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}!function(e){e[e.pending=0]="pending",e[e.success=1]="success",e[e.error=2]="error"}(nt||(nt={})),new Promise((()=>{})),r.Component,new Set(["application/x-www-form-urlencoded","multipart/form-data","text/plain"]);const it=["onClick","relative","reloadDocument","replace","state","target","to","preventScrollReset"],at=["aria-current","caseSensitive","className","end","style","to","children"];function lt(e){if(!e)return null;let t=Object.entries(e),n={};for(let[e,r]of t)if(r&&"RouteErrorResponse"===r.__type)n[e]=new z(r.status,r.statusText,r.data,!0===r.internal);else if(r&&"Error"===r.__type){if(r.__subType){let t=window[r.__subType];if("function"==typeof t)try{let o=new t(r.message);o.stack="",n[e]=o}catch(e){}}if(null==n[e]){let t=new Error(r.message);t.stack="",n[e]=t}}else n[e]=r;return n}o.startTransition;const ut="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement,st=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,ct=r.forwardRef((function(e,t){let n,{onClick:o,relative:i,reloadDocument:a,replace:l,state:s,target:c,to:f,preventScrollReset:p}=e,h=ot(e,it),{basename:m}=r.useContext(Pe),v=!1;if("string"==typeof f&&st.test(f)&&(n=f,ut))try{let e=new URL(window.location.href),t=f.startsWith("//")?new URL(e.protocol+f):new URL(f),n=R(t.pathname,m);t.origin===e.origin&&null!=n?f=n+t.search+t.hash:v=!0}catch(e){}let y=function(e,t){let{relative:n}=void 0===t?{}:t;De()||u(!1);let{basename:o,navigator:i}=r.useContext(Pe),{hash:a,pathname:l,search:s}=Ie(e,{relative:n}),c=l;return"/"!==o&&(c="/"===l?o:M([o,l])),i.createHref({pathname:c,search:s,hash:a})}(f,{relative:i}),g=function(e,t){let{target:n,replace:o,state:i,preventScrollReset:a,relative:l}=void 0===t?{}:t,u=Ue(),s=Me(),c=Ie(e,{relative:l});return r.useCallback((t=>{if(function(e,t){return!(0!==e.button||t&&"_self"!==t||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e))}(t,n)){t.preventDefault();let n=void 0!==o?o:d(s)===d(c);u(e,{replace:n,state:i,preventScrollReset:a,relative:l})}}),[s,u,c,o,i,n,e,a,l])}(f,{replace:l,state:s,target:c,preventScrollReset:p,relative:i});return r.createElement("a",rt({},h,{href:n||y,onClick:v||a?o:function(e){o&&o(e),e.defaultPrevented||g(e)},ref:t,target:c}))})),ft=r.forwardRef((function(e,t){let{"aria-current":n="page",caseSensitive:o=!1,className:i="",end:a=!1,style:l,to:u,children:s}=e,c=ot(e,at),f=Ie(u,{relative:c.relative}),d=Me(),p=r.useContext(je),{navigator:h}=r.useContext(Pe),m=h.encodeLocation?h.encodeLocation(f).pathname:f.pathname,v=d.pathname,y=p&&p.navigation&&p.navigation.location?p.navigation.location.pathname:null;o||(v=v.toLowerCase(),y=y?y.toLowerCase():null,m=m.toLowerCase());let g,b=v===m||!a&&v.startsWith(m)&&"/"===v.charAt(m.length),w=null!=y&&(y===m||!a&&y.startsWith(m)&&"/"===y.charAt(m.length)),_=b?n:void 0;g="function"==typeof i?i({isActive:b,isPending:w}):[i,b?"active":null,w?"pending":null].filter(Boolean).join(" ");let x="function"==typeof l?l({isActive:b,isPending:w}):l;return r.createElement(ct,rt({},c,{"aria-current":_,className:g,ref:t,style:x,to:u}),"function"==typeof s?s({isActive:b,isPending:w}):s)}));var dt,pt;(function(e){e.UseScrollRestoration="useScrollRestoration",e.UseSubmit="useSubmit",e.UseSubmitFetcher="useSubmitFetcher",e.UseFetcher="useFetcher"})(dt||(dt={})),function(e){e.UseFetchers="useFetchers",e.UseScrollRestoration="useScrollRestoration"}(pt||(pt={}));var ht=a(3379),mt=a.n(ht),vt=a(7795),yt=a.n(vt),gt=a(569),bt=a.n(gt),wt=a(3565),_t=a.n(wt),xt=a(9216),St=a.n(xt),At=a(4589),Et=a.n(At),kt=a(88),Ct={};Ct.styleTagTransform=Et(),Ct.setAttributes=_t(),Ct.insert=bt().bind(null,"head"),Ct.domAPI=yt(),Ct.insertStyleElement=St(),mt()(kt.Z,Ct);var Ot=kt.Z&&kt.Z.locals?kt.Z.locals:void 0,jt=a(6436),Pt={};Pt.styleTagTransform=Et(),Pt.setAttributes=_t(),Pt.insert=bt().bind(null,"head"),Pt.domAPI=yt(),Pt.insertStyleElement=St(),mt()(jt.Z,Pt);var Rt=jt.Z&&jt.Z.locals?jt.Z.locals:void 0,Tt=/d{1,4}|D{3,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\1?|W{1,2}|[LlopSZN]|"[^"]*"|'[^']*'/g,Nt=/\b(?:[A-Z]{1,3}[A-Z][TC])(?:[-+]\d{4})?|((?:Australian )?(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time)\b/g,Dt=/[^-+\dA-Z]/g;function Mt(e,t,n,r){if(1!==arguments.length||"string"!=typeof e||/\d/.test(e)||(t=e,e=void 0),(e=e||0===e?e:new Date)instanceof Date||(e=new Date(e)),isNaN(e))throw TypeError("Invalid date");var o=(t=String(Lt[t]||t||Lt.default)).slice(0,4);"UTC:"!==o&&"GMT:"!==o||(t=t.slice(4),n=!0,"GMT:"===o&&(r=!0));var i=function(){return n?"getUTC":"get"},a=function(){return e[i()+"Date"]()},l=function(){return e[i()+"Day"]()},u=function(){return e[i()+"Month"]()},s=function(){return e[i()+"FullYear"]()},c=function(){return e[i()+"Hours"]()},f=function(){return e[i()+"Minutes"]()},d=function(){return e[i()+"Seconds"]()},p=function(){return e[i()+"Milliseconds"]()},h=function(){return n?0:e.getTimezoneOffset()},m=function(){return It(e)},v={d:function(){return a()},dd:function(){return Ft(a())},ddd:function(){return Ut.dayNames[l()]},DDD:function(){return zt({y:s(),m:u(),d:a(),_:i(),dayName:Ut.dayNames[l()],short:!0})},dddd:function(){return Ut.dayNames[l()+7]},DDDD:function(){return zt({y:s(),m:u(),d:a(),_:i(),dayName:Ut.dayNames[l()+7]})},m:function(){return u()+1},mm:function(){return Ft(u()+1)},mmm:function(){return Ut.monthNames[u()]},mmmm:function(){return Ut.monthNames[u()+12]},yy:function(){return String(s()).slice(2)},yyyy:function(){return Ft(s(),4)},h:function(){return c()%12||12},hh:function(){return Ft(c()%12||12)},H:function(){return c()},HH:function(){return Ft(c())},M:function(){return f()},MM:function(){return Ft(f())},s:function(){return d()},ss:function(){return Ft(d())},l:function(){return Ft(p(),3)},L:function(){return Ft(Math.floor(p()/10))},t:function(){return c()<12?Ut.timeNames[0]:Ut.timeNames[1]},tt:function(){return c()<12?Ut.timeNames[2]:Ut.timeNames[3]},T:function(){return c()<12?Ut.timeNames[4]:Ut.timeNames[5]},TT:function(){return c()<12?Ut.timeNames[6]:Ut.timeNames[7]},Z:function(){return r?"GMT":n?"UTC":Vt(e)},o:function(){return(h()>0?"-":"+")+Ft(100*Math.floor(Math.abs(h())/60)+Math.abs(h())%60,4)},p:function(){return(h()>0?"-":"+")+Ft(Math.floor(Math.abs(h())/60),2)+":"+Ft(Math.floor(Math.abs(h())%60),2)},S:function(){return["th","st","nd","rd"][a()%10>3?0:(a()%100-a()%10!=10)*a()%10]},W:function(){return m()},WW:function(){return Ft(m())},N:function(){return Bt(e)}};return t.replace(Tt,(function(e){return e in v?v[e]():e.slice(1,e.length-1)}))}var Lt={default:"ddd mmm dd yyyy HH:MM:ss",shortDate:"m/d/yy",paddedShortDate:"mm/dd/yyyy",mediumDate:"mmm d, yyyy",longDate:"mmmm d, yyyy",fullDate:"dddd, mmmm d, yyyy",shortTime:"h:MM TT",mediumTime:"h:MM:ss TT",longTime:"h:MM:ss TT Z",isoDate:"yyyy-mm-dd",isoTime:"HH:MM:ss",isoDateTime:"yyyy-mm-dd'T'HH:MM:sso",isoUtcDateTime:"UTC:yyyy-mm-dd'T'HH:MM:ss'Z'",expiresHeaderFormat:"ddd, dd mmm yyyy HH:MM:ss Z"},Ut={dayNames:["Sun","Mon","Tue","Wed","Thu","Fri","Sat","Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],monthNames:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec","January","February","March","April","May","June","July","August","September","October","November","December"],timeNames:["a","p","am","pm","A","P","AM","PM"]},Ft=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:2;return String(e).padStart(t,"0")},zt=function(e){var t=e.y,n=e.m,r=e.d,o=e._,i=e.dayName,a=e.short,l=void 0!==a&&a,u=new Date,s=new Date;s.setDate(s[o+"Date"]()-1);var c=new Date;return c.setDate(c[o+"Date"]()+1),u[o+"FullYear"]()===t&&u[o+"Month"]()===n&&u[o+"Date"]()===r?l?"Tdy":"Today":s[o+"FullYear"]()===t&&s[o+"Month"]()===n&&s[o+"Date"]()===r?l?"Ysd":"Yesterday":c[o+"FullYear"]()===t&&c[o+"Month"]()===n&&c[o+"Date"]()===r?l?"Tmw":"Tomorrow":i},It=function(e){var t=new Date(e.getFullYear(),e.getMonth(),e.getDate());t.setDate(t.getDate()-(t.getDay()+6)%7+3);var n=new Date(t.getFullYear(),0,4);n.setDate(n.getDate()-(n.getDay()+6)%7+3);var r=t.getTimezoneOffset()-n.getTimezoneOffset();t.setHours(t.getHours()-r);var o=(t-n)/6048e5;return 1+Math.floor(o)},Bt=function(e){var t=e.getDay();return 0===t&&(t=7),t},Vt=function(e){return(String(e).match(Nt)||[""]).pop().replace(Dt,"").replace(/GMT\+0000/g,"UTC")};function Wt(e){var n=e.data,r=e.children,o=e.index,i=Ue(),a=ze();return(0,t.jsx)(t.Fragment,{children:(0,t.jsxs)("div",{onClick:function(){return i("forecast-item/"+o)},className:String(Rt.container).concat(" ",Rt["time-"+Mt(n.dt_txt,"HH")]," ",a.id==o&&Rt.active),children:[(0,t.jsx)("div",{className:Rt.date,children:Mt(1e3*n.dt,"ddd dd")}),(0,t.jsx)("div",{className:Rt.time,children:Mt(1e3*n.dt,"HH:MM")}),(0,t.jsxs)("div",{className:Rt.temperature,children:[0<n.main.temp?"+"+n.main.temp:"-"+n.main.temp," ℃"]}),(0,t.jsx)("div",{children:r&&r})]})})}var Ht=a(4295),qt={};qt.styleTagTransform=Et(),qt.setAttributes=_t(),qt.insert=bt().bind(null,"head"),qt.domAPI=yt(),qt.insertStyleElement=St(),mt()(Ht.Z,qt);var $t=Ht.Z&&Ht.Z.locals?Ht.Z.locals:void 0,Kt=a(2134),Zt=a.n(Kt),Gt=a(1688),Qt=a(2798),Yt=a(3935);let Jt=function(e){e()};const Xt=()=>Jt,en=Symbol.for("react-redux-context"),tn="undefined"!=typeof globalThis?globalThis:{};function nn(){var e;if(!r.createContext)return{};const t=null!=(e=tn[en])?e:tn[en]=new Map;let n=t.get(r.createContext);return n||(n=r.createContext(null),t.set(r.createContext,n)),n}const rn=nn();function on(e=rn){return function(){return(0,r.useContext)(e)}}const an=on(),ln=()=>{throw new Error("uSES not initialized!")};let un=ln;const sn=(e,t)=>e===t;function cn(e=rn){const t=e===rn?an:on(e);return function(e,n={}){const{equalityFn:o=sn,stabilityCheck:i,noopCheck:a}="function"==typeof n?{equalityFn:n}:n,{store:l,subscription:u,getServerState:s,stabilityCheck:c,noopCheck:f}=t(),d=((0,r.useRef)(!0),(0,r.useCallback)({[e.name](t){return e(t)}}[e.name],[e,c,i])),p=un(u.addNestedSub,l.getState,s||l.getState,d,o);return(0,r.useDebugValue)(p),p}}const fn=cn();function dn(){return dn=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},dn.apply(this,arguments)}function pn(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}var hn=a(8679),mn=a.n(hn),vn=a(2973);const yn=["initMapStateToProps","initMapDispatchToProps","initMergeProps"];function gn(e,t,n,r,{areStatesEqual:o,areOwnPropsEqual:i,areStatePropsEqual:a}){let l,u,s,c,f,d=!1;return function(p,h){return d?function(d,p){const h=!i(p,u),m=!o(d,l,p,u);return l=d,u=p,h&&m?(s=e(l,u),t.dependsOnOwnProps&&(c=t(r,u)),f=n(s,c,u),f):h?(e.dependsOnOwnProps&&(s=e(l,u)),t.dependsOnOwnProps&&(c=t(r,u)),f=n(s,c,u),f):m?function(){const t=e(l,u),r=!a(t,s);return s=t,r&&(f=n(s,c,u)),f}():f}(p,h):(l=p,u=h,s=e(l,u),c=t(r,u),f=n(s,c,u),d=!0,f)}}function bn(e){return function(t){const n=e(t);function r(){return n}return r.dependsOnOwnProps=!1,r}}function wn(e){return e.dependsOnOwnProps?Boolean(e.dependsOnOwnProps):1!==e.length}function _n(e,t){return function(t,{displayName:n}){const r=function(e,t){return r.dependsOnOwnProps?r.mapToProps(e,t):r.mapToProps(e,void 0)};return r.dependsOnOwnProps=!0,r.mapToProps=function(t,n){r.mapToProps=e,r.dependsOnOwnProps=wn(e);let o=r(t,n);return"function"==typeof o&&(r.mapToProps=o,r.dependsOnOwnProps=wn(o),o=r(t,n)),o},r}}function xn(e,t){return(n,r)=>{throw new Error(`Invalid value of type ${typeof e} for ${t} argument when connecting component ${r.wrappedComponentName}.`)}}function Sn(e,t,n){return dn({},n,e,t)}const An={notify(){},get:()=>[]};function En(e,t){let n,r=An;function o(){a.onStateChange&&a.onStateChange()}function i(){n||(n=t?t.addNestedSub(o):e.subscribe(o),r=function(){const e=Xt();let t=null,n=null;return{clear(){t=null,n=null},notify(){e((()=>{let e=t;for(;e;)e.callback(),e=e.next}))},get(){let e=[],n=t;for(;n;)e.push(n),n=n.next;return e},subscribe(e){let r=!0,o=n={callback:e,next:null,prev:n};return o.prev?o.prev.next=o:t=o,function(){r&&null!==t&&(r=!1,o.next?o.next.prev=o.prev:n=o.prev,o.prev?o.prev.next=o.next:t=o.next)}}}}())}const a={addNestedSub:function(e){return i(),r.subscribe(e)},notifyNestedSubs:function(){r.notify()},handleChangeWrapper:o,isSubscribed:function(){return Boolean(n)},trySubscribe:i,tryUnsubscribe:function(){n&&(n(),n=void 0,r.clear(),r=An)},getListeners:()=>r};return a}const kn="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?r.useLayoutEffect:r.useEffect;function Cn(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function On(e,t){if(Cn(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;const n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(let r=0;r<n.length;r++)if(!Object.prototype.hasOwnProperty.call(t,n[r])||!Cn(e[n[r]],t[n[r]]))return!1;return!0}const jn=["reactReduxForwardedRef"];let Pn=ln;const Rn=[null,null];function Tn(e,t,n,r,o,i){e.current=r,n.current=!1,o.current&&(o.current=null,i())}function Nn(e,t){return e===t}var Dn,Mn=function(e,t,n,{pure:o,areStatesEqual:i=Nn,areOwnPropsEqual:a=On,areStatePropsEqual:l=On,areMergedPropsEqual:u=On,forwardRef:s=!1,context:c=rn}={}){const f=c,d=function(e){return e?"function"==typeof e?_n(e):xn(e,"mapStateToProps"):bn((()=>({})))}(e),p=function(e){return e&&"object"==typeof e?bn((t=>function(e,t){const n={};for(const r in e){const o=e[r];"function"==typeof o&&(n[r]=(...e)=>t(o(...e)))}return n}(e,t))):e?"function"==typeof e?_n(e):xn(e,"mapDispatchToProps"):bn((e=>({dispatch:e})))}(t),h=function(e){return e?"function"==typeof e?function(e){return function(t,{displayName:n,areMergedPropsEqual:r}){let o,i=!1;return function(t,n,a){const l=e(t,n,a);return i?r(l,o)||(o=l):(i=!0,o=l),o}}}(e):xn(e,"mergeProps"):()=>Sn}(n),m=Boolean(e);return e=>{const t=e.displayName||e.name||"Component",n=`Connect(${t})`,o={shouldHandleStateChanges:m,displayName:n,wrappedComponentName:t,WrappedComponent:e,initMapStateToProps:d,initMapDispatchToProps:p,initMergeProps:h,areStatesEqual:i,areStatePropsEqual:l,areOwnPropsEqual:a,areMergedPropsEqual:u};function c(t){const[n,i,a]=r.useMemo((()=>{const{reactReduxForwardedRef:e}=t,n=pn(t,jn);return[t.context,e,n]}),[t]),l=r.useMemo((()=>n&&n.Consumer&&(0,vn.isContextConsumer)(r.createElement(n.Consumer,null))?n:f),[n,f]),u=r.useContext(l),s=Boolean(t.store)&&Boolean(t.store.getState)&&Boolean(t.store.dispatch),c=Boolean(u)&&Boolean(u.store),d=s?t.store:u.store,p=c?u.getServerState:d.getState,h=r.useMemo((()=>function(e,t){let{initMapStateToProps:n,initMapDispatchToProps:r,initMergeProps:o}=t,i=pn(t,yn);return gn(n(e,i),r(e,i),o(e,i),e,i)}(d.dispatch,o)),[d]),[v,y]=r.useMemo((()=>{if(!m)return Rn;const e=En(d,s?void 0:u.subscription),t=e.notifyNestedSubs.bind(e);return[e,t]}),[d,s,u]),g=r.useMemo((()=>s?u:dn({},u,{subscription:v})),[s,u,v]),b=r.useRef(),w=r.useRef(a),_=r.useRef(),x=r.useRef(!1),S=(r.useRef(!1),r.useRef(!1)),A=r.useRef();kn((()=>(S.current=!0,()=>{S.current=!1})),[]);const E=r.useMemo((()=>()=>_.current&&a===w.current?_.current:h(d.getState(),a)),[d,a]),k=r.useMemo((()=>e=>v?function(e,t,n,r,o,i,a,l,u,s,c){if(!e)return()=>{};let f=!1,d=null;const p=()=>{if(f||!l.current)return;const e=t.getState();let n,p;try{n=r(e,o.current)}catch(e){p=e,d=e}p||(d=null),n===i.current?a.current||s():(i.current=n,u.current=n,a.current=!0,c())};return n.onStateChange=p,n.trySubscribe(),p(),()=>{if(f=!0,n.tryUnsubscribe(),n.onStateChange=null,d)throw d}}(m,d,v,h,w,b,x,S,_,y,e):()=>{}),[v]);var C,O;let j;C=Tn,O=[w,b,x,a,_,y],kn((()=>C(...O)),undefined);try{j=Pn(k,E,p?()=>h(p(),a):E)}catch(e){throw A.current&&(e.message+=`\nThe error may be correlated with this previous error:\n${A.current.stack}\n\n`),e}kn((()=>{A.current=void 0,_.current=void 0,b.current=j}));const P=r.useMemo((()=>r.createElement(e,dn({},j,{ref:i}))),[i,e,j]);return r.useMemo((()=>m?r.createElement(l.Provider,{value:g},P):P),[l,P,g])}const v=r.memo(c);if(v.WrappedComponent=e,v.displayName=c.displayName=n,s){const t=r.forwardRef((function(e,t){return r.createElement(v,dn({},e,{reactReduxForwardedRef:t}))}));return t.displayName=n,t.WrappedComponent=e,mn()(t,e)}return mn()(v,e)}},Ln=function({store:e,context:t,children:n,serverState:o,stabilityCheck:i="once",noopCheck:a="once"}){const l=r.useMemo((()=>{const t=En(e);return{store:e,subscription:t,getServerState:o?()=>o:void 0,stabilityCheck:i,noopCheck:a}}),[e,o,i,a]),u=r.useMemo((()=>e.getState()),[e]);kn((()=>{const{subscription:t}=l;return t.onStateChange=t.notifyNestedSubs,t.trySubscribe(),u!==e.getState()&&t.notifyNestedSubs(),()=>{t.tryUnsubscribe(),t.onStateChange=void 0}}),[l,u]);const s=t||rn;return r.createElement(s.Provider,{value:l},n)};function Un(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];throw Error("[Immer] minified error nr: "+e+(n.length?" "+n.map((function(e){return"'"+e+"'"})).join(","):"")+". Find the full error at: https://bit.ly/3cXEKWf")}function Fn(e){return!!e&&!!e[Ar]}function zn(e){var t;return!!e&&(function(e){if(!e||"object"!=typeof e)return!1;var t=Object.getPrototypeOf(e);if(null===t)return!0;var n=Object.hasOwnProperty.call(t,"constructor")&&t.constructor;return n===Object||"function"==typeof n&&Function.toString.call(n)===Er}(e)||Array.isArray(e)||!!e[Sr]||!!(null===(t=e.constructor)||void 0===t?void 0:t[Sr])||qn(e)||$n(e))}function In(e,t,n){void 0===n&&(n=!1),0===Bn(e)?(n?Object.keys:kr)(e).forEach((function(r){n&&"symbol"==typeof r||t(r,e[r],e)})):e.forEach((function(n,r){return t(r,n,e)}))}function Bn(e){var t=e[Ar];return t?t.i>3?t.i-4:t.i:Array.isArray(e)?1:qn(e)?2:$n(e)?3:0}function Vn(e,t){return 2===Bn(e)?e.has(t):Object.prototype.hasOwnProperty.call(e,t)}function Wn(e,t,n){var r=Bn(e);2===r?e.set(t,n):3===r?e.add(n):e[t]=n}function Hn(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}function qn(e){return br&&e instanceof Map}function $n(e){return wr&&e instanceof Set}function Kn(e){return e.o||e.t}function Zn(e){if(Array.isArray(e))return Array.prototype.slice.call(e);var t=Cr(e);delete t[Ar];for(var n=kr(t),r=0;r<n.length;r++){var o=n[r],i=t[o];!1===i.writable&&(i.writable=!0,i.configurable=!0),(i.get||i.set)&&(t[o]={configurable:!0,writable:!0,enumerable:i.enumerable,value:e[o]})}return Object.create(Object.getPrototypeOf(e),t)}function Gn(e,t){return void 0===t&&(t=!1),Yn(e)||Fn(e)||!zn(e)||(Bn(e)>1&&(e.set=e.add=e.clear=e.delete=Qn),Object.freeze(e),t&&In(e,(function(e,t){return Gn(t,!0)}),!0)),e}function Qn(){Un(2)}function Yn(e){return null==e||"object"!=typeof e||Object.isFrozen(e)}function Jn(e){var t=Or[e];return t||Un(18,e),t}function Xn(){return yr}function er(e,t){t&&(Jn("Patches"),e.u=[],e.s=[],e.v=t)}function tr(e){nr(e),e.p.forEach(or),e.p=null}function nr(e){e===yr&&(yr=e.l)}function rr(e){return yr={p:[],l:yr,h:e,m:!0,_:0}}function or(e){var t=e[Ar];0===t.i||1===t.i?t.j():t.g=!0}function ir(e,t){t._=t.p.length;var n=t.p[0],r=void 0!==e&&e!==n;return t.h.O||Jn("ES5").S(t,e,r),r?(n[Ar].P&&(tr(t),Un(4)),zn(e)&&(e=ar(t,e),t.l||ur(t,e)),t.u&&Jn("Patches").M(n[Ar].t,e,t.u,t.s)):e=ar(t,n,[]),tr(t),t.u&&t.v(t.u,t.s),e!==xr?e:void 0}function ar(e,t,n){if(Yn(t))return t;var r=t[Ar];if(!r)return In(t,(function(o,i){return lr(e,r,t,o,i,n)}),!0),t;if(r.A!==e)return t;if(!r.P)return ur(e,r.t,!0),r.t;if(!r.I){r.I=!0,r.A._--;var o=4===r.i||5===r.i?r.o=Zn(r.k):r.o,i=o,a=!1;3===r.i&&(i=new Set(o),o.clear(),a=!0),In(i,(function(t,i){return lr(e,r,o,t,i,n,a)})),ur(e,o,!1),n&&e.u&&Jn("Patches").N(r,n,e.u,e.s)}return r.o}function lr(e,t,n,r,o,i,a){if(Fn(o)){var l=ar(e,o,i&&t&&3!==t.i&&!Vn(t.R,r)?i.concat(r):void 0);if(Wn(n,r,l),!Fn(l))return;e.m=!1}else a&&n.add(o);if(zn(o)&&!Yn(o)){if(!e.h.D&&e._<1)return;ar(e,o),t&&t.A.l||ur(e,o)}}function ur(e,t,n){void 0===n&&(n=!1),!e.l&&e.h.D&&e.m&&Gn(t,n)}function sr(e,t){var n=e[Ar];return(n?Kn(n):e)[t]}function cr(e,t){if(t in e)for(var n=Object.getPrototypeOf(e);n;){var r=Object.getOwnPropertyDescriptor(n,t);if(r)return r;n=Object.getPrototypeOf(n)}}function fr(e){e.P||(e.P=!0,e.l&&fr(e.l))}function dr(e){e.o||(e.o=Zn(e.t))}function pr(e,t,n){var r=qn(t)?Jn("MapSet").F(t,n):$n(t)?Jn("MapSet").T(t,n):e.O?function(e,t){var n=Array.isArray(e),r={i:n?1:0,A:t?t.A:Xn(),P:!1,I:!1,R:{},l:t,t:e,k:null,o:null,j:null,C:!1},o=r,i=jr;n&&(o=[r],i=Pr);var a=Proxy.revocable(o,i),l=a.revoke,u=a.proxy;return r.k=u,r.j=l,u}(t,n):Jn("ES5").J(t,n);return(n?n.A:Xn()).p.push(r),r}function hr(e){return Fn(e)||Un(22,e),function e(t){if(!zn(t))return t;var n,r=t[Ar],o=Bn(t);if(r){if(!r.P&&(r.i<4||!Jn("ES5").K(r)))return r.t;r.I=!0,n=mr(t,o),r.I=!1}else n=mr(t,o);return In(n,(function(t,o){r&&function(e,t){return 2===Bn(e)?e.get(t):e[t]}(r.t,t)===o||Wn(n,t,e(o))})),3===o?new Set(n):n}(e)}function mr(e,t){switch(t){case 2:return new Map(e);case 3:return Array.from(e)}return Zn(e)}(e=>{un=e})(Qt.useSyncExternalStoreWithSelector),(e=>{Pn=e})(Gt.useSyncExternalStore),Dn=Yt.unstable_batchedUpdates,Jt=Dn;var vr,yr,gr="undefined"!=typeof Symbol&&"symbol"==typeof Symbol("x"),br="undefined"!=typeof Map,wr="undefined"!=typeof Set,_r="undefined"!=typeof Proxy&&void 0!==Proxy.revocable&&"undefined"!=typeof Reflect,xr=gr?Symbol.for("immer-nothing"):((vr={})["immer-nothing"]=!0,vr),Sr=gr?Symbol.for("immer-draftable"):"__$immer_draftable",Ar=gr?Symbol.for("immer-state"):"__$immer_state",Er=("undefined"!=typeof Symbol&&Symbol.iterator,""+Object.prototype.constructor),kr="undefined"!=typeof Reflect&&Reflect.ownKeys?Reflect.ownKeys:void 0!==Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:Object.getOwnPropertyNames,Cr=Object.getOwnPropertyDescriptors||function(e){var t={};return kr(e).forEach((function(n){t[n]=Object.getOwnPropertyDescriptor(e,n)})),t},Or={},jr={get:function(e,t){if(t===Ar)return e;var n=Kn(e);if(!Vn(n,t))return function(e,t,n){var r,o=cr(t,n);return o?"value"in o?o.value:null===(r=o.get)||void 0===r?void 0:r.call(e.k):void 0}(e,n,t);var r=n[t];return e.I||!zn(r)?r:r===sr(e.t,t)?(dr(e),e.o[t]=pr(e.A.h,r,e)):r},has:function(e,t){return t in Kn(e)},ownKeys:function(e){return Reflect.ownKeys(Kn(e))},set:function(e,t,n){var r=cr(Kn(e),t);if(null==r?void 0:r.set)return r.set.call(e.k,n),!0;if(!e.P){var o=sr(Kn(e),t),i=null==o?void 0:o[Ar];if(i&&i.t===n)return e.o[t]=n,e.R[t]=!1,!0;if(Hn(n,o)&&(void 0!==n||Vn(e.t,t)))return!0;dr(e),fr(e)}return e.o[t]===n&&(void 0!==n||t in e.o)||Number.isNaN(n)&&Number.isNaN(e.o[t])||(e.o[t]=n,e.R[t]=!0),!0},deleteProperty:function(e,t){return void 0!==sr(e.t,t)||t in e.t?(e.R[t]=!1,dr(e),fr(e)):delete e.R[t],e.o&&delete e.o[t],!0},getOwnPropertyDescriptor:function(e,t){var n=Kn(e),r=Reflect.getOwnPropertyDescriptor(n,t);return r?{writable:!0,configurable:1!==e.i||"length"!==t,enumerable:r.enumerable,value:n[t]}:r},defineProperty:function(){Un(11)},getPrototypeOf:function(e){return Object.getPrototypeOf(e.t)},setPrototypeOf:function(){Un(12)}},Pr={};In(jr,(function(e,t){Pr[e]=function(){return arguments[0]=arguments[0][0],t.apply(this,arguments)}})),Pr.deleteProperty=function(e,t){return Pr.set.call(this,e,t,void 0)},Pr.set=function(e,t,n){return jr.set.call(this,e[0],t,n,e[0])};var Rr=function(){function e(e){var t=this;this.O=_r,this.D=!0,this.produce=function(e,n,r){if("function"==typeof e&&"function"!=typeof n){var o=n;n=e;var i=t;return function(e){var t=this;void 0===e&&(e=o);for(var r=arguments.length,a=Array(r>1?r-1:0),l=1;l<r;l++)a[l-1]=arguments[l];return i.produce(e,(function(e){var r;return(r=n).call.apply(r,[t,e].concat(a))}))}}var a;if("function"!=typeof n&&Un(6),void 0!==r&&"function"!=typeof r&&Un(7),zn(e)){var l=rr(t),u=pr(t,e,void 0),s=!0;try{a=n(u),s=!1}finally{s?tr(l):nr(l)}return"undefined"!=typeof Promise&&a instanceof Promise?a.then((function(e){return er(l,r),ir(e,l)}),(function(e){throw tr(l),e})):(er(l,r),ir(a,l))}if(!e||"object"!=typeof e){if(void 0===(a=n(e))&&(a=e),a===xr&&(a=void 0),t.D&&Gn(a,!0),r){var c=[],f=[];Jn("Patches").M(e,a,c,f),r(c,f)}return a}Un(21,e)},this.produceWithPatches=function(e,n){if("function"==typeof e)return function(n){for(var r=arguments.length,o=Array(r>1?r-1:0),i=1;i<r;i++)o[i-1]=arguments[i];return t.produceWithPatches(n,(function(t){return e.apply(void 0,[t].concat(o))}))};var r,o,i=t.produce(e,n,(function(e,t){r=e,o=t}));return"undefined"!=typeof Promise&&i instanceof Promise?i.then((function(e){return[e,r,o]})):[i,r,o]},"boolean"==typeof(null==e?void 0:e.useProxies)&&this.setUseProxies(e.useProxies),"boolean"==typeof(null==e?void 0:e.autoFreeze)&&this.setAutoFreeze(e.autoFreeze)}var t=e.prototype;return t.createDraft=function(e){zn(e)||Un(8),Fn(e)&&(e=hr(e));var t=rr(this),n=pr(this,e,void 0);return n[Ar].C=!0,nr(t),n},t.finishDraft=function(e,t){var n=(e&&e[Ar]).A;return er(n,t),ir(void 0,n)},t.setAutoFreeze=function(e){this.D=e},t.setUseProxies=function(e){e&&!_r&&Un(20),this.O=e},t.applyPatches=function(e,t){var n;for(n=t.length-1;n>=0;n--){var r=t[n];if(0===r.path.length&&"replace"===r.op){e=r.value;break}}n>-1&&(t=t.slice(n+1));var o=Jn("Patches").$;return Fn(e)?o(e,t):this.produce(e,(function(e){return o(e,t)}))},e}(),Tr=new Rr,Nr=Tr.produce,Dr=(Tr.produceWithPatches.bind(Tr),Tr.setAutoFreeze.bind(Tr),Tr.setUseProxies.bind(Tr),Tr.applyPatches.bind(Tr),Tr.createDraft.bind(Tr),Tr.finishDraft.bind(Tr),Nr);function Mr(e){return Mr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Mr(e)}function Lr(e,t,n){return(t=function(e){var t=function(e,t){if("object"!==Mr(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==Mr(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Mr(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Ur(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Fr(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Ur(Object(n),!0).forEach((function(t){Lr(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Ur(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function zr(e){return"Minified Redux error #"+e+"; visit https://redux.js.org/Errors?code="+e+" for the full message or use the non-minified dev environment for full errors. "}var Ir="function"==typeof Symbol&&Symbol.observable||"@@observable",Br=function(){return Math.random().toString(36).substring(7).split("").join(".")},Vr={INIT:"@@redux/INIT"+Br(),REPLACE:"@@redux/REPLACE"+Br(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+Br()}};function Wr(e,t,n){var r;if("function"==typeof t&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error(zr(0));if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error(zr(1));return n(Wr)(e,t)}if("function"!=typeof e)throw new Error(zr(2));var o=e,i=t,a=[],l=a,u=!1;function s(){l===a&&(l=a.slice())}function c(){if(u)throw new Error(zr(3));return i}function f(e){if("function"!=typeof e)throw new Error(zr(4));if(u)throw new Error(zr(5));var t=!0;return s(),l.push(e),function(){if(t){if(u)throw new Error(zr(6));t=!1,s();var n=l.indexOf(e);l.splice(n,1),a=null}}}function d(e){if(!function(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}(e))throw new Error(zr(7));if(void 0===e.type)throw new Error(zr(8));if(u)throw new Error(zr(9));try{u=!0,i=o(i,e)}finally{u=!1}for(var t=a=l,n=0;n<t.length;n++)(0,t[n])();return e}return d({type:Vr.INIT}),(r={dispatch:d,subscribe:f,getState:c,replaceReducer:function(e){if("function"!=typeof e)throw new Error(zr(10));o=e,d({type:Vr.REPLACE})}})[Ir]=function(){var e,t=f;return e={subscribe:function(e){if("object"!=typeof e||null===e)throw new Error(zr(11));function n(){e.next&&e.next(c())}return n(),{unsubscribe:t(n)}}},e[Ir]=function(){return this},e},r}function Hr(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var o=t[r];"function"==typeof e[o]&&(n[o]=e[o])}var i,a=Object.keys(n);try{!function(e){Object.keys(e).forEach((function(t){var n=e[t];if(void 0===n(void 0,{type:Vr.INIT}))throw new Error(zr(12));if(void 0===n(void 0,{type:Vr.PROBE_UNKNOWN_ACTION()}))throw new Error(zr(13))}))}(n)}catch(e){i=e}return function(e,t){if(void 0===e&&(e={}),i)throw i;for(var r=!1,o={},l=0;l<a.length;l++){var u=a[l],s=n[u],c=e[u],f=s(c,t);if(void 0===f)throw t&&t.type,new Error(zr(14));o[u]=f,r=r||f!==c}return(r=r||a.length!==Object.keys(e).length)?o:e}}function qr(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce((function(e,t){return function(){return e(t.apply(void 0,arguments))}}))}function $r(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){var n=e.apply(void 0,arguments),r=function(){throw new Error(zr(15))},o={getState:n.getState,dispatch:function(){return r.apply(void 0,arguments)}},i=t.map((function(e){return e(o)}));return r=qr.apply(void 0,i)(n.dispatch),Fr(Fr({},n),{},{dispatch:r})}}}function Kr(e){return function(t){var n=t.dispatch,r=t.getState;return function(t){return function(o){return"function"==typeof o?o(n,r,e):t(o)}}}}var Zr=Kr();Zr.withExtraArgument=Kr;var Gr,Qr=Zr,Yr=(Gr=function(e,t){return Gr=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},Gr(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}Gr(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),Jr=function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function l(i){return function(l){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,l])}}},Xr=function(e,t){for(var n=0,r=t.length,o=e.length;n<r;n++,o++)e[o]=t[n];return e},eo=Object.defineProperty,to=Object.defineProperties,no=Object.getOwnPropertyDescriptors,ro=Object.getOwnPropertySymbols,oo=Object.prototype.hasOwnProperty,io=Object.prototype.propertyIsEnumerable,ao=function(e,t,n){return t in e?eo(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n},lo=function(e,t){for(var n in t||(t={}))oo.call(t,n)&&ao(e,n,t[n]);if(ro)for(var r=0,o=ro(t);r<o.length;r++)n=o[r],io.call(t,n)&&ao(e,n,t[n]);return e},uo=function(e,t){return to(e,no(t))},so=function(e,t,n){return new Promise((function(r,o){var i=function(e){try{l(n.next(e))}catch(e){o(e)}},a=function(e){try{l(n.throw(e))}catch(e){o(e)}},l=function(e){return e.done?r(e.value):Promise.resolve(e.value).then(i,a)};l((n=n.apply(e,t)).next())}))},co="undefined"!=typeof window&&window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__?window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__:function(){if(0!==arguments.length)return"object"==typeof arguments[0]?qr:qr.apply(null,arguments)};function fo(e){if("object"!=typeof e||null===e)return!1;var t=Object.getPrototypeOf(e);if(null===t)return!0;for(var n=t;null!==Object.getPrototypeOf(n);)n=Object.getPrototypeOf(n);return t===n}"undefined"!=typeof window&&window.__REDUX_DEVTOOLS_EXTENSION__&&window.__REDUX_DEVTOOLS_EXTENSION__;var po=function(e){function t(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];var o=e.apply(this,n)||this;return Object.setPrototypeOf(o,t.prototype),o}return Yr(t,e),Object.defineProperty(t,Symbol.species,{get:function(){return t},enumerable:!1,configurable:!0}),t.prototype.concat=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return e.prototype.concat.apply(this,t)},t.prototype.prepend=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return 1===e.length&&Array.isArray(e[0])?new(t.bind.apply(t,Xr([void 0],e[0].concat(this)))):new(t.bind.apply(t,Xr([void 0],e.concat(this))))},t}(Array),ho=function(e){function t(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];var o=e.apply(this,n)||this;return Object.setPrototypeOf(o,t.prototype),o}return Yr(t,e),Object.defineProperty(t,Symbol.species,{get:function(){return t},enumerable:!1,configurable:!0}),t.prototype.concat=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return e.prototype.concat.apply(this,t)},t.prototype.prepend=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return 1===e.length&&Array.isArray(e[0])?new(t.bind.apply(t,Xr([void 0],e[0].concat(this)))):new(t.bind.apply(t,Xr([void 0],e.concat(this))))},t}(Array);function mo(e){return zn(e)?Dr(e,(function(){})):e}function vo(e,t){function n(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];if(t){var o=t.apply(void 0,n);if(!o)throw new Error("prepareAction did not return an object");return lo(lo({type:e,payload:o.payload},"meta"in o&&{meta:o.meta}),"error"in o&&{error:o.error})}return{type:e,payload:n[0]}}return n.toString=function(){return""+e},n.type=e,n.match=function(t){return t.type===e},n}var yo=function(e){void 0===e&&(e=21);for(var t="",n=e;n--;)t+="ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW"[64*Math.random()|0];return t},go=["name","message","stack","code"],bo=function(e,t){this.payload=e,this.meta=t},wo=function(e,t){this.payload=e,this.meta=t},_o=function(e){if("object"==typeof e&&null!==e){for(var t={},n=0,r=go;n<r.length;n++){var o=r[n];"string"==typeof e[o]&&(t[o]=e[o])}return t}return{message:String(e)}};function xo(e){if(e.meta&&e.meta.rejectedWithValue)throw e.payload;if(e.error)throw e.error;return e.payload}!function(){function e(e,t,n){var r=vo(e+"/fulfilled",(function(e,t,n,r){return{payload:e,meta:uo(lo({},r||{}),{arg:n,requestId:t,requestStatus:"fulfilled"})}})),o=vo(e+"/pending",(function(e,t,n){return{payload:void 0,meta:uo(lo({},n||{}),{arg:t,requestId:e,requestStatus:"pending"})}})),i=vo(e+"/rejected",(function(e,t,r,o,i){return{payload:o,error:(n&&n.serializeError||_o)(e||"Rejected"),meta:uo(lo({},i||{}),{arg:r,requestId:t,rejectedWithValue:!!o,requestStatus:"rejected",aborted:"AbortError"===(null==e?void 0:e.name),condition:"ConditionError"===(null==e?void 0:e.name)})}})),a="undefined"!=typeof AbortController?AbortController:function(){function e(){this.signal={aborted:!1,addEventListener:function(){},dispatchEvent:function(){return!1},onabort:function(){},removeEventListener:function(){},reason:void 0,throwIfAborted:function(){}}}return e.prototype.abort=function(){},e}();return Object.assign((function(e){return function(l,u,s){var c,f=(null==n?void 0:n.idGenerator)?n.idGenerator(e):yo(),d=new a;function p(e){c=e,d.abort()}var h=function(){return so(this,null,(function(){var a,h,m,v,y,g;return Jr(this,(function(b){switch(b.label){case 0:return b.trys.push([0,4,,5]),null===(w=v=null==(a=null==n?void 0:n.condition)?void 0:a.call(n,e,{getState:u,extra:s}))||"object"!=typeof w||"function"!=typeof w.then?[3,2]:[4,v];case 1:v=b.sent(),b.label=2;case 2:if(!1===v||d.signal.aborted)throw{name:"ConditionError",message:"Aborted due to condition callback returning false."};return y=new Promise((function(e,t){return d.signal.addEventListener("abort",(function(){return t({name:"AbortError",message:c||"Aborted"})}))})),l(o(f,e,null==(h=null==n?void 0:n.getPendingMeta)?void 0:h.call(n,{requestId:f,arg:e},{getState:u,extra:s}))),[4,Promise.race([y,Promise.resolve(t(e,{dispatch:l,getState:u,extra:s,requestId:f,signal:d.signal,abort:p,rejectWithValue:function(e,t){return new bo(e,t)},fulfillWithValue:function(e,t){return new wo(e,t)}})).then((function(t){if(t instanceof bo)throw t;return t instanceof wo?r(t.payload,f,e,t.meta):r(t,f,e)}))])];case 3:return m=b.sent(),[3,5];case 4:return g=b.sent(),m=g instanceof bo?i(null,f,e,g.payload,g.meta):i(g,f,e),[3,5];case 5:return n&&!n.dispatchConditionRejection&&i.match(m)&&m.meta.condition||l(m),[2,m]}var w}))}))}();return Object.assign(h,{abort:p,requestId:f,arg:e,unwrap:function(){return h.then(xo)}})}}),{pending:o,rejected:i,fulfilled:r,typePrefix:e})}e.withTypes=function(){return e}}();var So=function(e,t){if("function"!=typeof e)throw new TypeError(t+" is not a function")},Ao=function(){},Eo=function(e,t){return void 0===t&&(t=Ao),e.catch(t),e},ko=function(e,t){return e.addEventListener("abort",t,{once:!0}),function(){return e.removeEventListener("abort",t)}},Co=function(e,t){var n=e.signal;n.aborted||("reason"in n||Object.defineProperty(n,"reason",{enumerable:!0,value:t,configurable:!0,writable:!0}),e.abort(t))},Oo="listener",jo="completed",Po="cancelled",Ro="task-"+Po,To="task-"+jo,No=Oo+"-"+Po,Do=Oo+"-"+jo,Mo=function(e){this.code=e,this.name="TaskAbortError",this.message="task "+Po+" (reason: "+e+")"},Lo=function(e){if(e.aborted)throw new Mo(e.reason)};function Uo(e,t){var n=Ao;return new Promise((function(r,o){var i=function(){return o(new Mo(e.reason))};e.aborted?i():(n=ko(e,i),t.finally((function(){return n()})).then(r,o))})).finally((function(){n=Ao}))}var Fo=function(e){return function(t){return Eo(Uo(e,t).then((function(t){return Lo(e),t})))}},zo=function(e){var t=Fo(e);return function(e){return t(new Promise((function(t){return setTimeout(t,e)})))}},Io=Object.assign,Bo={},Vo="listenerMiddleware",Wo=function(e){var t=e.type,n=e.actionCreator,r=e.matcher,o=e.predicate,i=e.effect;if(t)o=vo(t).match;else if(n)t=n.type,o=n.match;else if(r)o=r;else if(!o)throw new Error("Creating or removing a listener requires one of the known fields for matching an action");return So(i,"options.listener"),{predicate:o,type:t,effect:i}},Ho=function(e){e.pending.forEach((function(e){Co(e,No)}))},qo=function(e,t,n){try{e(t,n)}catch(e){setTimeout((function(){throw e}),0)}},$o=vo(Vo+"/add"),Ko=vo(Vo+"/removeAll"),Zo=vo(Vo+"/remove"),Go=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];console.error.apply(console,Xr([Vo+"/error"],e))};"function"==typeof queueMicrotask&&queueMicrotask.bind("undefined"!=typeof window?window:void 0!==a.g?a.g:globalThis);"undefined"!=typeof window&&window.requestAnimationFrame&&window.requestAnimationFrame,function(){function e(e,t){var n=o[e];return n?n.enumerable=t:o[e]=n={configurable:!0,enumerable:t,get:function(){var t=this[Ar];return jr.get(t,e)},set:function(t){var n=this[Ar];jr.set(n,e,t)}},n}function t(e){for(var t=e.length-1;t>=0;t--){var o=e[t][Ar];if(!o.P)switch(o.i){case 5:r(o)&&fr(o);break;case 4:n(o)&&fr(o)}}}function n(e){for(var t=e.t,n=e.k,r=kr(n),o=r.length-1;o>=0;o--){var i=r[o];if(i!==Ar){var a=t[i];if(void 0===a&&!Vn(t,i))return!0;var l=n[i],u=l&&l[Ar];if(u?u.t!==a:!Hn(l,a))return!0}}var s=!!t[Ar];return r.length!==kr(t).length+(s?0:1)}function r(e){var t=e.k;if(t.length!==e.t.length)return!0;var n=Object.getOwnPropertyDescriptor(t,t.length-1);if(n&&!n.get)return!0;for(var r=0;r<t.length;r++)if(!t.hasOwnProperty(r))return!0;return!1}var o={};!function(e,t){Or[e]||(Or[e]=t)}("ES5",{J:function(t,n){var r=Array.isArray(t),o=function(t,n){if(t){for(var r=Array(n.length),o=0;o<n.length;o++)Object.defineProperty(r,""+o,e(o,!0));return r}var i=Cr(n);delete i[Ar];for(var a=kr(i),l=0;l<a.length;l++){var u=a[l];i[u]=e(u,t||!!i[u].enumerable)}return Object.create(Object.getPrototypeOf(n),i)}(r,t),i={i:r?5:4,A:n?n.A:Xn(),P:!1,I:!1,R:{},l:n,t:t,k:o,o:null,g:!1,C:!1};return Object.defineProperty(o,Ar,{value:i,writable:!0}),o},S:function(e,n,o){o?Fn(n)&&n[Ar].A===e&&t(e.p):(e.u&&function e(t){if(t&&"object"==typeof t){var n=t[Ar];if(n){var o=n.t,i=n.k,a=n.R,l=n.i;if(4===l)In(i,(function(t){t!==Ar&&(void 0!==o[t]||Vn(o,t)?a[t]||e(i[t]):(a[t]=!0,fr(n)))})),In(o,(function(e){void 0!==i[e]||Vn(i,e)||(a[e]=!1,fr(n))}));else if(5===l){if(r(n)&&(fr(n),a.length=!0),i.length<o.length)for(var u=i.length;u<o.length;u++)a[u]=!1;else for(var s=o.length;s<i.length;s++)a[s]=!0;for(var c=Math.min(i.length,o.length),f=0;f<c;f++)i.hasOwnProperty(f)||(a[f]=!0),void 0===a[f]&&e(i[f])}}}}(e.p[0]),t(e.p))},K:function(e){return 4===e.i?n(e):r(e)}})}();var Qo=vo("LOADING_START"),Yo=vo("LOADING_SUCCESS",(function(e){return{payload:e}})),Jo=Mn((function(e){return{loading:e.apiOpenWeatherReducer.loading,list:e.apiOpenWeatherReducer.list,loaded:e.apiOpenWeatherReducer.loaded}}))((function(e){var n=e.dispatch,o=(e.loading,e.list),i=e.loaded,a=(0,r.useRef)(null),l=(0,r.useState)([]),u=l[0],s=l[1];return(0,r.useEffect)((function(){i||n(Qo())}),[]),(0,r.useEffect)((function(){o.length&&s(o)}),[o.length]),(0,r.useEffect)((function(){u.length&&Zt()(a.current,{axis:"x"})}),[u.length]),(0,t.jsx)(t.Fragment,{children:(0,t.jsxs)("div",{id:"scrollbar1",ref:a,className:"forecast-component",children:[(0,t.jsx)("div",{className:"scrollbar",children:(0,t.jsx)("div",{className:"track",children:(0,t.jsx)("div",{className:"thumb",children:(0,t.jsx)("div",{className:"end"})})})}),(0,t.jsx)("div",{className:"viewport "+$t.viewport,children:(0,t.jsx)("div",{className:"overview",children:(0,t.jsx)("div",{className:$t.list,children:u.map((function(e,n){return(0,t.jsx)(Wt,{data:e,index:n,children:""},"key_"+n)}))})})})]})})})),Xo=a(9240),ei={};ei.styleTagTransform=Et(),ei.setAttributes=_t(),ei.insert=bt().bind(null,"head"),ei.domAPI=yt(),ei.insertStyleElement=St(),mt()(Xo.Z,ei);var ti=Xo.Z&&Xo.Z.locals?Xo.Z.locals:void 0,ni=a(6317),ri={};ri.styleTagTransform=Et(),ri.setAttributes=_t(),ri.insert=bt().bind(null,"head"),ri.domAPI=yt(),ri.insertStyleElement=St(),mt()(ni.Z,ri);var oi=ni.Z&&ni.Z.locals?ni.Z.locals:void 0,ii=a(319),ai={};ai.styleTagTransform=Et(),ai.setAttributes=_t(),ai.insert=bt().bind(null,"head"),ai.domAPI=yt(),ai.insertStyleElement=St(),mt()(ii.Z,ai);var li=ii.Z&&ii.Z.locals?ii.Z.locals:void 0;function ui(){var e=(0,r.useState)(function(){for(var e=[],t=42;t<=44;t++)for(var n=72;n<=77;n++)e.push("https://tile.openstreetmap.org/".concat(7,"/").concat(n,"/").concat(t,".png"));return e}()),n=e[0];return e[1],(0,t.jsx)(t.Fragment,{children:(0,t.jsx)("div",{className:li.container,children:n.map((function(e,n){return(0,t.jsx)("img",{src:e},n)}))})})}var si=a(2439),ci={};ci.styleTagTransform=Et(),ci.setAttributes=_t(),ci.insert=bt().bind(null,"head"),ci.domAPI=yt(),ci.insertStyleElement=St(),mt()(si.Z,ci);var fi=si.Z&&si.Z.locals?si.Z.locals:void 0,di="19e738728f18421f2074f369bdb54e81",pi=a(966),hi={};hi.styleTagTransform=Et(),hi.setAttributes=_t(),hi.insert=bt().bind(null,"head"),hi.domAPI=yt(),hi.insertStyleElement=St(),mt()(pi.Z,hi);var mi=pi.Z&&pi.Z.locals?pi.Z.locals:void 0;function vi(e){var n=e.src,o=(0,r.useRef)(null);return(0,r.useEffect)((function(){var e=o.current.getContext("2d"),t=new Image;t.src=n,t.crossOrigin="Anonymous",t.onload=function(){e.width=256,e.height=256,e.drawImage(t,0,0);for(var n=e.getImageData(0,0,256,256),r=0;r<n.data.length;r+=4)n.data[r]=40,n.data[r+1]=40,n.data[r+2]=80,n.data[r+3]&&(n.data[r+3]=1.4*n.data[r+3]);e.putImageData(n,0,0)}}),[]),(0,t.jsx)(t.Fragment,{children:(0,t.jsx)("canvas",{id:"canvas",className:mi.canvas,ref:o,width:256,height:256})})}function yi(){var e=(0,r.useState)([]),n=e[0],o=e[1];return(0,r.useEffect)((function(){o(function(){for(var e=[],t=new Date((new Date).getTime()+60*(new Date).getTimezoneOffset()*1e3-12e5),n=Math.floor(Number(Mt(t,"MM"))/10).toString().concat("0"),r=Mt(t,"yyyy-mm-dd").concat("T",Mt(t,"HH"),":",n),o=42;o<=44;o++)for(var i=72;i<=77;i++)e.push("https://b.sat.owm.io/vane/2.0/weather/".concat("CL","/").concat(7,"/").concat(i,"/").concat(o,"?appid=").concat(di,"&day=").concat(r));return e}())}),[]),(0,t.jsx)(t.Fragment,{children:(0,t.jsx)("div",{className:fi.container,children:n.map((function(e,n){return(0,t.jsx)(vi,{src:e},n)}))})})}var gi=a(5074),bi={};bi.styleTagTransform=Et(),bi.setAttributes=_t(),bi.insert=bt().bind(null,"head"),bi.domAPI=yt(),bi.insertStyleElement=St(),mt()(gi.Z,bi);var wi=gi.Z&&gi.Z.locals?gi.Z.locals:void 0;function _i(){var e=(0,r.useState)(function(){for(var e=[],t=new Date((new Date).getTime()+60*(new Date).getTimezoneOffset()*1e3-12e5),n=Math.floor(Number(Mt(t,"MM"))/10).toString().concat("0"),r=Mt(t,"yyyy-mm-dd").concat("T",Mt(t,"HH"),":",n),o=42;o<=44;o++)for(var i=72;i<=77;i++)e.push("https://a.sat.owm.io/maps/2.0/radar/".concat(7,"/").concat(i,"/").concat(o,"?appid=").concat(di,"&day=").concat(r));return e}()),n=e[0];return e[1],(0,t.jsx)(t.Fragment,{children:(0,t.jsx)("div",{className:wi.container,children:n.map((function(e,n){return(0,t.jsx)("img",{src:e},n)}))})})}function xi(){return(0,r.useEffect)((function(){return function(){}}),[]),(0,t.jsxs)("div",{className:oi.container,children:[(0,t.jsx)(ui,{}),(0,t.jsx)(yi,{}),(0,t.jsx)(_i,{})]})}function Si(e){return void 0===e&&(e=500),new Promise((function(t){return setTimeout(t,e)}))}var Ai=a(7093),Ei={};Ei.styleTagTransform=Et(),Ei.setAttributes=_t(),Ei.insert=bt().bind(null,"head"),Ei.domAPI=yt(),Ei.insertStyleElement=St(),mt()(Ai.Z,Ei);var ki=Ai.Z&&Ai.Z.locals?Ai.Z.locals:void 0;function Ci(e){return void 0===e&&(e=20),new Promise((function(t){return setTimeout(t,e)}))}var Oi=function(e){return function(t){return e.apiOpenWeatherReducer.list[Number(t)]}},ji=function(){var e=function(t,n){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},e(t,n)};return function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Pi=function(){return Pi=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},Pi.apply(this,arguments)},Ri="unmounted",Ti="exited",Ni="entering",Di="entered",Mi="exiting",Li={entering:{opacity:0},entered:{opacity:1},exiting:{opacity:0},exited:{opacity:0}},Ui=function(e){function n(t){var n=e.call(this,t)||this;return n.state={status:Ri},n}return ji(n,e),n.prototype.componentDidMount=function(){this.props.show&&this.performEnter()},n.prototype.componentDidUpdate=function(e){var t=null;if(e!==this.props){var n=this.state.status;this.props.show?n!==Ni&&n!==Di&&(t=Ni):n!==Ni&&n!==Di||(t=Mi)}this.updateStatus(t)},n.prototype.updateStatus=function(e){null!==e?e===Ni?this.performEnter():this.performExit():this.state.status===Ti&&this.setState({status:Ri})},n.prototype.performEnter=function(){var e=this;this.setState({status:Ni},(function(){setTimeout((function(){e.setState({status:Di},(function(){}))}),0)}))},n.prototype.performExit=function(){var e=this,t=this.props.duration;this.setState({status:Mi},(function(){setTimeout((function(){e.setState({status:Ti},(function(){}))}),t)}))},n.prototype.render=function(){var e=this.state.status;if(e===Ri)return null;var n=this.props,r=n.children,o=n.duration,i=n.className,a=n.style;return(0,t.jsx)("div",{className:i,style:Pi(Pi(Pi({},a),{transition:"opacity ".concat(o,"ms ease-in-out"),opacity:.1}),Li[e]),children:r})},n}(r.Component),Fi=a(621),zi={};zi.styleTagTransform=Et(),zi.setAttributes=_t(),zi.insert=bt().bind(null,"head"),zi.domAPI=yt(),zi.insertStyleElement=St(),mt()(Fi.Z,zi);var Ii=Fi.Z&&Fi.Z.locals?Fi.Z.locals:void 0,Bi=Mn((function(e){return{list:e.apiOpenWeatherReducer.list}}))((function(e){e.list;var n=ze(),o=fn(Oi)(n.id),i=(0,r.useState)(null),a=i[0],l=i[1];return(0,r.useEffect)((function(){o&&l(o)}),[o]),(0,t.jsx)(t.Fragment,{children:(0,t.jsx)("div",{className:Ii.container,children:a&&(0,t.jsx)(Ui,{show:a,duration:500,children:(0,t.jsx)("h1",{className:Ii.title,children:Mt(1e3*a.dt,"dddd mm/dd/yy HH:MM")})})})})}));function Vi(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];throw new Error("number"==typeof e?"[MobX] minified error nr: "+e+(n.length?" "+n.map(String).join(","):"")+". Find the full error at: https://github.com/mobxjs/mobx/blob/main/packages/mobx/src/errors.ts":"[MobX] "+e)}var Wi={};function Hi(){return"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==a.g?a.g:"undefined"!=typeof self?self:Wi}var qi=Object.assign,$i=Object.getOwnPropertyDescriptor,Ki=Object.defineProperty,Zi=Object.prototype,Gi=[];Object.freeze(Gi);var Qi={};Object.freeze(Qi);var Yi="undefined"!=typeof Proxy,Ji=Object.toString();function Xi(){Yi||Vi("Proxy not available")}function ea(e){var t=!1;return function(){if(!t)return t=!0,e.apply(this,arguments)}}var ta=function(){};function na(e){return"function"==typeof e}function ra(e){switch(typeof e){case"string":case"symbol":case"number":return!0}return!1}function oa(e){return null!==e&&"object"==typeof e}function ia(e){if(!oa(e))return!1;var t=Object.getPrototypeOf(e);if(null==t)return!0;var n=Object.hasOwnProperty.call(t,"constructor")&&t.constructor;return"function"==typeof n&&n.toString()===Ji}function aa(e){var t=null==e?void 0:e.constructor;return!!t&&("GeneratorFunction"===t.name||"GeneratorFunction"===t.displayName)}function la(e,t,n){Ki(e,t,{enumerable:!1,writable:!0,configurable:!0,value:n})}function ua(e,t,n){Ki(e,t,{enumerable:!1,writable:!1,configurable:!0,value:n})}function sa(e,t){var n="isMobX"+e;return t.prototype[n]=!0,function(e){return oa(e)&&!0===e[n]}}function ca(e){return e instanceof Map}function fa(e){return e instanceof Set}var da=void 0!==Object.getOwnPropertySymbols,pa="undefined"!=typeof Reflect&&Reflect.ownKeys?Reflect.ownKeys:da?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:Object.getOwnPropertyNames;function ha(e){return null===e?null:"object"==typeof e?""+e:e}function ma(e,t){return Zi.hasOwnProperty.call(e,t)}var va=Object.getOwnPropertyDescriptors||function(e){var t={};return pa(e).forEach((function(n){t[n]=$i(e,n)})),t};function ya(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(void 0,"symbol"==typeof(o=function(e,t){if("object"!=typeof e||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!=typeof r)return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(r.key))?o:String(o)),r)}var o}function ga(e,t,n){return t&&ya(e.prototype,t),n&&ya(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}function ba(){return ba=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},ba.apply(this,arguments)}function wa(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,_a(e,t)}function _a(e,t){return _a=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},_a(e,t)}function xa(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Sa(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Aa(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(n)return(n=n.call(e)).next.bind(n);if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return Sa(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Sa(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0;return function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var Ea=Symbol("mobx-stored-annotations");function ka(e){return Object.assign((function(t,n){Ca(t,n,e)}),e)}function Ca(e,t,n){ma(e,Ea)||la(e,Ea,ba({},e[Ea])),function(e){return e.annotationType_===Ma}(n)||(e[Ea][t]=n)}var Oa=Symbol("mobx administration"),ja=function(){function e(e){void 0===e&&(e="Atom"),this.name_=void 0,this.isPendingUnobservation_=!1,this.isBeingObserved_=!1,this.observers_=new Set,this.batchId_=void 0,this.diffValue_=0,this.lastAccessedBy_=0,this.lowestObserverState_=jl.NOT_TRACKING_,this.onBOL=void 0,this.onBUOL=void 0,this.name_=e,this.batchId_=Kl.inBatch?Kl.batchId:NaN}var t=e.prototype;return t.onBO=function(){this.onBOL&&this.onBOL.forEach((function(e){return e()}))},t.onBUO=function(){this.onBUOL&&this.onBUOL.forEach((function(e){return e()}))},t.reportObserved=function(){return Jl(this)},t.reportChanged=function(){Kl.inBatch&&this.batchId_===Kl.batchId||(Kl.stateVersion=Kl.stateVersion<Number.MAX_SAFE_INTEGER?Kl.stateVersion+1:Number.MIN_SAFE_INTEGER,this.batchId_=NaN),Ql(),Xl(this),Yl()},t.toString=function(){return this.name_},e}(),Pa=sa("Atom",ja);function Ra(e,t,n){void 0===t&&(t=ta),void 0===n&&(n=ta);var r=new ja(e);return t!==ta&&_u(gu,r,t,undefined),n!==ta&&wu(r,n),r}var Ta={identity:function(e,t){return e===t},structural:function(e,t){return Us(e,t)},default:function(e,t){return Object.is?Object.is(e,t):e===t?0!==e||1/e==1/t:e!=e&&t!=t},shallow:function(e,t){return Us(e,t,1)}};function Na(e,t,n){return Tu(e)?e:Array.isArray(e)?pl.array(e,{name:n}):ia(e)?pl.object(e,void 0,{name:n}):ca(e)?pl.map(e,{name:n}):fa(e)?pl.set(e,{name:n}):"function"!=typeof e||vu(e)||Ru(e)?e:aa(e)?ju(e):hu(n,e)}function Da(e){return e}var Ma="override";function La(e,t){return{annotationType_:e,options_:t,make_:Ua,extend_:Fa}}function Ua(e,t,n,r){var o;if(null!=(o=this.options_)&&o.bound)return null===this.extend_(e,t,n,!1)?0:1;if(r===e.target_)return null===this.extend_(e,t,n,!1)?0:2;if(vu(n.value))return 1;var i=za(e,this,t,n,!1);return Ki(r,t,i),2}function Fa(e,t,n,r){var o=za(e,this,t,n);return e.defineProperty_(t,o,r)}function za(e,t,n,r,o){var i,a,l,u,s,c,f,d;void 0===o&&(o=Kl.safeDescriptors),d=r,t.annotationType_,d.value;var p,h=r.value;return null!=(i=t.options_)&&i.bound&&(h=h.bind(null!=(p=e.proxy_)?p:e.target_)),{value:Sl(null!=(a=null==(l=t.options_)?void 0:l.name)?a:n.toString(),h,null!=(u=null==(s=t.options_)?void 0:s.autoAction)&&u,null!=(c=t.options_)&&c.bound?null!=(f=e.proxy_)?f:e.target_:void 0),configurable:!o||e.isPlainObject_,enumerable:!1,writable:!o}}function Ia(e,t){return{annotationType_:e,options_:t,make_:Ba,extend_:Va}}function Ba(e,t,n,r){var o;if(r===e.target_)return null===this.extend_(e,t,n,!1)?0:2;if(null!=(o=this.options_)&&o.bound&&(!ma(e.target_,t)||!Ru(e.target_[t]))&&null===this.extend_(e,t,n,!1))return 0;if(Ru(n.value))return 1;var i=Wa(e,this,0,n,!1,!1);return Ki(r,t,i),2}function Va(e,t,n,r){var o,i=Wa(e,this,0,n,null==(o=this.options_)?void 0:o.bound);return e.defineProperty_(t,i,r)}function Wa(e,t,n,r,o,i){var a;void 0===i&&(i=Kl.safeDescriptors),a=r,t.annotationType_,a.value;var l,u=r.value;return Ru(u)||(u=ju(u)),o&&((u=u.bind(null!=(l=e.proxy_)?l:e.target_)).isMobXFlow=!0),{value:u,configurable:!i||e.isPlainObject_,enumerable:!1,writable:!i}}function Ha(e,t){return{annotationType_:e,options_:t,make_:qa,extend_:$a}}function qa(e,t,n){return null===this.extend_(e,t,n,!1)?0:1}function $a(e,t,n,r){return o=n,this.annotationType_,o.get,e.defineComputedProperty_(t,ba({},this.options_,{get:n.get,set:n.set}),r);var o}function Ka(e,t){return{annotationType_:e,options_:t,make_:Za,extend_:Ga}}function Za(e,t,n){return null===this.extend_(e,t,n,!1)?0:1}function Ga(e,t,n,r){var o,i;return this.annotationType_,e.defineObservableProperty_(t,n.value,null!=(o=null==(i=this.options_)?void 0:i.enhancer)?o:Na,r)}var Qa="true",Ya=Ja();function Ja(e){return{annotationType_:Qa,options_:e,make_:Xa,extend_:el}}function Xa(e,t,n,r){var o,i,a,l;if(n.get)return yl.make_(e,t,n,r);if(n.set){var u=Sl(t.toString(),n.set);return r===e.target_?null===e.defineProperty_(t,{configurable:!Kl.safeDescriptors||e.isPlainObject_,set:u})?0:2:(Ki(r,t,{configurable:!0,set:u}),2)}if(r!==e.target_&&"function"==typeof n.value)return aa(n.value)?(null!=(l=this.options_)&&l.autoBind?ju.bound:ju).make_(e,t,n,r):(null!=(a=this.options_)&&a.autoBind?hu.bound:hu).make_(e,t,n,r);var s,c=!1===(null==(o=this.options_)?void 0:o.deep)?pl.ref:pl;return"function"==typeof n.value&&null!=(i=this.options_)&&i.autoBind&&(n.value=n.value.bind(null!=(s=e.proxy_)?s:e.target_)),c.make_(e,t,n,r)}function el(e,t,n,r){var o,i,a;return n.get?yl.extend_(e,t,n,r):n.set?e.defineProperty_(t,{configurable:!Kl.safeDescriptors||e.isPlainObject_,set:Sl(t.toString(),n.set)},r):("function"==typeof n.value&&null!=(o=this.options_)&&o.autoBind&&(n.value=n.value.bind(null!=(a=e.proxy_)?a:e.target_)),(!1===(null==(i=this.options_)?void 0:i.deep)?pl.ref:pl).extend_(e,t,n,r))}var tl={deep:!0,name:void 0,defaultDecorator:void 0,proxy:!0};function nl(e){return e||tl}Object.freeze(tl);var rl=Ka("observable"),ol=Ka("observable.ref",{enhancer:Da}),il=Ka("observable.shallow",{enhancer:function(e,t,n){return null==e||bs(e)||ns(e)||ss(e)||ds(e)?e:Array.isArray(e)?pl.array(e,{name:n,deep:!1}):ia(e)?pl.object(e,void 0,{name:n,deep:!1}):ca(e)?pl.map(e,{name:n,deep:!1}):fa(e)?pl.set(e,{name:n,deep:!1}):void 0}}),al=Ka("observable.struct",{enhancer:function(e,t){return Us(e,t)?t:e}}),ll=ka(rl);function ul(e){return!0===e.deep?Na:!1===e.deep?Da:(t=e.defaultDecorator)&&null!=(n=null==(r=t.options_)?void 0:r.enhancer)?n:Na;var t,n,r}function sl(e,t,n){if(!ra(t))return Tu(e)?e:ia(e)?pl.object(e,t,n):Array.isArray(e)?pl.array(e,t):ca(e)?pl.map(e,t):fa(e)?pl.set(e,t):"object"==typeof e&&null!==e?e:pl.box(e,t);Ca(e,t,rl)}qi(sl,ll);var cl,fl,dl={box:function(e,t){var n=nl(t);return new Ol(e,ul(n),n.name,!0,n.equals)},array:function(e,t){var n=nl(t);return(!1===Kl.useProxies||!1===n.proxy?Rs:Ku)(e,ul(n),n.name)},map:function(e,t){var n=nl(t);return new us(e,ul(n),n.name)},set:function(e,t){var n=nl(t);return new fs(e,ul(n),n.name)},object:function(e,t,n){return Ms((function(){return function(e,t,n,r){var o=va(t);return Ms((function(){var t=vs(e,r)[Oa];pa(o).forEach((function(e){t.extend_(e,o[e],!n||!(e in n)||n[e])}))})),e}(!1===Kl.useProxies||!1===(null==n?void 0:n.proxy)?vs({},n):function(e,t){var n,r;return Xi(),null!=(r=(n=(e=vs(e,t))[Oa]).proxy_)?r:n.proxy_=new Proxy(e,Mu)}({},n),e,t)}))},ref:ka(ol),shallow:ka(il),deep:ll,struct:ka(al)},pl=qi(sl,dl),hl="computed",ml=Ha(hl),vl=Ha("computed.struct",{equals:Ta.structural}),yl=function(e,t){if(ra(t))return Ca(e,t,ml);if(ia(e))return ka(Ha(hl,e));var n=ia(t)?t:{};return n.get=e,n.name||(n.name=e.name||""),new Rl(n)};Object.assign(yl,ml),yl.struct=ka(vl);var gl,bl=0,wl=1,_l=null!=(cl=null==(fl=$i((function(){}),"name"))?void 0:fl.configurable)&&cl,xl={value:"action",configurable:!0,writable:!1,enumerable:!1};function Sl(e,t,n,r){function o(){return Al(0,n,t,r||this,arguments)}return void 0===n&&(n=!1),o.isMobxAction=!0,_l&&(xl.value=e,Ki(o,"name",xl)),o}function Al(e,t,n,r,o){var i=function(e,t,n,r){var o=Kl.trackingDerivation,i=!t||!o;Ql();var a=Kl.allowStateChanges;i&&(zl(),a=El(!0));var l={runAsAction_:i,prevDerivation_:o,prevAllowStateChanges_:a,prevAllowStateReads_:Bl(!0),notifySpy_:!1,startTime_:0,actionId_:wl++,parentActionId_:bl};return bl=l.actionId_,l}(0,t);try{return n.apply(r,o)}catch(e){throw i.error_=e,e}finally{!function(e){bl!==e.actionId_&&Vi(30),bl=e.parentActionId_,void 0!==e.error_&&(Kl.suppressReactionErrors=!0),kl(e.prevAllowStateChanges_),Vl(e.prevAllowStateReads_),Yl(),e.runAsAction_&&Il(e.prevDerivation_),Kl.suppressReactionErrors=!1}(i)}}function El(e){var t=Kl.allowStateChanges;return Kl.allowStateChanges=e,t}function kl(e){Kl.allowStateChanges=e}gl=Symbol.toPrimitive;var Cl,Ol=function(e){function t(t,n,r,o,i){var a;return void 0===r&&(r="ObservableValue"),void 0===o&&(o=!0),void 0===i&&(i=Ta.default),(a=e.call(this,r)||this).enhancer=void 0,a.name_=void 0,a.equals=void 0,a.hasUnreportedChange_=!1,a.interceptors_=void 0,a.changeListeners_=void 0,a.value_=void 0,a.dehancer=void 0,a.enhancer=n,a.name_=r,a.equals=i,a.value_=n(t,void 0,r),a}wa(t,e);var n=t.prototype;return n.dehanceValue=function(e){return void 0!==this.dehancer?this.dehancer(e):e},n.set=function(e){this.value_,(e=this.prepareNewValue_(e))!==Kl.UNCHANGED&&this.setNewValue_(e)},n.prepareNewValue_=function(e){if(Lu(this)){var t=Fu(this,{object:this,type:Hu,newValue:e});if(!t)return Kl.UNCHANGED;e=t.newValue}return e=this.enhancer(e,this.value_,this.name_),this.equals(this.value_,e)?Kl.UNCHANGED:e},n.setNewValue_=function(e){var t=this.value_;this.value_=e,this.reportChanged(),zu(this)&&Bu(this,{type:Hu,object:this,newValue:e,oldValue:t})},n.get=function(){return this.reportObserved(),this.dehanceValue(this.value_)},n.intercept_=function(e){return Uu(this,e)},n.observe_=function(e,t){return t&&e({observableKind:"value",debugObjectName:this.name_,object:this,type:Hu,newValue:this.value_,oldValue:void 0}),Iu(this,e)},n.raw=function(){return this.value_},n.toJSON=function(){return this.get()},n.toString=function(){return this.name_+"["+this.value_+"]"},n.valueOf=function(){return ha(this.get())},n[gl]=function(){return this.valueOf()},t}(ja);Cl=Symbol.toPrimitive;var jl,Pl,Rl=function(){function e(e){this.dependenciesState_=jl.NOT_TRACKING_,this.observing_=[],this.newObserving_=null,this.isBeingObserved_=!1,this.isPendingUnobservation_=!1,this.observers_=new Set,this.diffValue_=0,this.runId_=0,this.lastAccessedBy_=0,this.lowestObserverState_=jl.UP_TO_DATE_,this.unboundDepsCount_=0,this.value_=new Nl(null),this.name_=void 0,this.triggeredBy_=void 0,this.isComputing_=!1,this.isRunningSetter_=!1,this.derivation=void 0,this.setter_=void 0,this.isTracing_=Pl.NONE,this.scope_=void 0,this.equals_=void 0,this.requiresReaction_=void 0,this.keepAlive_=void 0,this.onBOL=void 0,this.onBUOL=void 0,e.get||Vi(31),this.derivation=e.get,this.name_=e.name||"ComputedValue",e.set&&(this.setter_=Sl("ComputedValue-setter",e.set)),this.equals_=e.equals||(e.compareStructural||e.struct?Ta.structural:Ta.default),this.scope_=e.context,this.requiresReaction_=e.requiresReaction,this.keepAlive_=!!e.keepAlive}var t=e.prototype;return t.onBecomeStale_=function(){var e;(e=this).lowestObserverState_===jl.UP_TO_DATE_&&(e.lowestObserverState_=jl.POSSIBLY_STALE_,e.observers_.forEach((function(e){e.dependenciesState_===jl.UP_TO_DATE_&&(e.dependenciesState_=jl.POSSIBLY_STALE_,e.onBecomeStale_())})))},t.onBO=function(){this.onBOL&&this.onBOL.forEach((function(e){return e()}))},t.onBUO=function(){this.onBUOL&&this.onBUOL.forEach((function(e){return e()}))},t.get=function(){if(this.isComputing_&&Vi(32,this.name_,this.derivation),0!==Kl.inBatch||0!==this.observers_.size||this.keepAlive_){if(Jl(this),Ml(this)){var e=Kl.trackingContext;this.keepAlive_&&!e&&(Kl.trackingContext=this),this.trackAndCompute()&&((t=this).lowestObserverState_!==jl.STALE_&&(t.lowestObserverState_=jl.STALE_,t.observers_.forEach((function(e){e.dependenciesState_===jl.POSSIBLY_STALE_?e.dependenciesState_=jl.STALE_:e.dependenciesState_===jl.UP_TO_DATE_&&(t.lowestObserverState_=jl.UP_TO_DATE_)})))),Kl.trackingContext=e}}else Ml(this)&&(this.warnAboutUntrackedRead_(),Ql(),this.value_=this.computeValue_(!1),Yl());var t,n=this.value_;if(Dl(n))throw n.cause;return n},t.set=function(e){if(this.setter_){this.isRunningSetter_&&Vi(33,this.name_),this.isRunningSetter_=!0;try{this.setter_.call(this.scope_,e)}finally{this.isRunningSetter_=!1}}else Vi(34,this.name_)},t.trackAndCompute=function(){var e=this.value_,t=this.dependenciesState_===jl.NOT_TRACKING_,n=this.computeValue_(!0),r=t||Dl(e)||Dl(n)||!this.equals_(e,n);return r&&(this.value_=n),r},t.computeValue_=function(e){this.isComputing_=!0;var t,n=El(!1);if(e)t=Ll(this,this.derivation,this.scope_);else if(!0===Kl.disableErrorBoundaries)t=this.derivation.call(this.scope_);else try{t=this.derivation.call(this.scope_)}catch(e){t=new Nl(e)}return kl(n),this.isComputing_=!1,t},t.suspend_=function(){this.keepAlive_||(Ul(this),this.value_=void 0)},t.observe_=function(e,t){var n=this,r=!0,o=void 0;return function(e,t){var n,r,o,i,a;void 0===t&&(t=Qi);var l,u=null!=(n=null==(r=t)?void 0:r.name)?n:"Autorun";if(t.scheduler||t.delay){var s=function(e){return e.scheduler?e.scheduler:e.delay?function(t){return setTimeout(t,e.delay)}:yu}(t),c=!1;l=new eu(u,(function(){c||(c=!0,s((function(){c=!1,l.isDisposed_||l.track(f)})))}),t.onError,t.requiresObservable)}else l=new eu(u,(function(){this.track(f)}),t.onError,t.requiresObservable);function f(){e(l)}return null!=(o=t)&&null!=(i=o.signal)&&i.aborted||l.schedule_(),l.getDisposer_(null==(a=t)?void 0:a.signal)}((function(){var i=n.get();if(!r||t){var a=zl();e({observableKind:"computed",debugObjectName:n.name_,type:Hu,object:n,newValue:i,oldValue:o}),Il(a)}r=!1,o=i}))},t.warnAboutUntrackedRead_=function(){},t.toString=function(){return this.name_+"["+this.derivation.toString()+"]"},t.valueOf=function(){return ha(this.get())},t[Cl]=function(){return this.valueOf()},e}(),Tl=sa("ComputedValue",Rl);!function(e){e[e.NOT_TRACKING_=-1]="NOT_TRACKING_",e[e.UP_TO_DATE_=0]="UP_TO_DATE_",e[e.POSSIBLY_STALE_=1]="POSSIBLY_STALE_",e[e.STALE_=2]="STALE_"}(jl||(jl={})),function(e){e[e.NONE=0]="NONE",e[e.LOG=1]="LOG",e[e.BREAK=2]="BREAK"}(Pl||(Pl={}));var Nl=function(e){this.cause=void 0,this.cause=e};function Dl(e){return e instanceof Nl}function Ml(e){switch(e.dependenciesState_){case jl.UP_TO_DATE_:return!1;case jl.NOT_TRACKING_:case jl.STALE_:return!0;case jl.POSSIBLY_STALE_:for(var t=Bl(!0),n=zl(),r=e.observing_,o=r.length,i=0;i<o;i++){var a=r[i];if(Tl(a)){if(Kl.disableErrorBoundaries)a.get();else try{a.get()}catch(e){return Il(n),Vl(t),!0}if(e.dependenciesState_===jl.STALE_)return Il(n),Vl(t),!0}}return Wl(e),Il(n),Vl(t),!1}}function Ll(e,t,n){var r=Bl(!0);Wl(e),e.newObserving_=new Array(e.observing_.length+100),e.unboundDepsCount_=0,e.runId_=++Kl.runId;var o,i=Kl.trackingDerivation;if(Kl.trackingDerivation=e,Kl.inBatch++,!0===Kl.disableErrorBoundaries)o=t.call(n);else try{o=t.call(n)}catch(e){o=new Nl(e)}return Kl.inBatch--,Kl.trackingDerivation=i,function(e){for(var t=e.observing_,n=e.observing_=e.newObserving_,r=jl.UP_TO_DATE_,o=0,i=e.unboundDepsCount_,a=0;a<i;a++){var l=n[a];0===l.diffValue_&&(l.diffValue_=1,o!==a&&(n[o]=l),o++),l.dependenciesState_>r&&(r=l.dependenciesState_)}for(n.length=o,e.newObserving_=null,i=t.length;i--;){var u=t[i];0===u.diffValue_&&Zl(u,e),u.diffValue_=0}for(;o--;){var s=n[o];1===s.diffValue_&&(s.diffValue_=0,f=e,(c=s).observers_.add(f),c.lowestObserverState_>f.dependenciesState_&&(c.lowestObserverState_=f.dependenciesState_))}var c,f;r!==jl.UP_TO_DATE_&&(e.dependenciesState_=r,e.onBecomeStale_())}(e),Vl(r),o}function Ul(e){var t=e.observing_;e.observing_=[];for(var n=t.length;n--;)Zl(t[n],e);e.dependenciesState_=jl.NOT_TRACKING_}function Fl(e){var t=zl();try{return e()}finally{Il(t)}}function zl(){var e=Kl.trackingDerivation;return Kl.trackingDerivation=null,e}function Il(e){Kl.trackingDerivation=e}function Bl(e){var t=Kl.allowStateReads;return Kl.allowStateReads=e,t}function Vl(e){Kl.allowStateReads=e}function Wl(e){if(e.dependenciesState_!==jl.UP_TO_DATE_){e.dependenciesState_=jl.UP_TO_DATE_;for(var t=e.observing_,n=t.length;n--;)t[n].lowestObserverState_=jl.UP_TO_DATE_}}var Hl=function(){this.version=6,this.UNCHANGED={},this.trackingDerivation=null,this.trackingContext=null,this.runId=0,this.mobxGuid=0,this.inBatch=0,this.batchId=Number.MIN_SAFE_INTEGER,this.pendingUnobservations=[],this.pendingReactions=[],this.isRunningReactions=!1,this.allowStateChanges=!1,this.allowStateReads=!0,this.enforceActions=!0,this.spyListeners=[],this.globalReactionErrorHandlers=[],this.computedRequiresReaction=!1,this.reactionRequiresObservable=!1,this.observableRequiresReaction=!1,this.disableErrorBoundaries=!1,this.suppressReactionErrors=!1,this.useProxies=!0,this.verifyProxies=!1,this.safeDescriptors=!0,this.stateVersion=Number.MIN_SAFE_INTEGER},ql=!0,$l=!1,Kl=function(){var e=Hi();return e.__mobxInstanceCount>0&&!e.__mobxGlobals&&(ql=!1),e.__mobxGlobals&&e.__mobxGlobals.version!==(new Hl).version&&(ql=!1),ql?e.__mobxGlobals?(e.__mobxInstanceCount+=1,e.__mobxGlobals.UNCHANGED||(e.__mobxGlobals.UNCHANGED={}),e.__mobxGlobals):(e.__mobxInstanceCount=1,e.__mobxGlobals=new Hl):(setTimeout((function(){$l||Vi(35)}),1),new Hl)}();function Zl(e,t){e.observers_.delete(t),0===e.observers_.size&&Gl(e)}function Gl(e){!1===e.isPendingUnobservation_&&(e.isPendingUnobservation_=!0,Kl.pendingUnobservations.push(e))}function Ql(){0===Kl.inBatch&&(Kl.batchId=Kl.batchId<Number.MAX_SAFE_INTEGER?Kl.batchId+1:Number.MIN_SAFE_INTEGER),Kl.inBatch++}function Yl(){if(0==--Kl.inBatch){ru();for(var e=Kl.pendingUnobservations,t=0;t<e.length;t++){var n=e[t];n.isPendingUnobservation_=!1,0===n.observers_.size&&(n.isBeingObserved_&&(n.isBeingObserved_=!1,n.onBUO()),n instanceof Rl&&n.suspend_())}Kl.pendingUnobservations=[]}}function Jl(e){var t=Kl.trackingDerivation;return null!==t?(t.runId_!==e.lastAccessedBy_&&(e.lastAccessedBy_=t.runId_,t.newObserving_[t.unboundDepsCount_++]=e,!e.isBeingObserved_&&Kl.trackingContext&&(e.isBeingObserved_=!0,e.onBO())),e.isBeingObserved_):(0===e.observers_.size&&Kl.inBatch>0&&Gl(e),!1)}function Xl(e){e.lowestObserverState_!==jl.STALE_&&(e.lowestObserverState_=jl.STALE_,e.observers_.forEach((function(e){e.dependenciesState_===jl.UP_TO_DATE_&&e.onBecomeStale_(),e.dependenciesState_=jl.STALE_})))}var eu=function(){function e(e,t,n,r){void 0===e&&(e="Reaction"),this.name_=void 0,this.onInvalidate_=void 0,this.errorHandler_=void 0,this.requiresObservable_=void 0,this.observing_=[],this.newObserving_=[],this.dependenciesState_=jl.NOT_TRACKING_,this.diffValue_=0,this.runId_=0,this.unboundDepsCount_=0,this.isDisposed_=!1,this.isScheduled_=!1,this.isTrackPending_=!1,this.isRunning_=!1,this.isTracing_=Pl.NONE,this.name_=e,this.onInvalidate_=t,this.errorHandler_=n,this.requiresObservable_=r}var t=e.prototype;return t.onBecomeStale_=function(){this.schedule_()},t.schedule_=function(){this.isScheduled_||(this.isScheduled_=!0,Kl.pendingReactions.push(this),ru())},t.isScheduled=function(){return this.isScheduled_},t.runReaction_=function(){if(!this.isDisposed_){Ql(),this.isScheduled_=!1;var e=Kl.trackingContext;if(Kl.trackingContext=this,Ml(this)){this.isTrackPending_=!0;try{this.onInvalidate_()}catch(e){this.reportExceptionInDerivation_(e)}}Kl.trackingContext=e,Yl()}},t.track=function(e){if(!this.isDisposed_){Ql(),this.isRunning_=!0;var t=Kl.trackingContext;Kl.trackingContext=this;var n=Ll(this,e,void 0);Kl.trackingContext=t,this.isRunning_=!1,this.isTrackPending_=!1,this.isDisposed_&&Ul(this),Dl(n)&&this.reportExceptionInDerivation_(n.cause),Yl()}},t.reportExceptionInDerivation_=function(e){var t=this;if(this.errorHandler_)this.errorHandler_(e,this);else{if(Kl.disableErrorBoundaries)throw e;var n="[mobx] uncaught error in '"+this+"'";Kl.suppressReactionErrors||console.error(n,e),Kl.globalReactionErrorHandlers.forEach((function(n){return n(e,t)}))}},t.dispose=function(){this.isDisposed_||(this.isDisposed_=!0,this.isRunning_||(Ql(),Ul(this),Yl()))},t.getDisposer_=function(e){var t=this,n=function n(){t.dispose(),null==e||null==e.removeEventListener||e.removeEventListener("abort",n)};return null==e||null==e.addEventListener||e.addEventListener("abort",n),n[Oa]=this,n},t.toString=function(){return"Reaction["+this.name_+"]"},t.trace=function(e){void 0===e&&(e=!1)},e}(),tu=100,nu=function(e){return e()};function ru(){Kl.inBatch>0||Kl.isRunningReactions||nu(ou)}function ou(){Kl.isRunningReactions=!0;for(var e=Kl.pendingReactions,t=0;e.length>0;){++t===tu&&(console.error("[mobx] cycle in reaction: "+e[0]),e.splice(0));for(var n=e.splice(0),r=0,o=n.length;r<o;r++)n[r].runReaction_()}Kl.isRunningReactions=!1}var iu=sa("Reaction",eu),au="action",lu="autoAction",uu=La(au),su=La("action.bound",{bound:!0}),cu=La(lu,{autoAction:!0}),fu=La("autoAction.bound",{autoAction:!0,bound:!0});function du(e){return function(t,n){return na(t)?Sl(t.name||"<unnamed action>",t,e):na(n)?Sl(t,n,e):ra(n)?Ca(t,n,e?cu:uu):ra(t)?ka(La(e?lu:au,{name:t,autoAction:e})):void 0}}var pu=du(!1);Object.assign(pu,uu);var hu=du(!0);function mu(e){return Al(e.name,!1,e,this,void 0)}function vu(e){return na(e)&&!0===e.isMobxAction}Object.assign(hu,cu),pu.bound=ka(su),hu.bound=ka(fu);var yu=function(e){return e()};var gu="onBO",bu="onBUO";function wu(e,t,n){return _u(bu,e,t,n)}function _u(e,t,n,r){var o="function"==typeof r?Ts(t,n):Ts(t),i=na(r)?r:n,a=e+"L";return o[a]?o[a].add(i):o[a]=new Set([i]),function(){var e=o[a];e&&(e.delete(i),0===e.size&&delete o[a])}}var xu="always";function Su(e){!0===e.isolateGlobalState&&function(){if((Kl.pendingReactions.length||Kl.inBatch||Kl.isRunningReactions)&&Vi(36),$l=!0,ql){var e=Hi();0==--e.__mobxInstanceCount&&(e.__mobxGlobals=void 0),Kl=new Hl}}();var t=e.useProxies,n=e.enforceActions;if(void 0!==t&&(Kl.useProxies=t===xu||"never"!==t&&"undefined"!=typeof Proxy),"ifavailable"===t&&(Kl.verifyProxies=!0),void 0!==n){var r=n===xu?xu:"observed"===n;Kl.enforceActions=r,Kl.allowStateChanges=!0!==r&&r!==xu}["computedRequiresReaction","reactionRequiresObservable","observableRequiresReaction","disableErrorBoundaries","safeDescriptors"].forEach((function(t){t in e&&(Kl[t]=!!e[t])})),Kl.allowStateReads=!Kl.observableRequiresReaction,e.reactionScheduler&&function(e){var t=nu;nu=function(n){return e((function(){return t(n)}))}}(e.reactionScheduler)}function Au(e){var t,n={name:e.name_};return e.observing_&&e.observing_.length>0&&(n.dependencies=(t=e.observing_,Array.from(new Set(t))).map(Au)),n}var Eu=0;function ku(){this.message="FLOW_CANCELLED"}ku.prototype=Object.create(Error.prototype);var Cu=Ia("flow"),Ou=Ia("flow.bound",{bound:!0}),ju=Object.assign((function(e,t){if(ra(t))return Ca(e,t,Cu);var n=e,r=n.name||"<unnamed flow>",o=function(){var e,t=arguments,o=++Eu,i=pu(r+" - runid: "+o+" - init",n).apply(this,t),a=void 0,l=new Promise((function(t,n){var l=0;function u(e){var t;a=void 0;try{t=pu(r+" - runid: "+o+" - yield "+l++,i.next).call(i,e)}catch(e){return n(e)}c(t)}function s(e){var t;a=void 0;try{t=pu(r+" - runid: "+o+" - yield "+l++,i.throw).call(i,e)}catch(e){return n(e)}c(t)}function c(e){if(!na(null==e?void 0:e.then))return e.done?t(e.value):(a=Promise.resolve(e.value)).then(u,s);e.then(c,n)}e=n,u(void 0)}));return l.cancel=pu(r+" - runid: "+o+" - cancel",(function(){try{a&&Pu(a);var t=i.return(void 0),n=Promise.resolve(t.value);n.then(ta,ta),Pu(n),e(new ku)}catch(t){e(t)}})),l};return o.isMobXFlow=!0,o}),Cu);function Pu(e){na(e.cancel)&&e.cancel()}function Ru(e){return!0===(null==e?void 0:e.isMobXFlow)}function Tu(e){return function(e,t){return!!e&&(void 0!==t?!!bs(e)&&e[Oa].values_.has(t):bs(e)||!!e[Oa]||Pa(e)||iu(e)||Tl(e))}(e)}function Nu(e,t){void 0===t&&(t=void 0),Ql();try{return e.apply(t)}finally{Yl()}}function Du(e){return e[Oa]}ju.bound=ka(Ou);var Mu={has:function(e,t){return Du(e).has_(t)},get:function(e,t){return Du(e).get_(t)},set:function(e,t,n){var r;return!!ra(t)&&(null==(r=Du(e).set_(t,n,!0))||r)},deleteProperty:function(e,t){var n;return!!ra(t)&&(null==(n=Du(e).delete_(t,!0))||n)},defineProperty:function(e,t,n){var r;return null==(r=Du(e).defineProperty_(t,n))||r},ownKeys:function(e){return Du(e).ownKeys_()},preventExtensions:function(e){Vi(13)}};function Lu(e){return void 0!==e.interceptors_&&e.interceptors_.length>0}function Uu(e,t){var n=e.interceptors_||(e.interceptors_=[]);return n.push(t),ea((function(){var e=n.indexOf(t);-1!==e&&n.splice(e,1)}))}function Fu(e,t){var n=zl();try{for(var r=[].concat(e.interceptors_||[]),o=0,i=r.length;o<i&&((t=r[o](t))&&!t.type&&Vi(14),t);o++);return t}finally{Il(n)}}function zu(e){return void 0!==e.changeListeners_&&e.changeListeners_.length>0}function Iu(e,t){var n=e.changeListeners_||(e.changeListeners_=[]);return n.push(t),ea((function(){var e=n.indexOf(t);-1!==e&&n.splice(e,1)}))}function Bu(e,t){var n=zl(),r=e.changeListeners_;if(r){for(var o=0,i=(r=r.slice()).length;o<i;o++)r[o](t);Il(n)}}function Vu(e,t,n){return Ms((function(){var r=vs(e,n)[Oa];null!=t||(t=function(e){return ma(e,Ea)||la(e,Ea,ba({},e[Ea])),e[Ea]}(e)),pa(t).forEach((function(e){return r.make_(e,t[e])}))})),e}var Wu="splice",Hu="update",qu={get:function(e,t){var n=e[Oa];return t===Oa?n:"length"===t?n.getArrayLength_():"string"!=typeof t||isNaN(t)?ma(Zu,t)?Zu[t]:e[t]:n.get_(parseInt(t))},set:function(e,t,n){var r=e[Oa];return"length"===t&&r.setArrayLength_(n),"symbol"==typeof t||isNaN(t)?e[t]=n:r.set_(parseInt(t),n),!0},preventExtensions:function(){Vi(15)}},$u=function(){function e(e,t,n,r){void 0===e&&(e="ObservableArray"),this.owned_=void 0,this.legacyMode_=void 0,this.atom_=void 0,this.values_=[],this.interceptors_=void 0,this.changeListeners_=void 0,this.enhancer_=void 0,this.dehancer=void 0,this.proxy_=void 0,this.lastKnownLength_=0,this.owned_=n,this.legacyMode_=r,this.atom_=new ja(e),this.enhancer_=function(e,n){return t(e,n,"ObservableArray[..]")}}var t=e.prototype;return t.dehanceValue_=function(e){return void 0!==this.dehancer?this.dehancer(e):e},t.dehanceValues_=function(e){return void 0!==this.dehancer&&e.length>0?e.map(this.dehancer):e},t.intercept_=function(e){return Uu(this,e)},t.observe_=function(e,t){return void 0===t&&(t=!1),t&&e({observableKind:"array",object:this.proxy_,debugObjectName:this.atom_.name_,type:"splice",index:0,added:this.values_.slice(),addedCount:this.values_.length,removed:[],removedCount:0}),Iu(this,e)},t.getArrayLength_=function(){return this.atom_.reportObserved(),this.values_.length},t.setArrayLength_=function(e){("number"!=typeof e||isNaN(e)||e<0)&&Vi("Out of range: "+e);var t=this.values_.length;if(e!==t)if(e>t){for(var n=new Array(e-t),r=0;r<e-t;r++)n[r]=void 0;this.spliceWithArray_(t,0,n)}else this.spliceWithArray_(e,t-e)},t.updateArrayLength_=function(e,t){e!==this.lastKnownLength_&&Vi(16),this.lastKnownLength_+=t,this.legacyMode_&&t>0&&Ps(e+t+1)},t.spliceWithArray_=function(e,t,n){var r=this;this.atom_;var o=this.values_.length;if(void 0===e?e=0:e>o?e=o:e<0&&(e=Math.max(0,o+e)),t=1===arguments.length?o-e:null==t?0:Math.max(0,Math.min(t,o-e)),void 0===n&&(n=Gi),Lu(this)){var i=Fu(this,{object:this.proxy_,type:Wu,index:e,removedCount:t,added:n});if(!i)return Gi;t=i.removedCount,n=i.added}if(n=0===n.length?n:n.map((function(e){return r.enhancer_(e,void 0)})),this.legacyMode_){var a=n.length-t;this.updateArrayLength_(o,a)}var l=this.spliceItemsIntoValues_(e,t,n);return 0===t&&0===n.length||this.notifyArraySplice_(e,n,l),this.dehanceValues_(l)},t.spliceItemsIntoValues_=function(e,t,n){var r;if(n.length<1e4)return(r=this.values_).splice.apply(r,[e,t].concat(n));var o=this.values_.slice(e,e+t),i=this.values_.slice(e+t);this.values_.length+=n.length-t;for(var a=0;a<n.length;a++)this.values_[e+a]=n[a];for(var l=0;l<i.length;l++)this.values_[e+n.length+l]=i[l];return o},t.notifyArrayChildUpdate_=function(e,t,n){var r=!this.owned_&&!1,o=zu(this),i=o||r?{observableKind:"array",object:this.proxy_,type:Hu,debugObjectName:this.atom_.name_,index:e,newValue:t,oldValue:n}:null;this.atom_.reportChanged(),o&&Bu(this,i)},t.notifyArraySplice_=function(e,t,n){var r=!this.owned_&&!1,o=zu(this),i=o||r?{observableKind:"array",object:this.proxy_,debugObjectName:this.atom_.name_,type:Wu,index:e,removed:n,added:t,removedCount:n.length,addedCount:t.length}:null;this.atom_.reportChanged(),o&&Bu(this,i)},t.get_=function(e){if(!(this.legacyMode_&&e>=this.values_.length))return this.atom_.reportObserved(),this.dehanceValue_(this.values_[e]);console.warn("[mobx] Out of bounds read: "+e)},t.set_=function(e,t){var n=this.values_;if(this.legacyMode_&&e>n.length&&Vi(17,e,n.length),e<n.length){this.atom_;var r=n[e];if(Lu(this)){var o=Fu(this,{type:Hu,object:this.proxy_,index:e,newValue:t});if(!o)return;t=o.newValue}(t=this.enhancer_(t,r))!==r&&(n[e]=t,this.notifyArrayChildUpdate_(e,t,r))}else{for(var i=new Array(e+1-n.length),a=0;a<i.length-1;a++)i[a]=void 0;i[i.length-1]=t,this.spliceWithArray_(n.length,0,i)}},e}();function Ku(e,t,n,r){return void 0===n&&(n="ObservableArray"),void 0===r&&(r=!1),Xi(),Ms((function(){var o=new $u(n,t,r,!1);ua(o.values_,Oa,o);var i=new Proxy(o.values_,qu);return o.proxy_=i,e&&e.length&&o.spliceWithArray_(0,0,e),i}))}var Zu={clear:function(){return this.splice(0)},replace:function(e){var t=this[Oa];return t.spliceWithArray_(0,t.values_.length,e)},toJSON:function(){return this.slice()},splice:function(e,t){for(var n=arguments.length,r=new Array(n>2?n-2:0),o=2;o<n;o++)r[o-2]=arguments[o];var i=this[Oa];switch(arguments.length){case 0:return[];case 1:return i.spliceWithArray_(e);case 2:return i.spliceWithArray_(e,t)}return i.spliceWithArray_(e,t,r)},spliceWithArray:function(e,t,n){return this[Oa].spliceWithArray_(e,t,n)},push:function(){for(var e=this[Oa],t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return e.spliceWithArray_(e.values_.length,0,n),e.values_.length},pop:function(){return this.splice(Math.max(this[Oa].values_.length-1,0),1)[0]},shift:function(){return this.splice(0,1)[0]},unshift:function(){for(var e=this[Oa],t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return e.spliceWithArray_(0,0,n),e.values_.length},reverse:function(){return Kl.trackingDerivation&&Vi(37,"reverse"),this.replace(this.slice().reverse()),this},sort:function(){Kl.trackingDerivation&&Vi(37,"sort");var e=this.slice();return e.sort.apply(e,arguments),this.replace(e),this},remove:function(e){var t=this[Oa],n=t.dehanceValues_(t.values_).indexOf(e);return n>-1&&(this.splice(n,1),!0)}};function Gu(e,t){"function"==typeof Array.prototype[e]&&(Zu[e]=t(e))}function Qu(e){return function(){var t=this[Oa];t.atom_.reportObserved();var n=t.dehanceValues_(t.values_);return n[e].apply(n,arguments)}}function Yu(e){return function(t,n){var r=this,o=this[Oa];return o.atom_.reportObserved(),o.dehanceValues_(o.values_)[e]((function(e,o){return t.call(n,e,o,r)}))}}function Ju(e){return function(){var t=this,n=this[Oa];n.atom_.reportObserved();var r=n.dehanceValues_(n.values_),o=arguments[0];return arguments[0]=function(e,n,r){return o(e,n,r,t)},r[e].apply(r,arguments)}}Gu("concat",Qu),Gu("flat",Qu),Gu("includes",Qu),Gu("indexOf",Qu),Gu("join",Qu),Gu("lastIndexOf",Qu),Gu("slice",Qu),Gu("toString",Qu),Gu("toLocaleString",Qu),Gu("every",Yu),Gu("filter",Yu),Gu("find",Yu),Gu("findIndex",Yu),Gu("flatMap",Yu),Gu("forEach",Yu),Gu("map",Yu),Gu("some",Yu),Gu("reduce",Ju),Gu("reduceRight",Ju);var Xu,es,ts=sa("ObservableArrayAdministration",$u);function ns(e){return oa(e)&&ts(e[Oa])}var rs={},os="add",is="delete";Xu=Symbol.iterator,es=Symbol.toStringTag;var as,ls,us=function(){function e(e,t,n){var r=this;void 0===t&&(t=Na),void 0===n&&(n="ObservableMap"),this.enhancer_=void 0,this.name_=void 0,this[Oa]=rs,this.data_=void 0,this.hasMap_=void 0,this.keysAtom_=void 0,this.interceptors_=void 0,this.changeListeners_=void 0,this.dehancer=void 0,this.enhancer_=t,this.name_=n,na(Map)||Vi(18),Ms((function(){r.keysAtom_=Ra("ObservableMap.keys()"),r.data_=new Map,r.hasMap_=new Map,e&&r.merge(e)}))}var t=e.prototype;return t.has_=function(e){return this.data_.has(e)},t.has=function(e){var t=this;if(!Kl.trackingDerivation)return this.has_(e);var n=this.hasMap_.get(e);if(!n){var r=n=new Ol(this.has_(e),Da,"ObservableMap.key?",!1);this.hasMap_.set(e,r),wu(r,(function(){return t.hasMap_.delete(e)}))}return n.get()},t.set=function(e,t){var n=this.has_(e);if(Lu(this)){var r=Fu(this,{type:n?Hu:os,object:this,newValue:t,name:e});if(!r)return this;t=r.newValue}return n?this.updateValue_(e,t):this.addValue_(e,t),this},t.delete=function(e){var t=this;if(this.keysAtom_,Lu(this)&&!Fu(this,{type:is,object:this,name:e}))return!1;if(this.has_(e)){var n=zu(this),r=n?{observableKind:"map",debugObjectName:this.name_,type:is,object:this,oldValue:this.data_.get(e).value_,name:e}:null;return Nu((function(){var n;t.keysAtom_.reportChanged(),null==(n=t.hasMap_.get(e))||n.setNewValue_(!1),t.data_.get(e).setNewValue_(void 0),t.data_.delete(e)})),n&&Bu(this,r),!0}return!1},t.updateValue_=function(e,t){var n=this.data_.get(e);if((t=n.prepareNewValue_(t))!==Kl.UNCHANGED){var r=zu(this),o=r?{observableKind:"map",debugObjectName:this.name_,type:Hu,object:this,oldValue:n.value_,name:e,newValue:t}:null;n.setNewValue_(t),r&&Bu(this,o)}},t.addValue_=function(e,t){var n=this;this.keysAtom_,Nu((function(){var r,o=new Ol(t,n.enhancer_,"ObservableMap.key",!1);n.data_.set(e,o),t=o.value_,null==(r=n.hasMap_.get(e))||r.setNewValue_(!0),n.keysAtom_.reportChanged()}));var r=zu(this),o=r?{observableKind:"map",debugObjectName:this.name_,type:os,object:this,name:e,newValue:t}:null;r&&Bu(this,o)},t.get=function(e){return this.has(e)?this.dehanceValue_(this.data_.get(e).get()):this.dehanceValue_(void 0)},t.dehanceValue_=function(e){return void 0!==this.dehancer?this.dehancer(e):e},t.keys=function(){return this.keysAtom_.reportObserved(),this.data_.keys()},t.values=function(){var e=this,t=this.keys();return Is({next:function(){var n=t.next(),r=n.done,o=n.value;return{done:r,value:r?void 0:e.get(o)}}})},t.entries=function(){var e=this,t=this.keys();return Is({next:function(){var n=t.next(),r=n.done,o=n.value;return{done:r,value:r?void 0:[o,e.get(o)]}}})},t[Xu]=function(){return this.entries()},t.forEach=function(e,t){for(var n,r=Aa(this);!(n=r()).done;){var o=n.value,i=o[0],a=o[1];e.call(t,a,i,this)}},t.merge=function(e){var t=this;return ss(e)&&(e=new Map(e)),Nu((function(){ia(e)?function(e){var t=Object.keys(e);if(!da)return t;var n=Object.getOwnPropertySymbols(e);return n.length?[].concat(t,n.filter((function(t){return Zi.propertyIsEnumerable.call(e,t)}))):t}(e).forEach((function(n){return t.set(n,e[n])})):Array.isArray(e)?e.forEach((function(e){var n=e[0],r=e[1];return t.set(n,r)})):ca(e)?(e.constructor!==Map&&Vi(19,e),e.forEach((function(e,n){return t.set(n,e)}))):null!=e&&Vi(20,e)})),this},t.clear=function(){var e=this;Nu((function(){Fl((function(){for(var t,n=Aa(e.keys());!(t=n()).done;){var r=t.value;e.delete(r)}}))}))},t.replace=function(e){var t=this;return Nu((function(){for(var n,r=function(e){if(ca(e)||ss(e))return e;if(Array.isArray(e))return new Map(e);if(ia(e)){var t=new Map;for(var n in e)t.set(n,e[n]);return t}return Vi(21,e)}(e),o=new Map,i=!1,a=Aa(t.data_.keys());!(n=a()).done;){var l=n.value;if(!r.has(l))if(t.delete(l))i=!0;else{var u=t.data_.get(l);o.set(l,u)}}for(var s,c=Aa(r.entries());!(s=c()).done;){var f=s.value,d=f[0],p=f[1],h=t.data_.has(d);if(t.set(d,p),t.data_.has(d)){var m=t.data_.get(d);o.set(d,m),h||(i=!0)}}if(!i)if(t.data_.size!==o.size)t.keysAtom_.reportChanged();else for(var v=t.data_.keys(),y=o.keys(),g=v.next(),b=y.next();!g.done;){if(g.value!==b.value){t.keysAtom_.reportChanged();break}g=v.next(),b=y.next()}t.data_=o})),this},t.toString=function(){return"[object ObservableMap]"},t.toJSON=function(){return Array.from(this)},t.observe_=function(e,t){return Iu(this,e)},t.intercept_=function(e){return Uu(this,e)},ga(e,[{key:"size",get:function(){return this.keysAtom_.reportObserved(),this.data_.size}},{key:es,get:function(){return"Map"}}]),e}(),ss=sa("ObservableMap",us),cs={};as=Symbol.iterator,ls=Symbol.toStringTag;var fs=function(){function e(e,t,n){var r=this;void 0===t&&(t=Na),void 0===n&&(n="ObservableSet"),this.name_=void 0,this[Oa]=cs,this.data_=new Set,this.atom_=void 0,this.changeListeners_=void 0,this.interceptors_=void 0,this.dehancer=void 0,this.enhancer_=void 0,this.name_=n,na(Set)||Vi(22),this.enhancer_=function(e,r){return t(e,r,n)},Ms((function(){r.atom_=Ra(r.name_),e&&r.replace(e)}))}var t=e.prototype;return t.dehanceValue_=function(e){return void 0!==this.dehancer?this.dehancer(e):e},t.clear=function(){var e=this;Nu((function(){Fl((function(){for(var t,n=Aa(e.data_.values());!(t=n()).done;){var r=t.value;e.delete(r)}}))}))},t.forEach=function(e,t){for(var n,r=Aa(this);!(n=r()).done;){var o=n.value;e.call(t,o,o,this)}},t.add=function(e){var t=this;if(this.atom_,Lu(this)&&!Fu(this,{type:os,object:this,newValue:e}))return this;if(!this.has(e)){Nu((function(){t.data_.add(t.enhancer_(e,void 0)),t.atom_.reportChanged()}));var n=zu(this),r=n?{observableKind:"set",debugObjectName:this.name_,type:os,object:this,newValue:e}:null;n&&Bu(this,r)}return this},t.delete=function(e){var t=this;if(Lu(this)&&!Fu(this,{type:is,object:this,oldValue:e}))return!1;if(this.has(e)){var n=zu(this),r=n?{observableKind:"set",debugObjectName:this.name_,type:is,object:this,oldValue:e}:null;return Nu((function(){t.atom_.reportChanged(),t.data_.delete(e)})),n&&Bu(this,r),!0}return!1},t.has=function(e){return this.atom_.reportObserved(),this.data_.has(this.dehanceValue_(e))},t.entries=function(){var e=0,t=Array.from(this.keys()),n=Array.from(this.values());return Is({next:function(){var r=e;return e+=1,r<n.length?{value:[t[r],n[r]],done:!1}:{done:!0}}})},t.keys=function(){return this.values()},t.values=function(){this.atom_.reportObserved();var e=this,t=0,n=Array.from(this.data_.values());return Is({next:function(){return t<n.length?{value:e.dehanceValue_(n[t++]),done:!1}:{done:!0}}})},t.replace=function(e){var t=this;return ds(e)&&(e=new Set(e)),Nu((function(){Array.isArray(e)||fa(e)?(t.clear(),e.forEach((function(e){return t.add(e)}))):null!=e&&Vi("Cannot initialize set from "+e)})),this},t.observe_=function(e,t){return Iu(this,e)},t.intercept_=function(e){return Uu(this,e)},t.toJSON=function(){return Array.from(this)},t.toString=function(){return"[object ObservableSet]"},t[as]=function(){return this.values()},ga(e,[{key:"size",get:function(){return this.atom_.reportObserved(),this.data_.size}},{key:ls,get:function(){return"Set"}}]),e}(),ds=sa("ObservableSet",fs),ps=Object.create(null),hs="remove",ms=function(){function e(e,t,n,r){void 0===t&&(t=new Map),void 0===r&&(r=Ya),this.target_=void 0,this.values_=void 0,this.name_=void 0,this.defaultAnnotation_=void 0,this.keysAtom_=void 0,this.changeListeners_=void 0,this.interceptors_=void 0,this.proxy_=void 0,this.isPlainObject_=void 0,this.appliedAnnotations_=void 0,this.pendingKeys_=void 0,this.target_=e,this.values_=t,this.name_=n,this.defaultAnnotation_=r,this.keysAtom_=new ja("ObservableObject.keys"),this.isPlainObject_=ia(this.target_)}var t=e.prototype;return t.getObservablePropValue_=function(e){return this.values_.get(e).get()},t.setObservablePropValue_=function(e,t){var n=this.values_.get(e);if(n instanceof Rl)return n.set(t),!0;if(Lu(this)){var r=Fu(this,{type:Hu,object:this.proxy_||this.target_,name:e,newValue:t});if(!r)return null;t=r.newValue}if((t=n.prepareNewValue_(t))!==Kl.UNCHANGED){var o=zu(this),i=o?{type:Hu,observableKind:"object",debugObjectName:this.name_,object:this.proxy_||this.target_,oldValue:n.value_,name:e,newValue:t}:null;n.setNewValue_(t),o&&Bu(this,i)}return!0},t.get_=function(e){return Kl.trackingDerivation&&!ma(this.target_,e)&&this.has_(e),this.target_[e]},t.set_=function(e,t,n){return void 0===n&&(n=!1),ma(this.target_,e)?this.values_.has(e)?this.setObservablePropValue_(e,t):n?Reflect.set(this.target_,e,t):(this.target_[e]=t,!0):this.extend_(e,{value:t,enumerable:!0,writable:!0,configurable:!0},this.defaultAnnotation_,n)},t.has_=function(e){if(!Kl.trackingDerivation)return e in this.target_;this.pendingKeys_||(this.pendingKeys_=new Map);var t=this.pendingKeys_.get(e);return t||(t=new Ol(e in this.target_,Da,"ObservableObject.key?",!1),this.pendingKeys_.set(e,t)),t.get()},t.make_=function(e,t){if(!0===t&&(t=this.defaultAnnotation_),!1!==t){if(!(e in this.target_)){var n;if(null!=(n=this.target_[Ea])&&n[e])return;Vi(1,t.annotationType_,this.name_+"."+e.toString())}for(var r=this.target_;r&&r!==Zi;){var o=$i(r,e);if(o){var i=t.make_(this,e,o,r);if(0===i)return;if(1===i)break}r=Object.getPrototypeOf(r)}ws(this,0,e)}},t.extend_=function(e,t,n,r){if(void 0===r&&(r=!1),!0===n&&(n=this.defaultAnnotation_),!1===n)return this.defineProperty_(e,t,r);var o=n.extend_(this,e,t,r);return o&&ws(this,0,e),o},t.defineProperty_=function(e,t,n){void 0===n&&(n=!1),this.keysAtom_;try{Ql();var r=this.delete_(e);if(!r)return r;if(Lu(this)){var o=Fu(this,{object:this.proxy_||this.target_,name:e,type:os,newValue:t.value});if(!o)return null;var i=o.newValue;t.value!==i&&(t=ba({},t,{value:i}))}if(n){if(!Reflect.defineProperty(this.target_,e,t))return!1}else Ki(this.target_,e,t);this.notifyPropertyAddition_(e,t.value)}finally{Yl()}return!0},t.defineObservableProperty_=function(e,t,n,r){void 0===r&&(r=!1),this.keysAtom_;try{Ql();var o=this.delete_(e);if(!o)return o;if(Lu(this)){var i=Fu(this,{object:this.proxy_||this.target_,name:e,type:os,newValue:t});if(!i)return null;t=i.newValue}var a=gs(e),l={configurable:!Kl.safeDescriptors||this.isPlainObject_,enumerable:!0,get:a.get,set:a.set};if(r){if(!Reflect.defineProperty(this.target_,e,l))return!1}else Ki(this.target_,e,l);var u=new Ol(t,n,"ObservableObject.key",!1);this.values_.set(e,u),this.notifyPropertyAddition_(e,u.value_)}finally{Yl()}return!0},t.defineComputedProperty_=function(e,t,n){void 0===n&&(n=!1),this.keysAtom_;try{Ql();var r=this.delete_(e);if(!r)return r;if(Lu(this)&&!Fu(this,{object:this.proxy_||this.target_,name:e,type:os,newValue:void 0}))return null;t.name||(t.name="ObservableObject.key"),t.context=this.proxy_||this.target_;var o=gs(e),i={configurable:!Kl.safeDescriptors||this.isPlainObject_,enumerable:!1,get:o.get,set:o.set};if(n){if(!Reflect.defineProperty(this.target_,e,i))return!1}else Ki(this.target_,e,i);this.values_.set(e,new Rl(t)),this.notifyPropertyAddition_(e,void 0)}finally{Yl()}return!0},t.delete_=function(e,t){if(void 0===t&&(t=!1),this.keysAtom_,!ma(this.target_,e))return!0;if(Lu(this)&&!Fu(this,{object:this.proxy_||this.target_,name:e,type:hs}))return null;try{var n,r;Ql();var o,i=zu(this),a=this.values_.get(e),l=void 0;if(!a&&i&&(l=null==(o=$i(this.target_,e))?void 0:o.value),t){if(!Reflect.deleteProperty(this.target_,e))return!1}else delete this.target_[e];if(a&&(this.values_.delete(e),a instanceof Ol&&(l=a.value_),Xl(a)),this.keysAtom_.reportChanged(),null==(n=this.pendingKeys_)||null==(r=n.get(e))||r.set(e in this.target_),i){var u={type:hs,observableKind:"object",object:this.proxy_||this.target_,debugObjectName:this.name_,oldValue:l,name:e};i&&Bu(this,u)}}finally{Yl()}return!0},t.observe_=function(e,t){return Iu(this,e)},t.intercept_=function(e){return Uu(this,e)},t.notifyPropertyAddition_=function(e,t){var n,r,o=zu(this);if(o){var i=o?{type:os,observableKind:"object",debugObjectName:this.name_,object:this.proxy_||this.target_,name:e,newValue:t}:null;o&&Bu(this,i)}null==(n=this.pendingKeys_)||null==(r=n.get(e))||r.set(!0),this.keysAtom_.reportChanged()},t.ownKeys_=function(){return this.keysAtom_.reportObserved(),pa(this.target_)},t.keys_=function(){return this.keysAtom_.reportObserved(),Object.keys(this.target_)},e}();function vs(e,t){var n;if(ma(e,Oa))return e;var r=null!=(n=null==t?void 0:t.name)?n:"ObservableObject",o=new ms(e,new Map,String(r),function(e){var t;return e?null!=(t=e.defaultDecorator)?t:Ja(e):void 0}(t));return la(e,Oa,o),e}var ys=sa("ObservableObjectAdministration",ms);function gs(e){return ps[e]||(ps[e]={get:function(){return this[Oa].getObservablePropValue_(e)},set:function(t){return this[Oa].setObservablePropValue_(e,t)}})}function bs(e){return!!oa(e)&&ys(e[Oa])}function ws(e,t,n){var r;null==(r=e.target_[Ea])||delete r[n]}var _s,xs,Ss=Os(0),As=function(){var e=!1,t={};return Object.defineProperty(t,"0",{set:function(){e=!0}}),Object.create(t)[0]=1,!1===e}(),Es=0,ks=function(){};_s=ks,xs=Array.prototype,Object.setPrototypeOf?Object.setPrototypeOf(_s.prototype,xs):void 0!==_s.prototype.__proto__?_s.prototype.__proto__=xs:_s.prototype=xs;var Cs=function(e,t,n){function r(t,n,r,o){var i;return void 0===r&&(r="ObservableArray"),void 0===o&&(o=!1),i=e.call(this)||this,Ms((function(){var e=new $u(r,n,o,!0);e.proxy_=xa(i),ua(xa(i),Oa,e),t&&t.length&&i.spliceWithArray(0,0,t),As&&Object.defineProperty(xa(i),"0",Ss)})),i}wa(r,e);var o=r.prototype;return o.concat=function(){this[Oa].atom_.reportObserved();for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return Array.prototype.concat.apply(this.slice(),t.map((function(e){return ns(e)?e.slice():e})))},o[n]=function(){var e=this,t=0;return Is({next:function(){return t<e.length?{value:e[t++],done:!1}:{done:!0,value:void 0}}})},ga(r,[{key:"length",get:function(){return this[Oa].getArrayLength_()},set:function(e){this[Oa].setArrayLength_(e)}},{key:t,get:function(){return"Array"}}]),r}(ks,Symbol.toStringTag,Symbol.iterator);function Os(e){return{enumerable:!1,configurable:!0,get:function(){return this[Oa].get_(e)},set:function(t){this[Oa].set_(e,t)}}}function js(e){Ki(Cs.prototype,""+e,Os(e))}function Ps(e){if(e>Es){for(var t=Es;t<e+100;t++)js(t);Es=e}}function Rs(e,t,n){return new Cs(e,t,n)}function Ts(e,t){if("object"==typeof e&&null!==e){if(ns(e))return void 0!==t&&Vi(23),e[Oa].atom_;if(ds(e))return e.atom_;if(ss(e)){if(void 0===t)return e.keysAtom_;var n=e.data_.get(t)||e.hasMap_.get(t);return n||Vi(25,t,Ds(e)),n}if(bs(e)){if(!t)return Vi(26);var r=e[Oa].values_.get(t);return r||Vi(27,t,Ds(e)),r}if(Pa(e)||Tl(e)||iu(e))return e}else if(na(e)&&iu(e[Oa]))return e[Oa];Vi(28)}function Ns(e,t){return e||Vi(29),void 0!==t?Ns(Ts(e,t)):Pa(e)||Tl(e)||iu(e)||ss(e)||ds(e)?e:e[Oa]?e[Oa]:void Vi(24,e)}function Ds(e,t){var n;if(void 0!==t)n=Ts(e,t);else{if(vu(e))return e.name;n=bs(e)||ss(e)||ds(e)?Ns(e):Ts(e)}return n.name_}function Ms(e){var t=zl(),n=El(!0);Ql();try{return e()}finally{Yl(),kl(n),Il(t)}}Object.entries(Zu).forEach((function(e){var t=e[0],n=e[1];"concat"!==t&&la(Cs.prototype,t,n)})),Ps(1e3);var Ls=Zi.toString;function Us(e,t,n){return void 0===n&&(n=-1),Fs(e,t,n)}function Fs(e,t,n,r,o){if(e===t)return 0!==e||1/e==1/t;if(null==e||null==t)return!1;if(e!=e)return t!=t;var i=typeof e;if("function"!==i&&"object"!==i&&"object"!=typeof t)return!1;var a=Ls.call(e);if(a!==Ls.call(t))return!1;switch(a){case"[object RegExp]":case"[object String]":return""+e==""+t;case"[object Number]":return+e!=+e?+t!=+t:0==+e?1/+e==1/t:+e==+t;case"[object Date]":case"[object Boolean]":return+e==+t;case"[object Symbol]":return"undefined"!=typeof Symbol&&Symbol.valueOf.call(e)===Symbol.valueOf.call(t);case"[object Map]":case"[object Set]":n>=0&&n++}e=zs(e),t=zs(t);var l="[object Array]"===a;if(!l){if("object"!=typeof e||"object"!=typeof t)return!1;var u=e.constructor,s=t.constructor;if(u!==s&&!(na(u)&&u instanceof u&&na(s)&&s instanceof s)&&"constructor"in e&&"constructor"in t)return!1}if(0===n)return!1;n<0&&(n=-1),o=o||[];for(var c=(r=r||[]).length;c--;)if(r[c]===e)return o[c]===t;if(r.push(e),o.push(t),l){if((c=e.length)!==t.length)return!1;for(;c--;)if(!Fs(e[c],t[c],n-1,r,o))return!1}else{var f,d=Object.keys(e);if(c=d.length,Object.keys(t).length!==c)return!1;for(;c--;)if(!ma(t,f=d[c])||!Fs(e[f],t[f],n-1,r,o))return!1}return r.pop(),o.pop(),!0}function zs(e){return ns(e)?e.slice():ca(e)||ss(e)||fa(e)||ds(e)?Array.from(e.entries()):e}function Is(e){return e[Symbol.iterator]=Bs,e}function Bs(){return this}if(["Symbol","Map","Set"].forEach((function(e){void 0===Hi()[e]&&Vi("MobX requires global '"+e+"' to be available or polyfilled")})),"object"==typeof __MOBX_DEVTOOLS_GLOBAL_HOOK__&&__MOBX_DEVTOOLS_GLOBAL_HOOK__.injectMobx({spy:function(e){return console.warn("[mobx.spy] Is a no-op in production builds"),function(){}},extras:{getDebugName:Ds},$mobx:Oa}),!r.useState)throw new Error("mobx-react-lite requires React with Hooks support");if(!Vu)throw new Error("mobx-react-lite@3 requires mobx at least version 6 to be available");function Vs(e){e()}function Ws(e){return Au(Ts(e,t));var t}var Hs=!1;function qs(){return Hs}var $s=function(){function e(e){var t=this;Object.defineProperty(this,"finalize",{enumerable:!0,configurable:!0,writable:!0,value:e}),Object.defineProperty(this,"registrations",{enumerable:!0,configurable:!0,writable:!0,value:new Map}),Object.defineProperty(this,"sweepTimeout",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"sweep",{enumerable:!0,configurable:!0,writable:!0,value:function(e){void 0===e&&(e=1e4),clearTimeout(t.sweepTimeout),t.sweepTimeout=void 0;var n=Date.now();t.registrations.forEach((function(r,o){n-r.registeredAt>=e&&(t.finalize(r.value),t.registrations.delete(o))})),t.registrations.size>0&&t.scheduleSweep()}}),Object.defineProperty(this,"finalizeAllImmediately",{enumerable:!0,configurable:!0,writable:!0,value:function(){t.sweep(0)}})}return Object.defineProperty(e.prototype,"register",{enumerable:!1,configurable:!0,writable:!0,value:function(e,t,n){this.registrations.set(n,{value:t,registeredAt:Date.now()}),this.scheduleSweep()}}),Object.defineProperty(e.prototype,"unregister",{enumerable:!1,configurable:!0,writable:!0,value:function(e){this.registrations.delete(e)}}),Object.defineProperty(e.prototype,"scheduleSweep",{enumerable:!1,configurable:!0,writable:!0,value:function(){void 0===this.sweepTimeout&&(this.sweepTimeout=setTimeout(this.sweep,1e4))}}),e}(),Ks=new("undefined"!=typeof FinalizationRegistry?FinalizationRegistry:$s)((function(e){var t;null===(t=e.reaction)||void 0===t||t.dispose(),e.reaction=null})),Zs=function(){};function Gs(e){e.reaction=new eu("observer".concat(e.name),(function(){var t;e.stateVersion=Symbol(),null===(t=e.onStoreChange)||void 0===t||t.call(e)}))}var Qs="function"==typeof Symbol&&Symbol.for,Ys=Qs?Symbol.for("react.forward_ref"):"function"==typeof r.forwardRef&&(0,r.forwardRef)((function(e){return null})).$$typeof,Js=Qs?Symbol.for("react.memo"):"function"==typeof r.memo&&(0,r.memo)((function(e){return null})).$$typeof;function Xs(e,t){var n;if(Js&&e.$$typeof===Js)throw new Error("[mobx-react-lite] You are trying to use `observer` on a function component wrapped in either another `observer` or `React.memo`. The observer already applies 'React.memo' for you.");if(qs())return e;var o=null!==(n=null==t?void 0:t.forwardRef)&&void 0!==n&&n,i=e,a=e.displayName||e.name;if(Ys&&e.$$typeof===Ys&&(o=!0,"function"!=typeof(i=e.render)))throw new Error("[mobx-react-lite] `render` property of ForwardRef was not a function");var l,u,s=function(e,t){return function(e,t){if(void 0===t&&(t="observed"),qs())return e();var n=r.useRef(null);if(!n.current){var o={reaction:null,onStoreChange:null,stateVersion:Symbol(),name:t,subscribe:function(e){return Ks.unregister(o),o.onStoreChange=e,o.reaction||(Gs(o),o.stateVersion=Symbol()),function(){var e;o.onStoreChange=null,null===(e=o.reaction)||void 0===e||e.dispose(),o.reaction=null}},getSnapshot:function(){return o.stateVersion}};n.current=o}var i,a,l=n.current;if(l.reaction||(Gs(l),Ks.register(n,l,l)),r.useDebugValue(l.reaction,Ws),(0,Gt.useSyncExternalStore)(l.subscribe,l.getSnapshot,Zs),l.reaction.track((function(){try{i=e()}catch(e){a=e}})),a)throw a;return i}((function(){return i(e,t)}),a)};return s.displayName=e.displayName,Object.defineProperty(s,"name",{value:e.name,writable:!0,configurable:!0}),e.contextTypes&&(s.contextTypes=e.contextTypes),o&&(s=(0,r.forwardRef)(s)),s=(0,r.memo)(s),l=e,u=s,Object.keys(l).forEach((function(e){ec[e]||Object.defineProperty(u,e,Object.getOwnPropertyDescriptor(l,e))})),s}var ec={$$typeof:!0,render:!0,compare:!0,type:!0,displayName:!0};function tc(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}!function(e){e||(e=Vs),Su({reactionScheduler:e})}(Yt.unstable_batchedUpdates),Ks.finalizeAllImmediately;var nc=Symbol("patchMixins"),rc=Symbol("patchedDefinition");function oc(e,t){for(var n=this,r=arguments.length,o=new Array(r>2?r-2:0),i=2;i<r;i++)o[i-2]=arguments[i];t.locks++;try{var a;return null!=e&&(a=e.apply(this,o)),a}finally{t.locks--,0===t.locks&&t.methods.forEach((function(e){e.apply(n,o)}))}}function ic(e,t){return function(){for(var n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];oc.call.apply(oc,[this,e,t].concat(r))}}function ac(e,t,n){var r=function(e,t){var n=e[nc]=e[nc]||{},r=n[t]=n[t]||{};return r.locks=r.locks||0,r.methods=r.methods||[],r}(e,t);r.methods.indexOf(n)<0&&r.methods.push(n);var o=Object.getOwnPropertyDescriptor(e,t);if(!o||!o[rc]){var i=e[t],a=lc(e,t,o?o.enumerable:void 0,r,i);Object.defineProperty(e,t,a)}}function lc(e,t,n,r,o){var i,a=ic(o,r);return(i={})[rc]=!0,i.get=function(){return a},i.set=function(o){if(this===e)a=ic(o,r);else{var i=lc(this,t,n,r,o);Object.defineProperty(this,t,i)}},i.configurable=!0,i.enumerable=n,i}var uc=Symbol("ObserverAdministration"),sc=Symbol("isMobXReactObserver");function cc(e){var t;return null!=(t=e[uc])?t:e[uc]={reaction:null,mounted:!1,reactionInvalidatedBeforeMount:!1,forceUpdate:null,name:fc(e.constructor),state:void 0,props:void 0,context:void 0}}function fc(e){return e.displayName||e.name||"<component>"}function dc(e){var t=e.bind(this),n=cc(this);return function(){n.reaction||(n.reaction=function(e){return new eu(e.name+".render()",(function(){if(e.mounted)try{null==e.forceUpdate||e.forceUpdate()}catch(n){var t;null==(t=e.reaction)||t.dispose(),e.reaction=null}else e.reactionInvalidatedBeforeMount=!0}))}(n),n.mounted||Ks.register(this,n,this));var e=void 0,r=void 0;if(n.reaction.track((function(){try{r=function(e,t){var n=El(e);try{return t()}finally{kl(n)}}(!1,t)}catch(t){e=t}})),e)throw e;return r}}function pc(e,t){return qs()&&console.warn("[mobx-react] It seems that a re-rendering of a React component is triggered while in static (server-side) mode. Please make sure components are rendered only once server-side."),this.state!==t||!function(e,t){if(tc(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var o=0;o<n.length;o++)if(!Object.hasOwnProperty.call(t,n[o])||!tc(e[n[o]],t[n[o]]))return!1;return!0}(this.props,e)}function hc(e){return!0===e.isMobxInjector&&console.warn("Mobx observer: You are trying to use `observer` on a component that already has `inject`. Please apply `observer` before applying `inject`"),Object.prototype.isPrototypeOf.call(r.Component,e)||Object.prototype.isPrototypeOf.call(r.PureComponent,e)?function(e){var t=e.prototype;if(e[sc]){var n=fc(e);throw new Error("The provided component class ("+n+") has already been declared as an observer component.")}if(e[sc]=!0,t.componentWillReact)throw new Error("The componentWillReact life-cycle event is no longer supported");if(e.__proto__!==r.PureComponent)if(t.shouldComponentUpdate){if(t.shouldComponentUpdate!==pc)throw new Error("It is not allowed to use shouldComponentUpdate in observer based components.")}else t.shouldComponentUpdate=pc;var o=t.render;if("function"!=typeof o){var i=fc(e);throw new Error("[mobx-react] class component ("+i+") is missing `render` method.\n`observer` requires `render` being a function defined on prototype.\n`render = () => {}` or `render = function() {}` is not supported.")}t.render=function(){return Object.defineProperty(this,"render",{configurable:!1,writable:!1,value:qs()?o:dc.call(this,o)}),this.render()};var a=t.componentDidMount;return t.componentDidMount=function(){var e=this,t=cc(this);return t.mounted=!0,Ks.unregister(t),t.forceUpdate=function(){return e.forceUpdate()},t.reaction&&!t.reactionInvalidatedBeforeMount||t.forceUpdate(),null==a?void 0:a.apply(this,arguments)},ac(t,"componentWillUnmount",(function(){var e;if(!qs()){var t=cc(this);null==(e=t.reaction)||e.dispose(),t.reaction=null,t.forceUpdate=null,t.mounted=!1,t.reactionInvalidatedBeforeMount=!1}})),e}(e):Xs(e)}if(r.version.split(".")[0],!r.Component)throw new Error("mobx-react requires React to be available");if(!pl)throw new Error("mobx-react requires mobx to be available");var mc=a(6161),vc={};vc.styleTagTransform=Et(),vc.setAttributes=_t(),vc.insert=bt().bind(null,"head"),vc.domAPI=yt(),vc.insertStyleElement=St(),mt()(mc.Z,vc);var yc=mc.Z&&mc.Z.locals?mc.Z.locals:void 0,gc=function(){var e=function(t,n){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},e(t,n)};return function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),bc=function(e,t,n,r){var o,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(a=(i<3?o(a):i>3?o(t,n,a):o(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a};Su({enforceActions:"observed"});var wc=function(){function e(){var e=this;this.count=0,this.name="initial name",this.loading=!1,this.result="",this.handlePlus=function(){e.count++},this.handleRequest=function(){return function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function a(e){try{u(r.next(e))}catch(e){i(e)}}function l(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,l)}u((r=r.apply(e,t||[])).next())}))}(e,void 0,void 0,(function(){var e,t=this;return function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function l(l){return function(u){return function(l){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,l[0]&&(a=0)),a;)try{if(n=1,r&&(o=2&l[0]?r.return:l[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,l[1])).done)return o;switch(r=0,o&&(l=[2&l[0],o.value]),l[0]){case 0:case 1:o=l;break;case 4:return a.label++,{value:l[1],done:!1};case 5:a.label++,r=l[1],l=[0];continue;case 7:l=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==l[0]&&2!==l[0])){a=0;continue}if(3===l[0]&&(!o||l[1]>o[0]&&l[1]<o[3])){a.label=l[1];break}if(6===l[0]&&a.label<o[1]){a.label=o[1],o=l;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(l);break}o[2]&&a.ops.pop(),a.trys.pop();continue}l=t.call(e,a)}catch(e){l=[6,e],r=0}finally{n=o=0}if(5&l[0])throw l[1];return{value:l[0]?l[1]:void 0,done:!0}}([l,u])}}}(this,(function(n){switch(n.label){case 0:return this.loading=!0,[4,new Promise((function(e){setTimeout((function(){e("response ok")}),1e3)}))];case 1:return e=n.sent(),mu((function(){t.loading=!1,t.result=e})),[2]}}))}))},Vu(this)}return Object.defineProperty(e.prototype,"nikName",{get:function(){return"nickName - ".concat(this.name.substring(0,3))},enumerable:!1,configurable:!0}),e.prototype.handleName=function(){var e=this;setTimeout((function(){e.name="other name"}),500)},bc([pl],e.prototype,"count",void 0),bc([pl],e.prototype,"name",void 0),bc([pl],e.prototype,"loading",void 0),bc([pl],e.prototype,"result",void 0),bc([yl],e.prototype,"nikName",null),bc([pu("Handle plus")],e.prototype,"handlePlus",void 0),e}(),_c=new wc,xc=function(e){function n(){var t=null!==e&&e.apply(this,arguments)||this;return t.handleIncrement=function(){t.props.store.handlePlus()},t}return gc(n,e),n.prototype.render=function(){var e=this,n=this.props.store,r=n.count,o=n.nikName;return(0,t.jsxs)("div",{className:yc.container,children:[(0,t.jsxs)("h1",{children:["Count : ",r," ",o]}),(0,t.jsxs)("button",{onClick:function(){return _c.handlePlus()},children:["handlePlus -",">"," ",this.props.store.count]}),(0,t.jsxs)("button",{onClick:function(){return e.props.store.handleName()},children:["handleName ",this.props.store.name]}),(0,t.jsxs)("button",{onClick:this.handleIncrement,children:["handleIncrement ",this.props.store.count]}),(0,t.jsx)("div",{children:_c.loading.toString()}),(0,t.jsxs)("button",{onClick:function(){return _c.handleRequest()},children:["handleRequest ",_c.result]})]})},bc([hc],n)}(r.Component),Sc=function(e){function n(){return null!==e&&e.apply(this,arguments)||this}return gc(n,e),n.prototype.render=function(){return(0,t.jsx)(t.Fragment,{children:(0,t.jsx)(xc,{store:_c})})},n}(r.Component),Ac=function(){var e=function(t,n){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},e(t,n)};return function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Ec=function(){return Ec=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},Ec.apply(this,arguments)},kc=function(e,t,n){if(n||2===arguments.length)for(var r,o=0,i=t.length;o<i;o++)!r&&o in t||(r||(r=Array.prototype.slice.call(t,0,o)),r[o]=t[o]);return e.concat(r||Array.prototype.slice.call(t))};function Cc(){var e=(0,r.useState)(1),n=e[0],o=e[1],i=(0,r.useMemo)((function(){return 2*n}),[n]);return(0,t.jsxs)("div",{children:[(0,t.jsx)("h2",{children:"My fn component"}),(0,t.jsxs)("div",{children:["fn count: ",n]}),(0,t.jsxs)("div",{children:["slow fn: ",i,(0,t.jsx)("button",{onClick:function(){return o((function(e){return e+1}))},children:"click me"})]})]})}var Oc=function(e){function n(t){var n=e.call(this,t)||this;return n.myClick=function(){n.setState(Ec(Ec({},n.state),{a:n.state.a+1,arr:kc(kc([],n.state.arr,!0),[n.state.a],!1)}))},n.state={a:1,b:2,arr:[]},n}return Ac(n,e),n.prototype.componentWillReceiveProps=function(){},n.prototype.componentDidMount=function(){console.log("componentDidMount")},n.prototype.componentDidUpdate=function(){console.log("componentDidUpdate")},n.prototype.shouldComponentUpdate=function(e,t,n){return console.log("shouldComponentUpdate"),2!=t.a},n.prototype.render=function(){return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)("h1",{children:"MySimple component"}),(0,t.jsxs)("div",{children:["a:  ",this.state.a]}),(0,t.jsxs)("div",{children:["b:  ",this.state.b]}),(0,t.jsx)("ul",{children:this.state.arr.map((function(e,n){return(0,t.jsx)("li",{children:e},n)}))}),(0,t.jsx)("div",{children:(0,t.jsx)("button",{onClick:this.myClick,children:"click"})}),(0,t.jsx)(Cc,{})]})},n}(r.Component),jc=a(7518),Pc={};Pc.styleTagTransform=Et(),Pc.setAttributes=_t(),Pc.insert=bt().bind(null,"head"),Pc.domAPI=yt(),Pc.insertStyleElement=St(),mt()(jc.Z,Pc);var Rc=jc.Z&&jc.Z.locals?jc.Z.locals:void 0,Tc=function(){var e=function(t,n){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},e(t,n)};return function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Nc=function(){return Nc=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},Nc.apply(this,arguments)},Dc=function(e,t,n){if(n||2===arguments.length)for(var r,o=0,i=t.length;o<i;o++)!r&&o in t||(r||(r=Array.prototype.slice.call(t,0,o)),r[o]=t[o]);return e.concat(r||Array.prototype.slice.call(t))},Mc=function(e){function n(){return null!==e&&e.apply(this,arguments)||this}return Tc(n,e),n.prototype.componentWillMount=function(){console.log("OldLifeComponent componentWillMount")},n.prototype.componentDidMount=function(){console.log("OldLifeComponent componentWillMount")},n.prototype.shouldComponentUpdate=function(e,t,n){return console.log("OldLifeComponent shouldComponentUpdate"),this.props.myProp!==e.myProp},n.prototype.componentWillReceiveProps=function(e,t){console.log("OldLifeComponent componentWillReceiveProps",e)},n.prototype.componentWillUpdate=function(e,t,n){console.log("OldLifeComponent componentWillUpdate",e)},n.prototype.componentDidUpdate=function(e,t,n){console.log("OldLifeComponent componentDidUpdate",e)},n.prototype.render=function(){return console.log("OldLifeComponent render"),(0,t.jsx)(t.Fragment,{children:(0,t.jsxs)("div",{children:["OldHooksComponent",this.props.myProp]})})},n}(r.Component),Lc=function(e){function n(t){var n=e.call(this,t)||this;return n.state={localVar:1},n}return Tc(n,e),n.getDerivedStateFromProps=function(e,t){return console.log("NewLifeComponent getDerivedStateFromProps",e,t),{}},n.prototype.getSnapshotBeforeUpdate=function(e,t){return console.log("NewLifeComponent getSnapshotBeforeUpdate prevProps, prevState",e,t),null},n.prototype.componentDidUpdate=function(e,t,n){console.log("NewLifeComponent componentDidUpdate prevProps, prevState",e,t)},n.prototype.render=function(){return(0,t.jsx)(t.Fragment,{children:(0,t.jsxs)("div",{children:["NewLifeComponent props ",this.props.myPropB," state ",this.state.localVar]})})},n}(r.Component),Uc=function(e){function n(t){var n=e.call(this,t)||this;return n.myClick=function(){n.setState(Nc(Nc({},n.state),{a:n.state.a+1,arr:Dc(Dc([],n.state.arr,!0),[n.state.a],!1)}))},n.state={a:1,b:1,arr:[]},n}return Tc(n,e),n.prototype.componentWillReceiveProps=function(){},n.prototype.componentDidMount=function(){},n.prototype.componentDidUpdate=function(){},n.prototype.shouldComponentUpdate=function(e,t,n){return 2!=t.a},n.prototype.componentWillUnmount=function(){console.log("Component will unmount")},n.prototype.componentWillUpdate=function(){},n.prototype.render=function(){var e=this;return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)("div",{children:[(0,t.jsx)("h4",{children:"Old life"}),(0,t.jsx)("div",{children:(0,t.jsx)("img",{className:Rc.image,src:"./assets/hooks.PNG"})}),(0,t.jsx)(Mc,{myProp:this.state.a}),(0,t.jsxs)("div",{children:[(0,t.jsx)("h4",{children:"mounting"}),(0,t.jsxs)("ul",{children:[(0,t.jsx)("li",{children:"componentWillMount"}),(0,t.jsx)("li",{children:"render"}),(0,t.jsx)("li",{children:"componentDidMount"})]}),(0,t.jsx)("h4",{children:"Updation"}),(0,t.jsxs)("ul",{children:[(0,t.jsxs)("li",{children:["Component will receive props. принимает nextProps, nextContext",(0,t.jsx)("div",{children:(0,t.jsx)("button",{onClick:function(){return e.setState({a:e.state.a+1})},children:"update prop"})}),(0,t.jsx)("div",{children:"сработает Component will receive props - shouldComponentUpdate - componentWillUpdate - render - componentDidUpdate, если нет запрета shouldComponentUpdate"})]}),(0,t.jsx)("li",{children:"componentWillUpdate. принимает nextProps, nextState, nextContext"}),(0,t.jsx)("li",{children:"componentDidUpdate. принимает nextProps, nextState, nextContext"})]})]})]}),(0,t.jsxs)("div",{children:[(0,t.jsx)("h4",{children:"New hooks"}),(0,t.jsx)("div",{children:(0,t.jsx)("img",{className:Rc.image,src:"./assets/hooks-2.PNG"})}),(0,t.jsx)("button",{onClick:function(){return e.setState({b:e.state.b+1})},children:"update b"}),(0,t.jsx)(Lc,{myPropB:this.state.b}),(0,t.jsx)("h4",{children:"Mounting"}),(0,t.jsxs)("ul",{children:[(0,t.jsxs)("li",{children:["getDerivedStateFromProps принимает nextProps, prevState",(0,t.jsx)("br",{})," замена wiiReceiveProps"]}),(0,t.jsx)("li",{children:"Render"}),(0,t.jsx)("li",{children:"- React обновляет дерево и refs"}),(0,t.jsx)("li",{children:"componentDidMount"})]}),(0,t.jsx)("h4",{children:"Updations"}),(0,t.jsxs)("ul",{children:[(0,t.jsx)("li",{children:"getDerivedStateFromProps принимает nextProps, prevState"}),(0,t.jsx)("li",{children:"shouldComponentUpdate"}),(0,t.jsx)("li",{children:"render"}),(0,t.jsxs)("li",{children:["getSnapshotBeforeUpdate prevProps, prevState",(0,t.jsx)("br",{})," используется вместе с componentDidUpdate"]}),(0,t.jsx)("li",{children:"- React обновляет дерево и refs"}),(0,t.jsx)("li",{children:"componentDidUpdate"})]})]})]})},n}(r.Component),Fc={count:0};function zc(e){return{count:e}}var Ic=function(e,t){switch(t.type){case"increment":return{count:e.count+1};case"decrement":return{count:e.count-1};default:throw{count:0}}},Bc={light:{foreground:"#000000",background:"#eeeeee"},dark:{foreground:"#ffffff",background:"#222222"}},Vc=(0,r.createContext)(Bc.light);function Wc(){var e=(0,r.useContext)(Vc);return(0,t.jsx)(t.Fragment,{children:(0,t.jsxs)("button",{children:["Inner button theme: ",e.foreground]})})}var Hc=function(){var e=function(t,n){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},e(t,n)};return function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),qc=(0,r.createContext)("light");function $c(){var e=(0,r.useContext)(qc);return(0,t.jsxs)("div",{children:[(0,t.jsxs)("h4",{children:["toolbar ",e]}),(0,t.jsx)(Kc,{})]})}var Kc=function(e){function n(){return null!==e&&e.apply(this,arguments)||this}return Hc(n,e),n.prototype.render=function(){var e=this.context;return(0,t.jsxs)("div",{children:["ThemedButton   ",e]})},n.contextType=qc,n}(r.Component),Zc=a(7391),Gc={};Gc.styleTagTransform=Et(),Gc.setAttributes=_t(),Gc.insert=bt().bind(null,"head"),Gc.domAPI=yt(),Gc.insertStyleElement=St(),mt()(Zc.Z,Gc),Zc.Z&&Zc.Z.locals&&Zc.Z.locals;var Qc,Yc,Jc=function(e,t,n,r){var o,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(a=(i<3?o(a):i>3?o(t,n,a):o(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a},Xc=function(){function e(){var e=this;this.count=0,this.name="initial name",this.loading=!1,this.result="",this.handleCountPlus=function(){e.count++},this.handleRequest=function(){return function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function a(e){try{u(r.next(e))}catch(e){i(e)}}function l(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,l)}u((r=r.apply(e,t||[])).next())}))}(e,void 0,void 0,(function(){var e,t=this;return function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function l(l){return function(u){return function(l){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,l[0]&&(a=0)),a;)try{if(n=1,r&&(o=2&l[0]?r.return:l[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,l[1])).done)return o;switch(r=0,o&&(l=[2&l[0],o.value]),l[0]){case 0:case 1:o=l;break;case 4:return a.label++,{value:l[1],done:!1};case 5:a.label++,r=l[1],l=[0];continue;case 7:l=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==l[0]&&2!==l[0])){a=0;continue}if(3===l[0]&&(!o||l[1]>o[0]&&l[1]<o[3])){a.label=l[1];break}if(6===l[0]&&a.label<o[1]){a.label=o[1],o=l;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(l);break}o[2]&&a.ops.pop(),a.trys.pop();continue}l=t.call(e,a)}catch(e){l=[6,e],r=0}finally{n=o=0}if(5&l[0])throw l[1];return{value:l[0]?l[1]:void 0,done:!0}}([l,u])}}}(this,(function(n){switch(n.label){case 0:return this.loading=!0,[4,new Promise((function(e){setTimeout((function(){e("response ok")}),1e3)}))];case 1:return e=n.sent(),mu((function(){t.loading=!1,t.result=e})),[2]}}))}))},Vu(this)}return Jc([pl],e.prototype,"count",void 0),Jc([pl],e.prototype,"name",void 0),Jc([pl],e.prototype,"loading",void 0),Jc([pl],e.prototype,"result",void 0),e}(),ef=(0,r.createContext)(null),tf=hc((function(){var e,n=((e=(0,r.useContext)(ef))||console.warn("no init My context"),e);return(0,t.jsxs)("div",{children:[(0,t.jsx)("div",{children:n.count}),(0,t.jsx)("button",{onClick:function(){return n.handleCountPlus()},children:"handleCountPlus"}),(0,t.jsxs)("div",{children:["loading: ",n.loading.toString()," result: ",n.result]}),(0,t.jsx)("button",{onClick:function(){return n.handleRequest()},children:"handleRequest"})]})})),nf=(Qc=[{path:"todos",Component:function(){return(0,t.jsx)(t.Fragment,{children:"Todos"})}},{path:"simple",Component:Oc},{path:"mobx",Component:Sc},{path:"/",Component:function(){return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(Jo,{}),(0,t.jsx)("nav",{className:Ot.nav,children:(0,t.jsxs)("ul",{children:[(0,t.jsx)("li",{children:(0,t.jsx)(ft,{to:"/",className:function(e){var t=e.isActive;return e.isPending?"pending":t?"active":""},children:"Home"})}),(0,t.jsx)("li",{children:(0,t.jsx)(ct,{to:"/component-definition",children:"definition"})}),(0,t.jsx)("li",{children:(0,t.jsx)(ct,{to:"/type-checking",children:"Typechecking"})}),(0,t.jsx)("li",{children:(0,t.jsx)(ct,{to:"/life-cycle",children:"LifeCycle"})}),(0,t.jsx)("li",{children:(0,t.jsx)(ct,{to:"/hooks",children:"hooks"})}),(0,t.jsx)("li",{children:(0,t.jsx)(ct,{to:"/react-dom",children:"react-dom"})}),(0,t.jsx)("li",{children:(0,t.jsx)(ct,{to:"/forms",children:"forms"})}),(0,t.jsx)("li",{children:(0,t.jsx)(ct,{to:"/reuse-patterns",children:"reuse-patterns"})}),(0,t.jsx)("li",{children:(0,t.jsx)(ct,{to:"/redux-help",children:"redux-help"})}),(0,t.jsx)("li",{children:(0,t.jsx)(ct,{to:"/context",children:"context"})}),(0,t.jsx)("li",{children:(0,t.jsx)(ct,{to:"/routing",children:"routing"})}),(0,t.jsx)("li",{children:(0,t.jsx)(ct,{to:"/performance",children:"performance"})}),(0,t.jsx)("li",{children:(0,t.jsx)(ct,{to:"/testing",children:"testing"})}),(0,t.jsx)("li",{children:(0,t.jsx)(ct,{to:"/security",children:"security"})}),(0,t.jsx)("li",{children:(0,t.jsx)(ct,{to:"/my-mobx",children:"MobX"})})]})}),(0,t.jsx)(et,{})]})},children:[{index:!0,loader:function(){return function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function a(e){try{u(r.next(e))}catch(e){i(e)}}function l(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,l)}u((r=r.apply(e,t||[])).next())}))}(this,void 0,void 0,(function(){return function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function l(l){return function(u){return function(l){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,l[0]&&(a=0)),a;)try{if(n=1,r&&(o=2&l[0]?r.return:l[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,l[1])).done)return o;switch(r=0,o&&(l=[2&l[0],o.value]),l[0]){case 0:case 1:o=l;break;case 4:return a.label++,{value:l[1],done:!1};case 5:a.label++,r=l[1],l=[0];continue;case 7:l=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==l[0]&&2!==l[0])){a=0;continue}if(3===l[0]&&(!o||l[1]>o[0]&&l[1]<o[3])){a.label=l[1];break}if(6===l[0]&&a.label<o[1]){a.label=o[1],o=l;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(l);break}o[2]&&a.ops.pop(),a.trys.pop();continue}l=t.call(e,a)}catch(e){l=[6,e],r=0}finally{n=o=0}if(5&l[0])throw l[1];return{value:l[0]?l[1]:void 0,done:!0}}([l,u])}}}(this,(function(e){switch(e.label){case 0:return[4,Si()];case 1:return e.sent(),[2,{date:(new Date).toISOString()}]}}))}))},Component:function(e){Qe();var n=(0,r.useState)(0);return n[0],n[1],(0,t.jsxs)("div",{className:ti.container,children:[(0,t.jsx)(xi,{}),(0,t.jsx)(et,{})]})}},{path:"component-definition",Component:function(){return(0,t.jsx)(t.Fragment,{children:(0,t.jsxs)("ul",{children:[(0,t.jsx)("li",{children:"React-компоненты обязаны вести себя как чистые функции по отношению к своим пропсам."}),(0,t.jsx)("li",{children:"function App() {\n                    return _jsx('h1', { children: 'Hello world' });\n                    }"})]})})}},{path:"type-checking",Component:function(){return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)("div",{className:"pre-wrap",children:"  class Greeting extends React.Component {\n      render() {\n        return (\n          <h1>Hello, {this.props.name}</h1>\n        );\n      }\n    }\n\n    Greeting.propTypes = {\n      name: PropTypes.string\n    };\n"}),(0,t.jsx)("div",{className:"pre-wrap",children:"          \n    class Greeting extends React.Component<{name: string}, {value: number}>{\n    \n            render(){\n                return <>\n                    {props.name}\n                \n                </>\n            }\n    } \n            \n  "})]})}},{path:"life-cycle",Component:Uc},{path:"hooks",Component:function(){var e=(0,r.useState)(0),n=e[0],o=e[1];(0,r.useEffect)((function(){return function(){console.log("after component update")}}),[n]);var i=(0,r.useReducer)(Ic,Fc,zc),a=(i[0],i[1]);return(0,t.jsx)(t.Fragment,{children:(0,t.jsxs)("div",{children:[(0,t.jsx)("table",{className:"pre-wrap",children:(0,t.jsx)("tbody",{children:(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"\n const [state, setState] = useState(initialState);\n //componentDidMount, componentWillUnmount, componentDidUpdate\n useEffect(() => {\n  const subscription = props.source.subscribe();\n  return () => {\n    // Clean up the subscription\n    subscription.unsubscribe();\n  };\n}, [deps])\n\n//useMemo\nconst memoizedValue = useMemo(() => computeExpensiveValue(a, b), [a, b]);\n\nconst refContainer = useRef(initialValue);\n\n "}),(0,t.jsxs)("td",{children:[(0,t.jsx)("div",{children:'\nconst themes = {\n   light: {\n      foreground: "#000000",\n      background: "#eeeeee"\n   },\n   dark: {\n      foreground: "#ffffff",\n      background: "#222222"\n   }\n};\nconst ThemeContext = createContext(themes.light);\nconst value = useContext(MyContext)\ninside component\nconst theme = useContext(ThemeContext)\n                  '}),(0,t.jsx)(Vc.Provider,{value:Bc.dark,children:(0,t.jsx)(Wc,{})})]})]})})}),(0,t.jsx)("div",{children:n}),(0,t.jsx)("button",{onClick:function(){o(n+1),a({type:"decrement"})},children:"click me"})]})})}},{path:"react-dom",Component:function(){return(0,t.jsx)(t.Fragment,{children:(0,t.jsxs)("div",{className:"pre-wrap",children:["\nПакет react-dom экспортирует следующие методы:\n\ncreatePortal() когда нужно создать элемент вне дерева\n<div>\n  <SomeComponent />\n{createPortal(\n            <p>This child is placed in the document body.</p>,\n            document.body\n)}\n</div>\nflushSync()\nflushSync(() => {\n  setSomething(123);\n});\n    ",(0,Yt.createPortal)((0,t.jsx)("p",{children:"This child is placed in the document body."}),document.body)]})})}},{path:"forms",Component:function(){var e=(0,r.useState)("init value"),n=e[0],o=e[1];return(0,t.jsx)(t.Fragment,{children:(0,t.jsxs)("div",{className:"flex-row",children:[(0,t.jsx)("div",{children:(0,t.jsxs)("form",{onSubmit:function(e){alert("A name was submitted: "+n),e.preventDefault()},children:[(0,t.jsxs)("label",{children:["Name:",(0,t.jsx)("input",{type:"text",value:n,onChange:function(e){o(e.target.value)}})]}),(0,t.jsx)("input",{type:"submit",value:"Submit"})]})}),(0,t.jsx)("div",{className:"pre-wrap small",children:'\n    \nexport const FormsComponent = () =>{\n    const [value, setState] = useState(\'init value\')\n\n    const  handleSubmit = (event)=> {\n        alert(\'A name was submitted: \' + this.state.value);\n        event.preventDefault();\n    }\n    const handleChange = (event) => {\n        setState(event.target.value);\n    }\n    return <>\n        <form onSubmit={handleSubmit}>\n            <label>\n                Name:\n                <input type="text" value={value} onChange={handleChange} />\n            </label>\n            <input type="submit" value="Submit" />\n        </form>\n    </>\n\n}\n    \n    \n    '})]})})}},{path:"reuse-patterns",Component:function(){return(0,t.jsx)(t.Fragment,{children:(0,t.jsx)("div",{children:(0,t.jsxs)("ul",{children:[(0,t.jsxs)("li",{children:[(0,t.jsx)("h4",{children:"Component Pattern:"}),(0,t.jsx)("div",{children:"The Component pattern is the core of React. React is built around the concept of components, which are reusable UI elements that can be composed together to create complex user interfaces. Components can be divided into two types: presentational and container."})]}),(0,t.jsxs)("li",{children:[(0,t.jsx)("h4",{children:"2. Higher Order Component (HOC) Pattern:"}),(0,t.jsx)("div",{children:"Шаблон «Компонент более высокого порядка» используется для улучшения функциональности существующих компонентов путем их упаковки в компонент более высокого порядка. HOC позволяют повторно использовать код и добавлять новые функции к компонентам, не меняя их исходную реализацию."})]}),(0,t.jsxs)("li",{children:[(0,t.jsx)("h4",{children:"3.Render Props Pattern:"}),(0,t.jsx)("div",{children:"Шаблон Render Props используется для совместного использования кода между компонентами путем передачи функции в качестве свойства. Функция возвращает JSX, который должен быть отображен, позволяя родительскому компоненту контролировать то, что отображается. Этот шаблон полезен для создания повторно используемых компонентов, которые можно использовать во всем приложении. Например, вы можете создать компонент, который извлекает данные из API и передает их дочернему компоненту с помощью свойства рендеринга."})]}),(0,t.jsxs)("li",{children:[(0,t.jsx)("h4",{children:"4. Container-Component Pattern:"}),(0,t.jsx)("div",{children:"Шаблон «Контейнер-компонент» отделяет бизнес-логику от логики представления. Компоненты контейнера управляют состоянием и передают его презентационным компонентам, которые занимаются только рендерингом пользовательского интерфейса."})]}),(0,t.jsxs)("li",{children:[(0,t.jsx)("h4",{children:"5. Flux and Redux Patterns:"}),(0,t.jsx)("div",{children:"Шаблоны Flux и Redux используются для управления состоянием приложения. Они включают однонаправленный поток данных, при котором действия вызывают обновления в хранилище, что, в свою очередь, обновляет представления."}),(0,t.jsx)("div",{children:"Flux использует диспетчер для управления действиями и хранилища для управления состоянием. Redux использует единое хранилище для управления состоянием всего приложения, а действия запускают обновления хранилища."})]})]})})})}},{path:"redux-help",Component:function(){return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)("div",{className:"flex-row",children:[(0,t.jsxs)("div",{children:[(0,t.jsx)("h4",{children:"create store"}),(0,t.jsx)("div",{className:"pre-wrap",children:"\nconst rootReducer = combineReducers({\n    apiOpenWeatherReducer,\n    mapCloudsStateReducer,\n    routing: routerReducer,\n})\nexport const store = configureStore({\n    reducer: rootReducer,\n    middleware: (getDefaultMiddleware) =>\n        getDefaultMiddleware().prepend(listenerMiddleware.middleware),\n})\n                    \n                    "})]}),(0,t.jsxs)("div",{children:[(0,t.jsx)("h4",{children:"Middleware"}),(0,t.jsx)("div",{className:"pre-wrap",children:"export const listenerMiddleware = createListenerMiddleware<any>()\n\nlistenerMiddleware.startListening({\n    actionCreator: loadingStart,\n    effect: async (action, listenerApi) => {\n        const list = await apiReq()\n        listenerApi\n            .dispatch(loadingSuccess(list))\n    }\n})"})]})]}),(0,t.jsxs)("div",{className:"flex-row",children:[(0,t.jsxs)("div",{children:[(0,t.jsx)("h4",{children:"reducer"}),(0,t.jsx)("div",{className:"pre-wrap",children:'export const apiOpenWeatherReducer = (state = defaultState, action: AnyAction) => {\n    switch (action.type){\n        case "LOADING_START": {\n            return {\n                ...state,\n                loading: true,\n                list: [],\n            }\n        }\n        case "LOADING_SUCCESS": {\n            return {\n                ...state,\n                loading: false,\n                loaded: true,\n                list: action.payload\n            }\n        }\n        default: {\n            return state\n        }\n    }\n}'})]}),(0,t.jsxs)("div",{children:[(0,t.jsx)("h4",{children:"actions"}),(0,t.jsx)("div",{className:"pre-wrap",children:"\nexport const loadingStart = createAction('LOADING_START')\nexport const loadingSuccess = createAction('LOADING_SUCCESS',\n    (list: OpenweathermapItem[]) => ({\n        payload: list\n    }))\n"})]})]}),(0,t.jsx)("div",{className:"flex-row",children:(0,t.jsxs)("div",{children:[(0,t.jsx)("h4",{children:"Integration"}),(0,t.jsx)("div",{className:"pre-wrap",children:"\nconst ForecastListComponent = ({dispatch, loading, list, loaded}: any) {...}\nconst mapStateToProps = (state: {apiOpenWeatherReducer: ApiOpenWeatherState}) => {\n    return {\n        loading: state.apiOpenWeatherReducer.loading,\n        list: state.apiOpenWeatherReducer.list,\n        loaded: state.apiOpenWeatherReducer.loaded,\n    }\n}\nexport const ForecastListComponentConnect = connect(mapStateToProps)(ForecastListComponent)\n                        "})]})})]})}},{path:"context",Component:function(){return(0,t.jsx)(t.Fragment,{children:(0,t.jsxs)("div",{className:"flex-row",children:[(0,t.jsx)("div",{className:"pre-wrap",children:"\nconst ThemeContext = createContext('light');\nclass App extends React.Component {\n  render() {\n    return (\n      <ThemeContext.Provider value=\"dark\">\n        <Toolbar />\n      </ThemeContext.Provider>\n    );\n  }\n}\n\nfunction Toolbar() {\n    const themeContext = useContext(ThemeContext)\n    return (\n        <div>\n            <h4>\n                toolbar {themeContext}\n            </h4>\n            <ThemedButton />\n        </div>\n    );\n}\n\nclass ThemedButton extends Component<any, any> {\n    static contextType: Context<string> = ThemeContext;\n    render() {\n        const context  = this.context as string\n        return <div>\n            ThemedButton   {context}\n        </div>;\n    }\n}\n\n"}),(0,t.jsx)("div",{children:(0,t.jsx)(qc.Provider,{value:"dark",children:(0,t.jsx)($c,{})})})]})})}},{path:"routing",Component:function(){return(0,t.jsx)(t.Fragment,{children:(0,t.jsxs)("div",{className:"pre-wrap",children:["\nfunction Fallback() {\n    return <p>Performing initial data load</p>;\n}\n                    \nfunction MyLoader(): Promise<{date: string}> {\n    await sleep();\n    return {\n        date: new Date().toISOString(),\n    };\n}\n\nfunction RouterComponent(){\n    let data = useLoaderData() as {date: string};\n    return <>\n    RouterComponent\n    //children\n    <Outlet />\n    </>\n}\n                    \nexport const myRouter = createBrowserRouter([\n        {\n            path: \"todos\",\n            loader: MyLoader,\n            Component: () => RouterComponent,\n        },\n    ],\n    {\n     basename: '/',\n    }\n)       \n                    ",(0,t.jsx)("h4",{children:"Implementation"}),(0,t.jsx)("div",{className:"pre-wrap",children:"<RouterProvider router={ myRouter } fallbackElement={ <Fallback/> }/>"})]})})}},{path:"performance",Component:function(){return(0,t.jsx)(t.Fragment,{children:(0,t.jsxs)("ul",{children:[(0,t.jsxs)("li",{children:[(0,t.jsx)("h4",{children:"1. Minimize the number of re-renders"}),"Minimizing the number of re-renders is an important optimization technique in React that involves reducing the amount of unnecessary updates to the DOM caused by changes in state or props."]}),(0,t.jsxs)("li",{children:[(0,t.jsx)("h4",{children:"2. Use the Production Build"}),"Если вы проводите тестирование или испытываете проблемы с производительностью в своих приложениях React, убедитесь, что вы тестируете минимизированную производственную сборку."]}),(0,t.jsxs)("li",{children:[(0,t.jsx)("h4",{children:"3.Single-File Builds"}),"предлагаем готовые к использованию версии React и React DOM в виде отдельных файлов:",(0,t.jsx)("br",{}),(0,t.jsx)("div",{className:"pre-wrap",children:'\n                        <script src="https://unpkg.com/react@18/umd/react.production.min.js"><\/script>\n                        <script src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"><\/script>\n                        '})]}),(0,t.jsxs)("li",{children:[(0,t.jsx)("h4",{children:"Brunch"}),"For the most efficient Brunch production build, install the terser-brunch plugin:",(0,t.jsx)("br",{}),"Then, to create a production build, add the -p flag to the build command:",(0,t.jsx)("br",{}),"brunch build -p"]})]})})}},{path:"testing",Component:function(){return(0,t.jsx)(t.Fragment,{children:(0,t.jsx)("div",{className:"pre-wrap",children:'\n\nexport function Home(s: any) {\n    let data = useLoaderData() as HomeLoaderData;\n    const [count, setCount] = useState(0);\n\n    async function presetCount(e: any){\n        await sleep()\n        setCount(count + 1)\n    }\n\n    return (\n        <div className={styles.container}>\n            <ImagesComponent></ImagesComponent>\n            <Outlet/>\n        </div>\n    );\n}\n\nimport { Home } from "./home.component";\nimport { render } from "@testing-library/react";\njest.mock("../images/images.component", () => ({\n    __esModule: true,\n    ImagesComponent: () => {\n        return <div data-testid="images-component"/>;\n    },\n}));\njest.mock("react-router-dom", () => ({\n    __esModule: true,\n    useLoaderData: () => {\n        return null;\n    },\n    Outlet: () => {\n        return  <div data-testid="outlet"/>;\n    }\n}));\n\njest.mock("./home.component.less", () => ({\n    __esModule: true,\n    default: {},\n\n}));\ndescribe(\'home.component\', () => {\n    test(\'should contain images-component\', () => {\n        const { queryByTestId } = render(<Home />);\n        expect( queryByTestId("images-component") ).toBeTruthy()\n    })\n})\n\n\n'})})}},{path:"security",Component:function(){return(0,t.jsx)(t.Fragment,{children:(0,t.jsx)("div",{className:"pre-wrap",children:"\n10 React security best practices\n\nUse default XSS protection with data binding\n\nWatch out for dangerous URLs and URL-based script injection\n\nSanitize and render HTML\n\nAvoid direct DOM access\n\nSecure React server-side rendering\n\nCheck for known vulnerabilities in dependencies\n\nAvoid JSON injection attacks\n\nUse non-vulnerable versions of React\n\nUse linter configurations\n\nAvoid dangerous library code\n            \n            "})})}},{path:"my-mobx",Component:hc((function(){return(0,t.jsx)(t.Fragment,{children:(0,t.jsxs)(ef.Provider,{value:new Xc,children:[(0,t.jsx)("h4",{children:"MyMobxComponent"}),(0,t.jsxs)("div",{className:"flex-row",children:[(0,t.jsx)(tf,{}),(0,t.jsx)("div",{className:"pre-wrap",children:"\n                        \n                        \nclass MyMobxStore {\n\n    @observable count: number = 0;\n    @observable name = 'initial name'\n    @observable loading = false\n    @observable result = ''\n\n    constructor() {\n        makeObservable(this)\n    }\n\n    handleCountPlus = () => {\n        this.count++\n    }\n\n    handleRequest = async () => {\n        this.loading = true;\n        const res = await makeReq()\n        runInAction(() => {\n            this.loading = false\n            this.result = res\n        })\n    }\n}\n                        \n                        "})]})]})})}))},{path:"deferred",loader:function(){return function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function a(e){try{u(r.next(e))}catch(e){i(e)}}function l(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,l)}u((r=r.apply(e,t||[])).next())}))}(this,void 0,void 0,(function(){return function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function l(l){return function(u){return function(l){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,l[0]&&(a=0)),a;)try{if(n=1,r&&(o=2&l[0]?r.return:l[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,l[1])).done)return o;switch(r=0,o&&(l=[2&l[0],o.value]),l[0]){case 0:case 1:o=l;break;case 4:return a.label++,{value:l[1],done:!1};case 5:a.label++,r=l[1],l=[0];continue;case 7:l=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==l[0]&&2!==l[0])){a=0;continue}if(3===l[0]&&(!o||l[1]>o[0]&&l[1]<o[3])){a.label=l[1];break}if(6===l[0]&&a.label<o[1]){a.label=o[1],o=l;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(l);break}o[2]&&a.ops.pop(),a.trys.pop();continue}l=t.call(e,a)}catch(e){l=[6,e],r=0}finally{n=o=0}if(5&l[0])throw l[1];return{value:l[0]?l[1]:void 0,done:!0}}([l,u])}}}(this,(function(e){switch(e.label){case 0:return[4,Ci()];case 1:return e.sent(),[2,{date:(new Date).toISOString()}]}}))}))},Component:function(){var e=Qe();return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)("h2",{children:"DeferredPage"}),(0,t.jsx)("div",{className:ki.container,children:(0,t.jsx)("div",{className:ki.el,children:"1 dssssssc"})}),(0,t.jsxs)("div",{className:ki.container,children:[(0,t.jsx)("div",{className:ki.el,children:"2 dsd"}),(0,t.jsx)("div",{className:ki.el,children:"3 dsaaaaa"}),(0,t.jsx)("div",{className:ki.el,children:"4 dsaaaaa"})]}),(0,t.jsxs)("p",{children:["Date from loader: ",e.date]})]})}},{path:"forecast-item/:id",Component:Bi}]},{path:"*",Component:function(){return(0,t.jsx)("h1",{children:" Not found"})}}],function(t){const n=t.window?t.window:"undefined"!=typeof window?window:void 0,r=void 0!==n&&void 0!==n.document&&void 0!==n.document.createElement,o=!r;let a;if(u(t.routes.length>0,"You must provide a non-empty routes array to createRouter"),t.mapRouteProperties)a=t.mapRouteProperties;else if(t.detectErrorBoundary){let e=t.detectErrorBoundary;a=t=>({hasErrorBoundary:e(t)})}else a=Y;let l,c={},d=v(t.routes,a,void 0,c),p=t.basename||"/",m=i({v7_normalizeFormMethod:!1,v7_prependBasename:!1},t.future),g=null,b=new Set,w=null,_=null,x=null,S=null!=t.hydrationData,A=y(d,t.history.location,p),E=null;if(null==A){let e=de(404,{pathname:t.history.location.pathname}),{matches:n,route:r}=fe(d);A=n,E={[r.id]:e}}let k,C,O=!(A.some((e=>e.route.lazy))||A.some((e=>e.route.loader))&&null==t.hydrationData),j={historyAction:t.history.action,location:t.history.location,matches:A,initialized:O,navigation:K,restoreScrollPosition:null==t.hydrationData&&null,preventScrollReset:!1,revalidation:"idle",loaderData:t.hydrationData&&t.hydrationData.loaderData||{},actionData:t.hydrationData&&t.hydrationData.actionData||null,errors:t.hydrationData&&t.hydrationData.errors||E,fetchers:new Map,blockers:new Map},P=e.Pop,T=!1,N=!1,D=!1,M=[],L=[],U=new Map,F=0,z=-1,I=new Map,B=new Set,V=new Map,W=new Map,H=new Map,q=!1;function te(e){j=i({},j,e),b.forEach((e=>e(j)))}function ne(n,r){var o,a;let u,s=null!=j.actionData&&null!=j.navigation.formMethod&&ge(j.navigation.formMethod)&&"loading"===j.navigation.state&&!0!==(null==(o=n.state)?void 0:o._isRedirect);u=r.actionData?Object.keys(r.actionData).length>0?r.actionData:null:s?j.actionData:null;let c=r.loaderData?se(j.loaderData,r.loaderData,r.matches||[],r.errors):j.loaderData,f=j.blockers;f.size>0&&(f=new Map(f),f.forEach(((e,t)=>f.set(t,G))));let p=!0===T||null!=j.navigation.formMethod&&ge(j.navigation.formMethod)&&!0!==(null==(a=n.state)?void 0:a._isRedirect);l&&(d=l,l=void 0),N||P===e.Pop||(P===e.Push?t.history.push(n,n.state):P===e.Replace&&t.history.replace(n,n.state)),te(i({},r,{actionData:u,loaderData:c,historyAction:P,location:n,initialized:!0,navigation:K,revalidation:"idle",restoreScrollPosition:Fe(n,r.matches||j.matches),preventScrollReset:p,blockers:f})),P=e.Pop,T=!1,N=!1,D=!1,M=[],L=[]}async function re(n,r,o){C&&C.abort(),C=null,P=n,N=!0===(o&&o.startUninterruptedRevalidation),function(e,t){if(w&&x){let n=Ue(e,t);w[n]=x()}}(j.location,j.matches),T=!0===(o&&o.preventScrollReset);let u=l||d,s=o&&o.overrideNavigation,f=y(u,r,p);if(!f){let e=de(404,{pathname:r.pathname}),{matches:t,route:n}=fe(u);return Le(),void ne(r,{matches:t,loaderData:{},errors:{[n.id]:e}})}if(j.initialized&&!D&&function(e,t){return e.pathname===t.pathname&&e.search===t.search&&(""===e.hash?""!==t.hash:e.hash===t.hash||""!==t.hash)}(j.location,r)&&!(o&&o.submission&&ge(o.submission.formMethod)))return void ne(r,{matches:f});C=new AbortController;let m,v,g=ie(t.history,r,C.signal,o&&o.submission);if(o&&o.pendingError)v={[ce(f).route.id]:o.pendingError};else if(o&&o.submission&&ge(o.submission.formMethod)){let t=await async function(t,n,r,o,i){void 0===i&&(i={}),_e();let l,u=function(e,t){return{state:"submitting",location:e,formMethod:t.formMethod,formAction:t.formAction,formEncType:t.formEncType,formData:t.formData,json:t.json,text:t.text}}(n,r);te({navigation:u});let s=xe(o,n);if(s.route.action||s.route.lazy){if(l=await oe("action",t,s,o,c,a,p),t.signal.aborted)return{shortCircuited:!0}}else l={type:h.error,error:de(405,{method:t.method,pathname:n.pathname,routeId:s.route.id})};if(ye(l)){let e;return e=i&&null!=i.replace?i.replace:l.location===j.location.pathname+j.location.search,await le(j,l,{submission:r,replace:e}),{shortCircuited:!0}}if(ve(l)){let t=ce(o,s.route.id);return!0!==(i&&i.replace)&&(P=e.Push),{pendingActionData:{},pendingActionError:{[t.route.id]:l.error}}}if(me(l))throw de(400,{type:"defer-action"});return{pendingActionData:{[s.route.id]:l.data}}}(g,r,o.submission,f,{replace:o.replace});if(t.shortCircuited)return;m=t.pendingActionData,v=t.pendingActionError,s=Ae(r,o.submission),g=new Request(g.url,{signal:g.signal})}let{shortCircuited:b,loaderData:_,errors:S}=await async function(e,n,r,o,a,u,s,c,f){let h=o||Ae(n,a),m=a||u||Se(h),v=l||d,[y,g]=ee(t.history,j,r,m,n,D,M,L,V,B,v,p,c,f);if(Le((e=>!(r&&r.some((t=>t.route.id===e)))||y&&y.some((t=>t.route.id===e)))),z=++F,0===y.length&&0===g.length){let e=Re();return ne(n,i({matches:r,loaderData:{},errors:f||null},c?{actionData:c}:{},e?{fetchers:new Map(j.fetchers)}:{})),{shortCircuited:!0}}if(!N){g.forEach((e=>{let t=j.fetchers.get(e.key),n=Ee(void 0,t?t.data:void 0);j.fetchers.set(e.key,n)}));let e=c||j.actionData;te(i({navigation:h},e?0===Object.keys(e).length?{actionData:null}:{actionData:e}:{},g.length>0?{fetchers:new Map(j.fetchers)}:{}))}g.forEach((e=>{U.has(e.key)&&je(e.key),e.controller&&U.set(e.key,e.controller)}));let b=()=>g.forEach((e=>je(e.key)));C&&C.signal.addEventListener("abort",b);let{results:w,loaderResults:_,fetcherResults:x}=await he(j.matches,r,y,g,e);if(e.signal.aborted)return{shortCircuited:!0};C&&C.signal.removeEventListener("abort",b),g.forEach((e=>U.delete(e.key)));let S=pe(w);if(S){if(S.idx>=y.length){let e=g[S.idx-y.length].key;B.add(e)}return await le(j,S.result,{replace:s}),{shortCircuited:!0}}let{loaderData:A,errors:E}=ue(j,r,y,_,f,g,x,W);W.forEach(((e,t)=>{e.subscribe((n=>{(n||e.done)&&W.delete(t)}))}));let k=Re(),O=Te(z);return i({loaderData:A,errors:E},k||O||g.length>0?{fetchers:new Map(j.fetchers)}:{})}(g,r,f,s,o&&o.submission,o&&o.fetcherSubmission,o&&o.replace,m,v);b||(C=null,ne(r,i({matches:f},m?{actionData:m}:{},{loaderData:_,errors:S})))}function ae(e){return j.fetchers.get(e)||Z}async function le(o,a,l){let{submission:s,replace:c,isFetchActionRedirect:d}=void 0===l?{}:l;a.revalidate&&(D=!0);let h=f(o.location,a.location,i({_isRedirect:!0},d?{_isFetchActionRedirect:!0}:{}));if(u(h,"Expected a location on the redirect navigation"),Q.test(a.location)&&r){let e=t.history.createURL(a.location),r=null==R(e.pathname,p);if(n.location.origin!==e.origin||r)return void(c?n.location.replace(a.location):n.location.assign(a.location))}C=null;let m=!0===c?e.Replace:e.Push,v=s||Se(o.navigation);if($.has(a.status)&&v&&ge(v.formMethod))await re(m,h,{submission:i({},v,{formAction:a.location}),preventScrollReset:T});else if(d)await re(m,h,{overrideNavigation:Ae(h),fetcherSubmission:v,preventScrollReset:T});else{let e=Ae(h,v);await re(m,h,{overrideNavigation:e,preventScrollReset:T})}}async function he(e,n,r,o,i){let l=await Promise.all([...r.map((e=>oe("loader",i,e,n,c,a,p))),...o.map((e=>e.matches&&e.match&&e.controller?oe("loader",ie(t.history,e.path,e.controller.signal),e.match,e.matches,c,a,p):{type:h.error,error:de(404,{pathname:e.path})}))]),u=l.slice(0,r.length),s=l.slice(r.length);return await Promise.all([be(e,r,u,u.map((()=>i.signal)),!1,j.loaderData),be(e,o.map((e=>e.match)),s,o.map((e=>e.controller?e.controller.signal:null)),!0)]),{results:l,loaderResults:u,fetcherResults:s}}function _e(){D=!0,M.push(...Le()),V.forEach(((e,t)=>{U.has(t)&&(L.push(t),je(t))}))}function Ce(e,t,n){let r=ce(j.matches,t);Oe(e),te({errors:{[r.route.id]:n},fetchers:new Map(j.fetchers)})}function Oe(e){let t=j.fetchers.get(e);!U.has(e)||t&&"loading"===t.state&&I.has(e)||je(e),V.delete(e),I.delete(e),B.delete(e),j.fetchers.delete(e)}function je(e){let t=U.get(e);u(t,"Expected fetch controller: "+e),t.abort(),U.delete(e)}function Pe(e){for(let t of e){let e=ke(ae(t).data);j.fetchers.set(t,e)}}function Re(){let e=[],t=!1;for(let n of B){let r=j.fetchers.get(n);u(r,"Expected fetcher: "+n),"loading"===r.state&&(B.delete(n),e.push(n),t=!0)}return Pe(e),t}function Te(e){let t=[];for(let[n,r]of I)if(r<e){let e=j.fetchers.get(n);u(e,"Expected fetcher: "+n),"loading"===e.state&&(je(n),I.delete(n),t.push(n))}return Pe(t),t.length>0}function Ne(e){j.blockers.delete(e),H.delete(e)}function De(e,t){let n=j.blockers.get(e)||G;u("unblocked"===n.state&&"blocked"===t.state||"blocked"===n.state&&"blocked"===t.state||"blocked"===n.state&&"proceeding"===t.state||"blocked"===n.state&&"unblocked"===t.state||"proceeding"===n.state&&"unblocked"===t.state,"Invalid blocker state transition: "+n.state+" -> "+t.state);let r=new Map(j.blockers);r.set(e,t),te({blockers:r})}function Me(e){let{currentLocation:t,nextLocation:n,historyAction:r}=e;if(0===H.size)return;H.size>1&&s(!1,"A router only supports one blocker at a time");let o=Array.from(H.entries()),[i,a]=o[o.length-1],l=j.blockers.get(i);return l&&"proceeding"===l.state?void 0:a({currentLocation:t,nextLocation:n,historyAction:r})?i:void 0}function Le(e){let t=[];return W.forEach(((n,r)=>{e&&!e(r)||(n.cancel(),t.push(r),W.delete(r))})),t}function Ue(e,t){if(_){let n=_(e,t.map((e=>function(e,t){let{route:n,pathname:r,params:o}=e;return{id:n.id,pathname:r,params:o,data:t[n.id],handle:n.handle}}(e,j.loaderData))));return n||e.key}return e.key}function Fe(e,t){if(w){let n=Ue(e,t),r=w[n];if("number"==typeof r)return r}return null}return k={get basename(){return p},get state(){return j},get routes(){return d},initialize:function(){return g=t.history.listen((e=>{let{action:n,location:r,delta:o}=e;if(q)return void(q=!1);s(0===H.size||null!=o,"You are trying to use a blocker on a POP navigation to a location that was not created by @remix-run/router. This will fail silently in production. This can happen if you are navigating outside the router via `window.history.pushState`/`window.location.hash` instead of using router navigation APIs.  This can also happen if you are using createHashRouter and the user manually changes the URL.");let i=Me({currentLocation:j.location,nextLocation:r,historyAction:n});return i&&null!=o?(q=!0,t.history.go(-1*o),void De(i,{state:"blocked",location:r,proceed(){De(i,{state:"proceeding",proceed:void 0,reset:void 0,location:r}),t.history.go(o)},reset(){let e=new Map(j.blockers);e.set(i,G),te({blockers:e})}})):re(n,r)})),j.initialized||re(e.Pop,j.location),k},subscribe:function(e){return b.add(e),()=>b.delete(e)},enableScrollRestoration:function(e,t,n){if(w=e,x=t,_=n||null,!S&&j.navigation===K){S=!0;let e=Fe(j.location,j.matches);null!=e&&te({restoreScrollPosition:e})}return()=>{w=null,x=null,_=null}},navigate:async function n(r,o){if("number"==typeof r)return void t.history.go(r);let a=J(j.location,j.matches,p,m.v7_prependBasename,r,null==o?void 0:o.fromRouteId,null==o?void 0:o.relative),{path:l,submission:u,error:s}=X(m.v7_normalizeFormMethod,!1,a,o),c=j.location,d=f(j.location,l,o&&o.state);d=i({},d,t.history.encodeLocation(d));let h=o&&null!=o.replace?o.replace:void 0,v=e.Push;!0===h?v=e.Replace:!1===h||null!=u&&ge(u.formMethod)&&u.formAction===j.location.pathname+j.location.search&&(v=e.Replace);let y=o&&"preventScrollReset"in o?!0===o.preventScrollReset:void 0,g=Me({currentLocation:c,nextLocation:d,historyAction:v});if(!g)return await re(v,d,{submission:u,pendingError:s,preventScrollReset:y,replace:o&&o.replace});De(g,{state:"blocked",location:d,proceed(){De(g,{state:"proceeding",proceed:void 0,reset:void 0,location:d}),n(r,o)},reset(){let e=new Map(j.blockers);e.set(g,G),te({blockers:e})}})},fetch:function(e,n,r,s){if(o)throw new Error("router.fetch() was called during the server render, but it shouldn't be. You are likely calling a useFetcher() method in the body of your component. Try moving it to a useEffect or a callback.");U.has(e)&&je(e);let f=l||d,h=J(j.location,j.matches,p,m.v7_prependBasename,r,n,null==s?void 0:s.relative),v=y(f,h,p);if(!v)return void Ce(e,n,de(404,{pathname:h}));let{path:g,submission:b,error:w}=X(m.v7_normalizeFormMethod,!0,h,s);if(w)return void Ce(e,n,w);let _=xe(v,g);T=!0===(s&&s.preventScrollReset),b&&ge(b.formMethod)?async function(e,n,r,o,s,f){if(_e(),V.delete(e),!o.route.action&&!o.route.lazy){let t=de(405,{method:f.formMethod,pathname:r,routeId:n});return void Ce(e,n,t)}let h=function(e,t){return{state:"submitting",formMethod:e.formMethod,formAction:e.formAction,formEncType:e.formEncType,formData:e.formData,json:e.json,text:e.text,data:t?t.data:void 0," _hasFetcherDoneAnything ":!0}}(f,j.fetchers.get(e));j.fetchers.set(e,h),te({fetchers:new Map(j.fetchers)});let m=new AbortController,v=ie(t.history,r,m.signal,f);U.set(e,m);let g=F,b=await oe("action",v,o,s,c,a,p);if(v.signal.aborted)return void(U.get(e)===m&&U.delete(e));if(ye(b)){if(U.delete(e),z>g){let t=ke(void 0);return j.fetchers.set(e,t),void te({fetchers:new Map(j.fetchers)})}{B.add(e);let t=Ee(f);return j.fetchers.set(e,t),te({fetchers:new Map(j.fetchers)}),le(j,b,{submission:f,isFetchActionRedirect:!0})}}if(ve(b))return void Ce(e,n,b.error);if(me(b))throw de(400,{type:"defer-action"});let w=j.navigation.location||j.location,_=ie(t.history,w,m.signal),x=l||d,S="idle"!==j.navigation.state?y(x,j.navigation.location,p):j.matches;u(S,"Didn't find any matches after fetcher action");let A=++F;I.set(e,A);let E=Ee(f,b.data);j.fetchers.set(e,E);let[k,O]=ee(t.history,j,S,f,w,D,M,L,V,B,x,p,{[o.route.id]:b.data},void 0);O.filter((t=>t.key!==e)).forEach((e=>{let t=e.key,n=j.fetchers.get(t),r=Ee(void 0,n?n.data:void 0);j.fetchers.set(t,r),U.has(t)&&je(t),e.controller&&U.set(t,e.controller)})),te({fetchers:new Map(j.fetchers)});let R=()=>O.forEach((e=>je(e.key)));m.signal.addEventListener("abort",R);let{results:T,loaderResults:N,fetcherResults:H}=await he(j.matches,S,k,O,_);if(m.signal.aborted)return;m.signal.removeEventListener("abort",R),I.delete(e),U.delete(e),O.forEach((e=>U.delete(e.key)));let q=pe(T);if(q){if(q.idx>=k.length){let e=O[q.idx-k.length].key;B.add(e)}return le(j,q.result)}let{loaderData:$,errors:K}=ue(j,j.matches,k,N,void 0,O,H,W);if(j.fetchers.has(e)){let t=ke(b.data);j.fetchers.set(e,t)}let Z=Te(A);"loading"===j.navigation.state&&A>z?(u(P,"Expected pending action"),C&&C.abort(),ne(j.navigation.location,{matches:S,loaderData:$,errors:K,fetchers:new Map(j.fetchers)})):(te(i({errors:K,loaderData:se(j.loaderData,$,S,K)},Z||O.length>0?{fetchers:new Map(j.fetchers)}:{})),D=!1)}(e,n,g,_,v,b):(V.set(e,{routeId:n,path:g}),async function(e,n,r,o,i,l){let s=j.fetchers.get(e),f=Ee(l,s?s.data:void 0);j.fetchers.set(e,f),te({fetchers:new Map(j.fetchers)});let d=new AbortController,h=ie(t.history,r,d.signal);U.set(e,d);let m=F,v=await oe("loader",h,o,i,c,a,p);if(me(v)&&(v=await we(v,h.signal,!0)||v),U.get(e)===d&&U.delete(e),h.signal.aborted)return;if(ye(v)){if(z>m){let t=ke(void 0);return j.fetchers.set(e,t),void te({fetchers:new Map(j.fetchers)})}return B.add(e),void await le(j,v)}if(ve(v)){let t=ce(j.matches,n);return j.fetchers.delete(e),void te({fetchers:new Map(j.fetchers),errors:{[t.route.id]:v.error}})}u(!me(v),"Unhandled fetcher deferred data");let y=ke(v.data);j.fetchers.set(e,y),te({fetchers:new Map(j.fetchers)})}(e,n,g,_,v,b))},revalidate:function(){_e(),te({revalidation:"loading"}),"submitting"!==j.navigation.state&&("idle"!==j.navigation.state?re(P||j.historyAction,j.navigation.location,{overrideNavigation:j.navigation}):re(j.historyAction,j.location,{startUninterruptedRevalidation:!0}))},createHref:e=>t.history.createHref(e),encodeLocation:e=>t.history.encodeLocation(e),getFetcher:ae,deleteFetcher:Oe,dispose:function(){g&&g(),b.clear(),C&&C.abort(),j.fetchers.forEach(((e,t)=>Oe(t))),j.blockers.forEach(((e,t)=>Ne(t)))},getBlocker:function(e,t){let n=j.blockers.get(e)||G;return H.get(e)!==t&&H.set(e,t),n},deleteBlocker:Ne,_internalFetchControllers:U,_internalActiveDeferreds:W,_internalSetRoutes:function(e){c={},l=v(e,a,void 0,c)}},k}({basename:null==(Yc={basename:"https://maxislav.github.io/weather-3/build/"})?void 0:Yc.basename,future:rt({},null==Yc?void 0:Yc.future,{v7_prependBasename:!0}),history:function(t){return void 0===t&&(t={}),function(t,n,r,o){void 0===o&&(o={});let{window:a=document.defaultView,v5Compat:s=!1}=o,p=a.history,h=e.Pop,m=null,v=y();function y(){return(p.state||{idx:null}).idx}function g(){h=e.Pop;let t=y(),n=null==t?null:t-v;v=t,m&&m({action:h,location:w.location,delta:n})}function b(e){let t="null"!==a.location.origin?a.location.origin:a.location.href,n="string"==typeof e?e:d(e);return u(t,"No window.location.(origin|href) available to create URL for href: "+n),new URL(n,t)}null==v&&(v=0,p.replaceState(i({},p.state,{idx:v}),""));let w={get action(){return h},get location(){return t(a,p)},listen(e){if(m)throw new Error("A history only accepts one active listener");return a.addEventListener(l,g),m=e,()=>{a.removeEventListener(l,g),m=null}},createHref(e){return n(a,e)},createURL:b,encodeLocation(e){let t=b(e);return{pathname:t.pathname,search:t.search,hash:t.hash}},push:function(t,n){h=e.Push;let o=f(w.location,t,n);r&&r(o,t),v=y()+1;let i=c(o,v),l=w.createHref(o);try{p.pushState(i,"",l)}catch(e){if(e instanceof DOMException&&"DataCloneError"===e.name)throw e;a.location.assign(l)}s&&m&&m({action:h,location:w.location,delta:1})},replace:function(t,n){h=e.Replace;let o=f(w.location,t,n);r&&r(o,t),v=y();let i=c(o,v),a=w.createHref(o);p.replaceState(i,"",a),s&&m&&m({action:h,location:w.location,delta:0})},go(e){return p.go(e)}};return w}((function(e,t){let{pathname:n,search:r,hash:o}=e.location;return f("",{pathname:n,search:r,hash:o},t.state&&t.state.usr||null,t.state&&t.state.key||"default")}),(function(e,t){return"string"==typeof t?t:d(t)}),null,t)}({window:null==Yc?void 0:Yc.window}),hydrationData:(null==Yc?void 0:Yc.hydrationData)||function(){var e;let t=null==(e=window)?void 0:e.__staticRouterHydrationData;return t&&t.errors&&(t=rt({},t,{errors:lt(t.errors)})),t}(),routes:Qc,mapRouteProperties:function(e){let t={hasErrorBoundary:null!=e.ErrorBoundary||null!=e.errorElement};return e.Component&&Object.assign(t,{element:r.createElement(e.Component),Component:void 0}),e.ErrorBoundary&&Object.assign(t,{errorElement:r.createElement(e.ErrorBoundary),ErrorBoundary:void 0}),t}}).initialize()),rf=a(6297),of={};of.styleTagTransform=Et(),of.setAttributes=_t(),of.insert=bt().bind(null,"head"),of.domAPI=yt(),of.insertStyleElement=St(),mt()(rf.Z,of);var af=rf.Z&&rf.Z.locals?rf.Z.locals:void 0;function lf(){return(0,t.jsx)("p",{children:"Performing initial data load"})}function uf(e,t){return function(){return e.apply(t,arguments)}}const{toString:sf}=Object.prototype,{getPrototypeOf:cf}=Object,ff=(vf=Object.create(null),e=>{const t=sf.call(e);return vf[t]||(vf[t]=t.slice(8,-1).toLowerCase())}),df=e=>(e=e.toLowerCase(),t=>ff(t)===e),pf=e=>t=>typeof t===e,{isArray:hf}=Array,mf=pf("undefined");var vf;const yf=df("ArrayBuffer"),gf=pf("string"),bf=pf("function"),wf=pf("number"),_f=e=>null!==e&&"object"==typeof e,xf=e=>{if("object"!==ff(e))return!1;const t=cf(e);return!(null!==t&&t!==Object.prototype&&null!==Object.getPrototypeOf(t)||Symbol.toStringTag in e||Symbol.iterator in e)},Sf=df("Date"),Af=df("File"),Ef=df("Blob"),kf=df("FileList"),Cf=df("URLSearchParams");function Of(e,t,{allOwnKeys:n=!1}={}){if(null==e)return;let r,o;if("object"!=typeof e&&(e=[e]),hf(e))for(r=0,o=e.length;r<o;r++)t.call(null,e[r],r,e);else{const o=n?Object.getOwnPropertyNames(e):Object.keys(e),i=o.length;let a;for(r=0;r<i;r++)a=o[r],t.call(null,e[a],a,e)}}function jf(e,t){t=t.toLowerCase();const n=Object.keys(e);let r,o=n.length;for(;o-- >0;)if(r=n[o],t===r.toLowerCase())return r;return null}const Pf="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:global,Rf=e=>!mf(e)&&e!==Pf,Tf=(Nf="undefined"!=typeof Uint8Array&&cf(Uint8Array),e=>Nf&&e instanceof Nf);var Nf;const Df=df("HTMLFormElement"),Mf=(({hasOwnProperty:e})=>(t,n)=>e.call(t,n))(Object.prototype),Lf=df("RegExp"),Uf=(e,t)=>{const n=Object.getOwnPropertyDescriptors(e),r={};Of(n,((n,o)=>{let i;!1!==(i=t(n,o,e))&&(r[o]=i||n)})),Object.defineProperties(e,r)},Ff="abcdefghijklmnopqrstuvwxyz",zf="0123456789",If={DIGIT:zf,ALPHA:Ff,ALPHA_DIGIT:Ff+Ff.toUpperCase()+zf},Bf=df("AsyncFunction");var Vf={isArray:hf,isArrayBuffer:yf,isBuffer:function(e){return null!==e&&!mf(e)&&null!==e.constructor&&!mf(e.constructor)&&bf(e.constructor.isBuffer)&&e.constructor.isBuffer(e)},isFormData:e=>{let t;return e&&("function"==typeof FormData&&e instanceof FormData||bf(e.append)&&("formdata"===(t=ff(e))||"object"===t&&bf(e.toString)&&"[object FormData]"===e.toString()))},isArrayBufferView:function(e){let t;return t="undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&yf(e.buffer),t},isString:gf,isNumber:wf,isBoolean:e=>!0===e||!1===e,isObject:_f,isPlainObject:xf,isUndefined:mf,isDate:Sf,isFile:Af,isBlob:Ef,isRegExp:Lf,isFunction:bf,isStream:e=>_f(e)&&bf(e.pipe),isURLSearchParams:Cf,isTypedArray:Tf,isFileList:kf,forEach:Of,merge:function e(){const{caseless:t}=Rf(this)&&this||{},n={},r=(r,o)=>{const i=t&&jf(n,o)||o;xf(n[i])&&xf(r)?n[i]=e(n[i],r):xf(r)?n[i]=e({},r):hf(r)?n[i]=r.slice():n[i]=r};for(let e=0,t=arguments.length;e<t;e++)arguments[e]&&Of(arguments[e],r);return n},extend:(e,t,n,{allOwnKeys:r}={})=>(Of(t,((t,r)=>{n&&bf(t)?e[r]=uf(t,n):e[r]=t}),{allOwnKeys:r}),e),trim:e=>e.trim?e.trim():e.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,""),stripBOM:e=>(65279===e.charCodeAt(0)&&(e=e.slice(1)),e),inherits:(e,t,n,r)=>{e.prototype=Object.create(t.prototype,r),e.prototype.constructor=e,Object.defineProperty(e,"super",{value:t.prototype}),n&&Object.assign(e.prototype,n)},toFlatObject:(e,t,n,r)=>{let o,i,a;const l={};if(t=t||{},null==e)return t;do{for(o=Object.getOwnPropertyNames(e),i=o.length;i-- >0;)a=o[i],r&&!r(a,e,t)||l[a]||(t[a]=e[a],l[a]=!0);e=!1!==n&&cf(e)}while(e&&(!n||n(e,t))&&e!==Object.prototype);return t},kindOf:ff,kindOfTest:df,endsWith:(e,t,n)=>{e=String(e),(void 0===n||n>e.length)&&(n=e.length),n-=t.length;const r=e.indexOf(t,n);return-1!==r&&r===n},toArray:e=>{if(!e)return null;if(hf(e))return e;let t=e.length;if(!wf(t))return null;const n=new Array(t);for(;t-- >0;)n[t]=e[t];return n},forEachEntry:(e,t)=>{const n=(e&&e[Symbol.iterator]).call(e);let r;for(;(r=n.next())&&!r.done;){const n=r.value;t.call(e,n[0],n[1])}},matchAll:(e,t)=>{let n;const r=[];for(;null!==(n=e.exec(t));)r.push(n);return r},isHTMLForm:Df,hasOwnProperty:Mf,hasOwnProp:Mf,reduceDescriptors:Uf,freezeMethods:e=>{Uf(e,((t,n)=>{if(bf(e)&&-1!==["arguments","caller","callee"].indexOf(n))return!1;const r=e[n];bf(r)&&(t.enumerable=!1,"writable"in t?t.writable=!1:t.set||(t.set=()=>{throw Error("Can not rewrite read-only method '"+n+"'")}))}))},toObjectSet:(e,t)=>{const n={},r=e=>{e.forEach((e=>{n[e]=!0}))};return hf(e)?r(e):r(String(e).split(t)),n},toCamelCase:e=>e.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,(function(e,t,n){return t.toUpperCase()+n})),noop:()=>{},toFiniteNumber:(e,t)=>(e=+e,Number.isFinite(e)?e:t),findKey:jf,global:Pf,isContextDefined:Rf,ALPHABET:If,generateString:(e=16,t=If.ALPHA_DIGIT)=>{let n="";const{length:r}=t;for(;e--;)n+=t[Math.random()*r|0];return n},isSpecCompliantForm:function(e){return!!(e&&bf(e.append)&&"FormData"===e[Symbol.toStringTag]&&e[Symbol.iterator])},toJSONObject:e=>{const t=new Array(10),n=(e,r)=>{if(_f(e)){if(t.indexOf(e)>=0)return;if(!("toJSON"in e)){t[r]=e;const o=hf(e)?[]:{};return Of(e,((e,t)=>{const i=n(e,r+1);!mf(i)&&(o[t]=i)})),t[r]=void 0,o}}return e};return n(e,0)},isAsyncFn:Bf,isThenable:e=>e&&(_f(e)||bf(e))&&bf(e.then)&&bf(e.catch)};function Wf(e,t,n,r,o){Error.call(this),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=(new Error).stack,this.message=e,this.name="AxiosError",t&&(this.code=t),n&&(this.config=n),r&&(this.request=r),o&&(this.response=o)}Vf.inherits(Wf,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:Vf.toJSONObject(this.config),code:this.code,status:this.response&&this.response.status?this.response.status:null}}});const Hf=Wf.prototype,qf={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED","ERR_NOT_SUPPORT","ERR_INVALID_URL"].forEach((e=>{qf[e]={value:e}})),Object.defineProperties(Wf,qf),Object.defineProperty(Hf,"isAxiosError",{value:!0}),Wf.from=(e,t,n,r,o,i)=>{const a=Object.create(Hf);return Vf.toFlatObject(e,a,(function(e){return e!==Error.prototype}),(e=>"isAxiosError"!==e)),Wf.call(a,e.message,t,n,r,o),a.cause=e,a.name=e.name,i&&Object.assign(a,i),a};var $f=Wf;function Kf(e){return Vf.isPlainObject(e)||Vf.isArray(e)}function Zf(e){return Vf.endsWith(e,"[]")?e.slice(0,-2):e}function Gf(e,t,n){return e?e.concat(t).map((function(e,t){return e=Zf(e),!n&&t?"["+e+"]":e})).join(n?".":""):t}const Qf=Vf.toFlatObject(Vf,{},null,(function(e){return/^is[A-Z]/.test(e)}));var Yf=function(e,t,n){if(!Vf.isObject(e))throw new TypeError("target must be an object");t=t||new FormData;const r=(n=Vf.toFlatObject(n,{metaTokens:!0,dots:!1,indexes:!1},!1,(function(e,t){return!Vf.isUndefined(t[e])}))).metaTokens,o=n.visitor||s,i=n.dots,a=n.indexes,l=(n.Blob||"undefined"!=typeof Blob&&Blob)&&Vf.isSpecCompliantForm(t);if(!Vf.isFunction(o))throw new TypeError("visitor must be a function");function u(e){if(null===e)return"";if(Vf.isDate(e))return e.toISOString();if(!l&&Vf.isBlob(e))throw new $f("Blob is not supported. Use a Buffer instead.");return Vf.isArrayBuffer(e)||Vf.isTypedArray(e)?l&&"function"==typeof Blob?new Blob([e]):Buffer.from(e):e}function s(e,n,o){let l=e;if(e&&!o&&"object"==typeof e)if(Vf.endsWith(n,"{}"))n=r?n:n.slice(0,-2),e=JSON.stringify(e);else if(Vf.isArray(e)&&function(e){return Vf.isArray(e)&&!e.some(Kf)}(e)||(Vf.isFileList(e)||Vf.endsWith(n,"[]"))&&(l=Vf.toArray(e)))return n=Zf(n),l.forEach((function(e,r){!Vf.isUndefined(e)&&null!==e&&t.append(!0===a?Gf([n],r,i):null===a?n:n+"[]",u(e))})),!1;return!!Kf(e)||(t.append(Gf(o,n,i),u(e)),!1)}const c=[],f=Object.assign(Qf,{defaultVisitor:s,convertValue:u,isVisitable:Kf});if(!Vf.isObject(e))throw new TypeError("data must be an object");return function e(n,r){if(!Vf.isUndefined(n)){if(-1!==c.indexOf(n))throw Error("Circular reference detected in "+r.join("."));c.push(n),Vf.forEach(n,(function(n,i){!0===(!(Vf.isUndefined(n)||null===n)&&o.call(t,n,Vf.isString(i)?i.trim():i,r,f))&&e(n,r?r.concat(i):[i])})),c.pop()}}(e),t};function Jf(e){const t={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+","%00":"\0"};return encodeURIComponent(e).replace(/[!'()~]|%20|%00/g,(function(e){return t[e]}))}function Xf(e,t){this._pairs=[],e&&Yf(e,this,t)}const ed=Xf.prototype;ed.append=function(e,t){this._pairs.push([e,t])},ed.toString=function(e){const t=e?function(t){return e.call(this,t,Jf)}:Jf;return this._pairs.map((function(e){return t(e[0])+"="+t(e[1])}),"").join("&")};var td=Xf;function nd(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}function rd(e,t,n){if(!t)return e;const r=n&&n.encode||nd,o=n&&n.serialize;let i;if(i=o?o(t,n):Vf.isURLSearchParams(t)?t.toString():new td(t,n).toString(r),i){const t=e.indexOf("#");-1!==t&&(e=e.slice(0,t)),e+=(-1===e.indexOf("?")?"?":"&")+i}return e}var od=class{constructor(){this.handlers=[]}use(e,t,n){return this.handlers.push({fulfilled:e,rejected:t,synchronous:!!n&&n.synchronous,runWhen:n?n.runWhen:null}),this.handlers.length-1}eject(e){this.handlers[e]&&(this.handlers[e]=null)}clear(){this.handlers&&(this.handlers=[])}forEach(e){Vf.forEach(this.handlers,(function(t){null!==t&&e(t)}))}},id={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},ad={isBrowser:!0,classes:{URLSearchParams:"undefined"!=typeof URLSearchParams?URLSearchParams:td,FormData:"undefined"!=typeof FormData?FormData:null,Blob:"undefined"!=typeof Blob?Blob:null},isStandardBrowserEnv:(()=>{let e;return("undefined"==typeof navigator||"ReactNative"!==(e=navigator.product)&&"NativeScript"!==e&&"NS"!==e)&&"undefined"!=typeof window&&"undefined"!=typeof document})(),isStandardBrowserWebWorkerEnv:"undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope&&"function"==typeof self.importScripts,protocols:["http","https","file","blob","url","data"]},ld=function(e){function t(e,n,r,o){let i=e[o++];const a=Number.isFinite(+i),l=o>=e.length;return i=!i&&Vf.isArray(r)?r.length:i,l?(Vf.hasOwnProp(r,i)?r[i]=[r[i],n]:r[i]=n,!a):(r[i]&&Vf.isObject(r[i])||(r[i]=[]),t(e,n,r[i],o)&&Vf.isArray(r[i])&&(r[i]=function(e){const t={},n=Object.keys(e);let r;const o=n.length;let i;for(r=0;r<o;r++)i=n[r],t[i]=e[i];return t}(r[i])),!a)}if(Vf.isFormData(e)&&Vf.isFunction(e.entries)){const n={};return Vf.forEachEntry(e,((e,r)=>{t(function(e){return Vf.matchAll(/\w+|\[(\w*)]/g,e).map((e=>"[]"===e[0]?"":e[1]||e[0]))}(e),r,n,0)})),n}return null};const ud={transitional:id,adapter:ad.isNode?"http":"xhr",transformRequest:[function(e,t){const n=t.getContentType()||"",r=n.indexOf("application/json")>-1,o=Vf.isObject(e);if(o&&Vf.isHTMLForm(e)&&(e=new FormData(e)),Vf.isFormData(e))return r&&r?JSON.stringify(ld(e)):e;if(Vf.isArrayBuffer(e)||Vf.isBuffer(e)||Vf.isStream(e)||Vf.isFile(e)||Vf.isBlob(e))return e;if(Vf.isArrayBufferView(e))return e.buffer;if(Vf.isURLSearchParams(e))return t.setContentType("application/x-www-form-urlencoded;charset=utf-8",!1),e.toString();let i;if(o){if(n.indexOf("application/x-www-form-urlencoded")>-1)return function(e,t){return Yf(e,new ad.classes.URLSearchParams,Object.assign({visitor:function(e,t,n,r){return ad.isNode&&Vf.isBuffer(e)?(this.append(t,e.toString("base64")),!1):r.defaultVisitor.apply(this,arguments)}},t))}(e,this.formSerializer).toString();if((i=Vf.isFileList(e))||n.indexOf("multipart/form-data")>-1){const t=this.env&&this.env.FormData;return Yf(i?{"files[]":e}:e,t&&new t,this.formSerializer)}}return o||r?(t.setContentType("application/json",!1),function(e,t,n){if(Vf.isString(e))try{return(0,JSON.parse)(e),Vf.trim(e)}catch(e){if("SyntaxError"!==e.name)throw e}return(0,JSON.stringify)(e)}(e)):e}],transformResponse:[function(e){const t=this.transitional||ud.transitional,n=t&&t.forcedJSONParsing,r="json"===this.responseType;if(e&&Vf.isString(e)&&(n&&!this.responseType||r)){const n=!(t&&t.silentJSONParsing)&&r;try{return JSON.parse(e)}catch(e){if(n){if("SyntaxError"===e.name)throw $f.from(e,$f.ERR_BAD_RESPONSE,this,null,this.response);throw e}}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:ad.classes.FormData,Blob:ad.classes.Blob},validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*","Content-Type":void 0}}};Vf.forEach(["delete","get","head","post","put","patch"],(e=>{ud.headers[e]={}}));var sd=ud;const cd=Vf.toObjectSet(["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"]),fd=Symbol("internals");function dd(e){return e&&String(e).trim().toLowerCase()}function pd(e){return!1===e||null==e?e:Vf.isArray(e)?e.map(pd):String(e)}function hd(e,t,n,r,o){return Vf.isFunction(r)?r.call(this,t,n):(o&&(t=n),Vf.isString(t)?Vf.isString(r)?-1!==t.indexOf(r):Vf.isRegExp(r)?r.test(t):void 0:void 0)}class md{constructor(e){e&&this.set(e)}set(e,t,n){const r=this;function o(e,t,n){const o=dd(t);if(!o)throw new Error("header name must be a non-empty string");const i=Vf.findKey(r,o);(!i||void 0===r[i]||!0===n||void 0===n&&!1!==r[i])&&(r[i||t]=pd(e))}const i=(e,t)=>Vf.forEach(e,((e,n)=>o(e,n,t)));return Vf.isPlainObject(e)||e instanceof this.constructor?i(e,t):Vf.isString(e)&&(e=e.trim())&&!/^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(e.trim())?i((e=>{const t={};let n,r,o;return e&&e.split("\n").forEach((function(e){o=e.indexOf(":"),n=e.substring(0,o).trim().toLowerCase(),r=e.substring(o+1).trim(),!n||t[n]&&cd[n]||("set-cookie"===n?t[n]?t[n].push(r):t[n]=[r]:t[n]=t[n]?t[n]+", "+r:r)})),t})(e),t):null!=e&&o(t,e,n),this}get(e,t){if(e=dd(e)){const n=Vf.findKey(this,e);if(n){const e=this[n];if(!t)return e;if(!0===t)return function(e){const t=Object.create(null),n=/([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;let r;for(;r=n.exec(e);)t[r[1]]=r[2];return t}(e);if(Vf.isFunction(t))return t.call(this,e,n);if(Vf.isRegExp(t))return t.exec(e);throw new TypeError("parser must be boolean|regexp|function")}}}has(e,t){if(e=dd(e)){const n=Vf.findKey(this,e);return!(!n||void 0===this[n]||t&&!hd(0,this[n],n,t))}return!1}delete(e,t){const n=this;let r=!1;function o(e){if(e=dd(e)){const o=Vf.findKey(n,e);!o||t&&!hd(0,n[o],o,t)||(delete n[o],r=!0)}}return Vf.isArray(e)?e.forEach(o):o(e),r}clear(e){const t=Object.keys(this);let n=t.length,r=!1;for(;n--;){const o=t[n];e&&!hd(0,this[o],o,e,!0)||(delete this[o],r=!0)}return r}normalize(e){const t=this,n={};return Vf.forEach(this,((r,o)=>{const i=Vf.findKey(n,o);if(i)return t[i]=pd(r),void delete t[o];const a=e?function(e){return e.trim().toLowerCase().replace(/([a-z\d])(\w*)/g,((e,t,n)=>t.toUpperCase()+n))}(o):String(o).trim();a!==o&&delete t[o],t[a]=pd(r),n[a]=!0})),this}concat(...e){return this.constructor.concat(this,...e)}toJSON(e){const t=Object.create(null);return Vf.forEach(this,((n,r)=>{null!=n&&!1!==n&&(t[r]=e&&Vf.isArray(n)?n.join(", "):n)})),t}[Symbol.iterator](){return Object.entries(this.toJSON())[Symbol.iterator]()}toString(){return Object.entries(this.toJSON()).map((([e,t])=>e+": "+t)).join("\n")}get[Symbol.toStringTag](){return"AxiosHeaders"}static from(e){return e instanceof this?e:new this(e)}static concat(e,...t){const n=new this(e);return t.forEach((e=>n.set(e))),n}static accessor(e){const t=(this[fd]=this[fd]={accessors:{}}).accessors,n=this.prototype;function r(e){const r=dd(e);t[r]||(function(e,t){const n=Vf.toCamelCase(" "+t);["get","set","has"].forEach((r=>{Object.defineProperty(e,r+n,{value:function(e,n,o){return this[r].call(this,t,e,n,o)},configurable:!0})}))}(n,e),t[r]=!0)}return Vf.isArray(e)?e.forEach(r):r(e),this}}md.accessor(["Content-Type","Content-Length","Accept","Accept-Encoding","User-Agent","Authorization"]),Vf.reduceDescriptors(md.prototype,(({value:e},t)=>{let n=t[0].toUpperCase()+t.slice(1);return{get:()=>e,set(e){this[n]=e}}})),Vf.freezeMethods(md);var vd=md;function yd(e,t){const n=this||sd,r=t||n,o=vd.from(r.headers);let i=r.data;return Vf.forEach(e,(function(e){i=e.call(n,i,o.normalize(),t?t.status:void 0)})),o.normalize(),i}function gd(e){return!(!e||!e.__CANCEL__)}function bd(e,t,n){$f.call(this,null==e?"canceled":e,$f.ERR_CANCELED,t,n),this.name="CanceledError"}Vf.inherits(bd,$f,{__CANCEL__:!0});var wd=bd,_d=ad.isStandardBrowserEnv?{write:function(e,t,n,r,o,i){const a=[];a.push(e+"="+encodeURIComponent(t)),Vf.isNumber(n)&&a.push("expires="+new Date(n).toGMTString()),Vf.isString(r)&&a.push("path="+r),Vf.isString(o)&&a.push("domain="+o),!0===i&&a.push("secure"),document.cookie=a.join("; ")},read:function(e){const t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}};function xd(e,t){return e&&!/^([a-z][a-z\d+\-.]*:)?\/\//i.test(t)?function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}(e,t):t}var Sd=ad.isStandardBrowserEnv?function(){const e=/(msie|trident)/i.test(navigator.userAgent),t=document.createElement("a");let n;function r(n){let r=n;return e&&(t.setAttribute("href",r),r=t.href),t.setAttribute("href",r),{href:t.href,protocol:t.protocol?t.protocol.replace(/:$/,""):"",host:t.host,search:t.search?t.search.replace(/^\?/,""):"",hash:t.hash?t.hash.replace(/^#/,""):"",hostname:t.hostname,port:t.port,pathname:"/"===t.pathname.charAt(0)?t.pathname:"/"+t.pathname}}return n=r(window.location.href),function(e){const t=Vf.isString(e)?r(e):e;return t.protocol===n.protocol&&t.host===n.host}}():function(){return!0};function Ad(e,t){let n=0;const r=function(e,t){e=e||10;const n=new Array(e),r=new Array(e);let o,i=0,a=0;return t=void 0!==t?t:1e3,function(l){const u=Date.now(),s=r[a];o||(o=u),n[i]=l,r[i]=u;let c=a,f=0;for(;c!==i;)f+=n[c++],c%=e;if(i=(i+1)%e,i===a&&(a=(a+1)%e),u-o<t)return;const d=s&&u-s;return d?Math.round(1e3*f/d):void 0}}(50,250);return o=>{const i=o.loaded,a=o.lengthComputable?o.total:void 0,l=i-n,u=r(l);n=i;const s={loaded:i,total:a,progress:a?i/a:void 0,bytes:l,rate:u||void 0,estimated:u&&a&&i<=a?(a-i)/u:void 0,event:o};s[t?"download":"upload"]=!0,e(s)}}const Ed={http:null,xhr:"undefined"!=typeof XMLHttpRequest&&function(e){return new Promise((function(t,n){let r=e.data;const o=vd.from(e.headers).normalize(),i=e.responseType;let a;function l(){e.cancelToken&&e.cancelToken.unsubscribe(a),e.signal&&e.signal.removeEventListener("abort",a)}Vf.isFormData(r)&&(ad.isStandardBrowserEnv||ad.isStandardBrowserWebWorkerEnv?o.setContentType(!1):o.setContentType("multipart/form-data;",!1));let u=new XMLHttpRequest;if(e.auth){const t=e.auth.username||"",n=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";o.set("Authorization","Basic "+btoa(t+":"+n))}const s=xd(e.baseURL,e.url);function c(){if(!u)return;const r=vd.from("getAllResponseHeaders"in u&&u.getAllResponseHeaders());!function(e,t,n){const r=n.config.validateStatus;n.status&&r&&!r(n.status)?t(new $f("Request failed with status code "+n.status,[$f.ERR_BAD_REQUEST,$f.ERR_BAD_RESPONSE][Math.floor(n.status/100)-4],n.config,n.request,n)):e(n)}((function(e){t(e),l()}),(function(e){n(e),l()}),{data:i&&"text"!==i&&"json"!==i?u.response:u.responseText,status:u.status,statusText:u.statusText,headers:r,config:e,request:u}),u=null}if(u.open(e.method.toUpperCase(),rd(s,e.params,e.paramsSerializer),!0),u.timeout=e.timeout,"onloadend"in u?u.onloadend=c:u.onreadystatechange=function(){u&&4===u.readyState&&(0!==u.status||u.responseURL&&0===u.responseURL.indexOf("file:"))&&setTimeout(c)},u.onabort=function(){u&&(n(new $f("Request aborted",$f.ECONNABORTED,e,u)),u=null)},u.onerror=function(){n(new $f("Network Error",$f.ERR_NETWORK,e,u)),u=null},u.ontimeout=function(){let t=e.timeout?"timeout of "+e.timeout+"ms exceeded":"timeout exceeded";const r=e.transitional||id;e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),n(new $f(t,r.clarifyTimeoutError?$f.ETIMEDOUT:$f.ECONNABORTED,e,u)),u=null},ad.isStandardBrowserEnv){const t=(e.withCredentials||Sd(s))&&e.xsrfCookieName&&_d.read(e.xsrfCookieName);t&&o.set(e.xsrfHeaderName,t)}void 0===r&&o.setContentType(null),"setRequestHeader"in u&&Vf.forEach(o.toJSON(),(function(e,t){u.setRequestHeader(t,e)})),Vf.isUndefined(e.withCredentials)||(u.withCredentials=!!e.withCredentials),i&&"json"!==i&&(u.responseType=e.responseType),"function"==typeof e.onDownloadProgress&&u.addEventListener("progress",Ad(e.onDownloadProgress,!0)),"function"==typeof e.onUploadProgress&&u.upload&&u.upload.addEventListener("progress",Ad(e.onUploadProgress)),(e.cancelToken||e.signal)&&(a=t=>{u&&(n(!t||t.type?new wd(null,e,u):t),u.abort(),u=null)},e.cancelToken&&e.cancelToken.subscribe(a),e.signal&&(e.signal.aborted?a():e.signal.addEventListener("abort",a)));const f=function(e){const t=/^([-+\w]{1,25})(:?\/\/|:)/.exec(e);return t&&t[1]||""}(s);f&&-1===ad.protocols.indexOf(f)?n(new $f("Unsupported protocol "+f+":",$f.ERR_BAD_REQUEST,e)):u.send(r||null)}))}};Vf.forEach(Ed,((e,t)=>{if(e){try{Object.defineProperty(e,"name",{value:t})}catch(e){}Object.defineProperty(e,"adapterName",{value:t})}}));var kd=e=>{e=Vf.isArray(e)?e:[e];const{length:t}=e;let n,r;for(let o=0;o<t&&(n=e[o],!(r=Vf.isString(n)?Ed[n.toLowerCase()]:n));o++);if(!r){if(!1===r)throw new $f(`Adapter ${n} is not supported by the environment`,"ERR_NOT_SUPPORT");throw new Error(Vf.hasOwnProp(Ed,n)?`Adapter '${n}' is not available in the build`:`Unknown adapter '${n}'`)}if(!Vf.isFunction(r))throw new TypeError("adapter is not a function");return r};function Cd(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new wd(null,e)}function Od(e){return Cd(e),e.headers=vd.from(e.headers),e.data=yd.call(e,e.transformRequest),-1!==["post","put","patch"].indexOf(e.method)&&e.headers.setContentType("application/x-www-form-urlencoded",!1),kd(e.adapter||sd.adapter)(e).then((function(t){return Cd(e),t.data=yd.call(e,e.transformResponse,t),t.headers=vd.from(t.headers),t}),(function(t){return gd(t)||(Cd(e),t&&t.response&&(t.response.data=yd.call(e,e.transformResponse,t.response),t.response.headers=vd.from(t.response.headers))),Promise.reject(t)}))}const jd=e=>e instanceof vd?e.toJSON():e;function Pd(e,t){t=t||{};const n={};function r(e,t,n){return Vf.isPlainObject(e)&&Vf.isPlainObject(t)?Vf.merge.call({caseless:n},e,t):Vf.isPlainObject(t)?Vf.merge({},t):Vf.isArray(t)?t.slice():t}function o(e,t,n){return Vf.isUndefined(t)?Vf.isUndefined(e)?void 0:r(void 0,e,n):r(e,t,n)}function i(e,t){if(!Vf.isUndefined(t))return r(void 0,t)}function a(e,t){return Vf.isUndefined(t)?Vf.isUndefined(e)?void 0:r(void 0,e):r(void 0,t)}function l(n,o,i){return i in t?r(n,o):i in e?r(void 0,n):void 0}const u={url:i,method:i,data:i,baseURL:a,transformRequest:a,transformResponse:a,paramsSerializer:a,timeout:a,timeoutMessage:a,withCredentials:a,adapter:a,responseType:a,xsrfCookieName:a,xsrfHeaderName:a,onUploadProgress:a,onDownloadProgress:a,decompress:a,maxContentLength:a,maxBodyLength:a,beforeRedirect:a,transport:a,httpAgent:a,httpsAgent:a,cancelToken:a,socketPath:a,responseEncoding:a,validateStatus:l,headers:(e,t)=>o(jd(e),jd(t),!0)};return Vf.forEach(Object.keys(Object.assign({},e,t)),(function(r){const i=u[r]||o,a=i(e[r],t[r],r);Vf.isUndefined(a)&&i!==l||(n[r]=a)})),n}const Rd={};["object","boolean","number","function","string","symbol"].forEach(((e,t)=>{Rd[e]=function(n){return typeof n===e||"a"+(t<1?"n ":" ")+e}}));const Td={};Rd.transitional=function(e,t,n){function r(e,t){return"[Axios v1.5.0] Transitional option '"+e+"'"+t+(n?". "+n:"")}return(n,o,i)=>{if(!1===e)throw new $f(r(o," has been removed"+(t?" in "+t:"")),$f.ERR_DEPRECATED);return t&&!Td[o]&&(Td[o]=!0,console.warn(r(o," has been deprecated since v"+t+" and will be removed in the near future"))),!e||e(n,o,i)}};var Nd={assertOptions:function(e,t,n){if("object"!=typeof e)throw new $f("options must be an object",$f.ERR_BAD_OPTION_VALUE);const r=Object.keys(e);let o=r.length;for(;o-- >0;){const i=r[o],a=t[i];if(a){const t=e[i],n=void 0===t||a(t,i,e);if(!0!==n)throw new $f("option "+i+" must be "+n,$f.ERR_BAD_OPTION_VALUE)}else if(!0!==n)throw new $f("Unknown option "+i,$f.ERR_BAD_OPTION)}},validators:Rd};const Dd=Nd.validators;class Md{constructor(e){this.defaults=e,this.interceptors={request:new od,response:new od}}request(e,t){"string"==typeof e?(t=t||{}).url=e:t=e||{},t=Pd(this.defaults,t);const{transitional:n,paramsSerializer:r,headers:o}=t;void 0!==n&&Nd.assertOptions(n,{silentJSONParsing:Dd.transitional(Dd.boolean),forcedJSONParsing:Dd.transitional(Dd.boolean),clarifyTimeoutError:Dd.transitional(Dd.boolean)},!1),null!=r&&(Vf.isFunction(r)?t.paramsSerializer={serialize:r}:Nd.assertOptions(r,{encode:Dd.function,serialize:Dd.function},!0)),t.method=(t.method||this.defaults.method||"get").toLowerCase();let i=o&&Vf.merge(o.common,o[t.method]);o&&Vf.forEach(["delete","get","head","post","put","patch","common"],(e=>{delete o[e]})),t.headers=vd.concat(i,o);const a=[];let l=!0;this.interceptors.request.forEach((function(e){"function"==typeof e.runWhen&&!1===e.runWhen(t)||(l=l&&e.synchronous,a.unshift(e.fulfilled,e.rejected))}));const u=[];let s;this.interceptors.response.forEach((function(e){u.push(e.fulfilled,e.rejected)}));let c,f=0;if(!l){const e=[Od.bind(this),void 0];for(e.unshift.apply(e,a),e.push.apply(e,u),c=e.length,s=Promise.resolve(t);f<c;)s=s.then(e[f++],e[f++]);return s}c=a.length;let d=t;for(f=0;f<c;){const e=a[f++],t=a[f++];try{d=e(d)}catch(e){t.call(this,e);break}}try{s=Od.call(this,d)}catch(e){return Promise.reject(e)}for(f=0,c=u.length;f<c;)s=s.then(u[f++],u[f++]);return s}getUri(e){return rd(xd((e=Pd(this.defaults,e)).baseURL,e.url),e.params,e.paramsSerializer)}}Vf.forEach(["delete","get","head","options"],(function(e){Md.prototype[e]=function(t,n){return this.request(Pd(n||{},{method:e,url:t,data:(n||{}).data}))}})),Vf.forEach(["post","put","patch"],(function(e){function t(t){return function(n,r,o){return this.request(Pd(o||{},{method:e,headers:t?{"Content-Type":"multipart/form-data"}:{},url:n,data:r}))}}Md.prototype[e]=t(),Md.prototype[e+"Form"]=t(!0)}));var Ld=Md;class Ud{constructor(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");let t;this.promise=new Promise((function(e){t=e}));const n=this;this.promise.then((e=>{if(!n._listeners)return;let t=n._listeners.length;for(;t-- >0;)n._listeners[t](e);n._listeners=null})),this.promise.then=e=>{let t;const r=new Promise((e=>{n.subscribe(e),t=e})).then(e);return r.cancel=function(){n.unsubscribe(t)},r},e((function(e,r,o){n.reason||(n.reason=new wd(e,r,o),t(n.reason))}))}throwIfRequested(){if(this.reason)throw this.reason}subscribe(e){this.reason?e(this.reason):this._listeners?this._listeners.push(e):this._listeners=[e]}unsubscribe(e){if(!this._listeners)return;const t=this._listeners.indexOf(e);-1!==t&&this._listeners.splice(t,1)}static source(){let e;const t=new Ud((function(t){e=t}));return{token:t,cancel:e}}}var Fd=Ud;const zd={Continue:100,SwitchingProtocols:101,Processing:102,EarlyHints:103,Ok:200,Created:201,Accepted:202,NonAuthoritativeInformation:203,NoContent:204,ResetContent:205,PartialContent:206,MultiStatus:207,AlreadyReported:208,ImUsed:226,MultipleChoices:300,MovedPermanently:301,Found:302,SeeOther:303,NotModified:304,UseProxy:305,Unused:306,TemporaryRedirect:307,PermanentRedirect:308,BadRequest:400,Unauthorized:401,PaymentRequired:402,Forbidden:403,NotFound:404,MethodNotAllowed:405,NotAcceptable:406,ProxyAuthenticationRequired:407,RequestTimeout:408,Conflict:409,Gone:410,LengthRequired:411,PreconditionFailed:412,PayloadTooLarge:413,UriTooLong:414,UnsupportedMediaType:415,RangeNotSatisfiable:416,ExpectationFailed:417,ImATeapot:418,MisdirectedRequest:421,UnprocessableEntity:422,Locked:423,FailedDependency:424,TooEarly:425,UpgradeRequired:426,PreconditionRequired:428,TooManyRequests:429,RequestHeaderFieldsTooLarge:431,UnavailableForLegalReasons:451,InternalServerError:500,NotImplemented:501,BadGateway:502,ServiceUnavailable:503,GatewayTimeout:504,HttpVersionNotSupported:505,VariantAlsoNegotiates:506,InsufficientStorage:507,LoopDetected:508,NotExtended:510,NetworkAuthenticationRequired:511};Object.entries(zd).forEach((([e,t])=>{zd[t]=e}));var Id=zd;const Bd=function e(t){const n=new Ld(t),r=uf(Ld.prototype.request,n);return Vf.extend(r,Ld.prototype,n,{allOwnKeys:!0}),Vf.extend(r,n,null,{allOwnKeys:!0}),r.create=function(n){return e(Pd(t,n))},r}(sd);Bd.Axios=Ld,Bd.CanceledError=wd,Bd.CancelToken=Fd,Bd.isCancel=gd,Bd.VERSION="1.5.0",Bd.toFormData=Yf,Bd.AxiosError=$f,Bd.Cancel=Bd.CanceledError,Bd.all=function(e){return Promise.all(e)},Bd.spread=function(e){return function(t){return e.apply(null,t)}},Bd.isAxiosError=function(e){return Vf.isObject(e)&&!0===e.isAxiosError},Bd.mergeConfig=Pd,Bd.AxiosHeaders=vd,Bd.formToJSON=e=>ld(Vf.isHTMLForm(e)?new FormData(e):e),Bd.getAdapter=kd,Bd.HttpStatusCode=Id,Bd.default=Bd;var Vd=Bd,Wd=function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function a(e){try{u(r.next(e))}catch(e){i(e)}}function l(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,l)}u((r=r.apply(e,t||[])).next())}))},Hd=function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function l(l){return function(u){return function(l){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,l[0]&&(a=0)),a;)try{if(n=1,r&&(o=2&l[0]?r.return:l[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,l[1])).done)return o;switch(r=0,o&&(l=[2&l[0],o.value]),l[0]){case 0:case 1:o=l;break;case 4:return a.label++,{value:l[1],done:!1};case 5:a.label++,r=l[1],l=[0];continue;case 7:l=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==l[0]&&2!==l[0])){a=0;continue}if(3===l[0]&&(!o||l[1]>o[0]&&l[1]<o[3])){a.label=l[1];break}if(6===l[0]&&a.label<o[1]){a.label=o[1],o=l;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(l);break}o[2]&&a.ops.pop(),a.trys.pop();continue}l=t.call(e,a)}catch(e){l=[6,e],r=0}finally{n=o=0}if(5&l[0])throw l[1];return{value:l[0]?l[1]:void 0,done:!0}}([l,u])}}},qd=function(e){var t=this;void 0===e&&(e={});var n=new Map,r=e.extra,o=e.onError,i=void 0===o?Go:o;So(i,"onError");var a=function(e){for(var t=0,r=Array.from(n.values());t<r.length;t++){var o=r[t];if(e(o))return o}},l=function(e){var t=a((function(t){return t.effect===e.effect}));return t||(t=function(e){var t=Wo(e),n=t.type,r=t.predicate,o=t.effect;return{id:yo(),effect:o,type:n,predicate:r,pending:new Set,unsubscribe:function(){throw new Error("Unsubscribe not initialized")}}}(e)),function(e){return e.unsubscribe=function(){return n.delete(e.id)},n.set(e.id,e),function(t){e.unsubscribe(),(null==t?void 0:t.cancelActive)&&Ho(e)}}(t)},u=function(e){var t=Wo(e),n=t.type,r=t.effect,o=t.predicate,i=a((function(e){return("string"==typeof n?e.type===n:e.predicate===o)&&e.effect===r}));return i&&(i.unsubscribe(),e.cancelActive&&Ho(i)),!!i},s=function(e,o,a,u){return so(t,null,(function(){var t,s,c;return Jr(this,(function(f){switch(f.label){case 0:t=new AbortController,s=function(e,t){return function(n,r){return Eo(function(n,r){return so(void 0,null,(function(){var o,i,a,l;return Jr(this,(function(u){switch(u.label){case 0:Lo(t),o=function(){},i=new Promise((function(t,r){var i=e({predicate:n,effect:function(e,n){n.unsubscribe(),t([e,n.getState(),n.getOriginalState()])}});o=function(){i(),r()}})),a=[i],null!=r&&a.push(new Promise((function(e){return setTimeout(e,r,null)}))),u.label=1;case 1:return u.trys.push([1,,3,4]),[4,Uo(t,Promise.race(a))];case 2:return l=u.sent(),Lo(t),[2,l];case 3:return o(),[7];case 4:return[2]}}))}))}(n,r))}}(l,t.signal),f.label=1;case 1:return f.trys.push([1,3,4,5]),e.pending.add(t),[4,Promise.resolve(e.effect(o,Io({},a,{getOriginalState:u,condition:function(e,t){return s(e,t).then(Boolean)},take:s,delay:zo(t.signal),pause:Fo(t.signal),extra:r,signal:t.signal,fork:(d=t.signal,function(e){So(e,"taskExecutor");var t,n=new AbortController;t=n,ko(d,(function(){return Co(t,d.reason)}));var r,o,i=(r=function(){return so(void 0,null,(function(){var t;return Jr(this,(function(r){switch(r.label){case 0:return Lo(d),Lo(n.signal),[4,e({pause:Fo(n.signal),delay:zo(n.signal),signal:n.signal})];case 1:return t=r.sent(),Lo(n.signal),[2,t]}}))}))},o=function(){return Co(n,To)},so(void 0,null,(function(){var e;return Jr(this,(function(t){switch(t.label){case 0:return t.trys.push([0,3,4,5]),[4,Promise.resolve()];case 1:return t.sent(),[4,r()];case 2:return[2,{status:"ok",value:t.sent()}];case 3:return[2,{status:(e=t.sent())instanceof Mo?"cancelled":"rejected",error:e}];case 4:return null==o||o(),[7];case 5:return[2]}}))})));return{result:Fo(d)(i),cancel:function(){Co(n,Ro)}}}),unsubscribe:e.unsubscribe,subscribe:function(){n.set(e.id,e)},cancelActiveListeners:function(){e.pending.forEach((function(e,n,r){e!==t&&(Co(e,No),r.delete(e))}))}})))];case 2:return f.sent(),[3,5];case 3:return(c=f.sent())instanceof Mo||qo(i,c,{raisedBy:"effect"}),[3,5];case 4:return Co(t,Do),e.pending.delete(t),[7];case 5:return[2]}var d}))}))},c=function(e){return function(){e.forEach(Ho),e.clear()}}(n);return{middleware:function(e){return function(t){return function(r){if(!function(e){return fo(e)&&"type"in e}(r))return t(r);if($o.match(r))return l(r.payload);if(!Ko.match(r)){if(Zo.match(r))return u(r.payload);var o,a=e.getState(),f=function(){if(a===Bo)throw new Error(Vo+": getOriginalState can only be called synchronously");return a};try{if(o=t(r),n.size>0)for(var d=e.getState(),p=Array.from(n.values()),h=0,m=p;h<m.length;h++){var v=m[h],y=!1;try{y=v.predicate(r,d,a)}catch(e){y=!1,qo(i,e,{raisedBy:"predicate"})}y&&s(v,r,e,f)}}finally{a=Bo}return o}c()}}},startListening:l,stopListening:u,clearListeners:c}}(),$d="https://api.openweathermap.org/data/2.5/forecast?id=703448&units=metric&mode=json&APPID=".concat(di);function Kd(){return Wd(this,void 0,void 0,(function(){return Hd(this,(function(e){switch(e.label){case 0:return[4,Vd.get($d)];case 1:return[2,e.sent().data.list]}}))}))}qd.startListening({actionCreator:Qo,effect:function(e,t){return Wd(void 0,void 0,void 0,(function(){var e;return Hd(this,(function(n){switch(n.label){case 0:return[4,Kd()];case 1:return e=n.sent(),t.dispatch(Yo(e)),[2]}}))}))}});var Zd,Gd,Qd=function(e,t,n,r){void 0===n&&(n=[]);var o,i="function"==typeof t?function(e){var t,n={},r=[],o={addCase:function(e,t){var r="string"==typeof e?e:e.type;if(r in n)throw new Error("addCase cannot be called with two reducers for the same action type");return n[r]=t,o},addMatcher:function(e,t){return r.push({matcher:e,reducer:t}),o},addDefaultCase:function(e){return t=e,o}};return e(o),[n,r,t]}(t):[t,n,r],a=i[0],l=i[1],u=i[2];if(function(e){return"function"==typeof e}(e))o=function(){return mo(e())};else{var s=mo(e);o=function(){return s}}function c(e,t){void 0===e&&(e=o());var n=Xr([a[t.type]],l.filter((function(e){return(0,e.matcher)(t)})).map((function(e){return e.reducer})));return 0===n.filter((function(e){return!!e})).length&&(n=[u]),n.reduce((function(e,n){if(n){var r;if(Fn(e))return void 0===(r=n(e,t))?e:r;if(zn(e))return Dr(e,(function(e){return n(e,t)}));if(void 0===(r=n(e,t))){if(null===e)return e;throw Error("A case reducer on a non-draftable value must not return undefined")}return r}return e}),e)}return c.getInitialState=o,c}({loading:!1,loaded:!1,list:[]},((Zd={})[Qo]=function(e){e.loading=!0},Zd[Yo]=function(e,t){e.loading=!1,e.list=t.payload},Zd)),Yd={loading:!1,loaded:!1,list:[]},Jd=Hr({apiOpenWeatherReducer:Qd,mapCloudsStateReducer:function(e,t){return void 0===e&&(e=Yd),t.type,e},routing:a(3311).mg}),Xd=function(e){var t,n=function(e){return function(e){void 0===e&&(e={});var t=e.thunk,n=void 0===t||t,r=(e.immutableCheck,e.serializableCheck,new po);return n&&(function(e){return"boolean"==typeof e}(n)?r.push(Qr):r.push(Qr.withExtraArgument(n.extraArgument))),r}(e)},r=e||{},o=r.reducer,i=void 0===o?void 0:o,a=r.middleware,l=void 0===a?n():a,u=r.devTools,s=void 0===u||u,c=r.preloadedState,f=void 0===c?void 0:c,d=r.enhancers,p=void 0===d?void 0:d;if("function"==typeof i)t=i;else{if(!fo(i))throw new Error('"reducer" is a required argument, and must be a function or an object of functions that can be passed to combineReducers');t=Hr(i)}var h=l;"function"==typeof h&&(h=h(n));var m=$r.apply(void 0,h),v=qr;s&&(v=co(lo({trace:!1},"object"==typeof s&&s)));var y=new ho(m),g=y;return Array.isArray(p)?g=Xr([m],p):"function"==typeof p&&(g=p(y)),Wr(t,f,v.apply(void 0,g))}({reducer:Jd,middleware:function(e){return e().prepend(qd.middleware)}});n.createRoot(document.getElementById("root")).render((0,t.jsx)((function(){return(0,t.jsx)(t.Fragment,{children:(0,t.jsx)(Ln,{store:Xd,children:(0,t.jsx)("div",{className:af.app,children:(0,t.jsx)(Je,{router:nf,fallbackElement:(0,t.jsx)(lf,{})})})})})}),{})),(Gd=null)&&Gd instanceof Function&&a.e(131).then(a.bind(a,2131)).then((e=>{let{getCLS:t,getFID:n,getFCP:r,getLCP:o,getTTFB:i}=e;t(Gd),n(Gd),r(Gd),o(Gd),i(Gd)}))}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,